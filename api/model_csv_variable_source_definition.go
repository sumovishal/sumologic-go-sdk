/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// CsvVariableSourceDefinition struct for CsvVariableSourceDefinition
type CsvVariableSourceDefinition struct {
	VariableSourceDefinition
	// Comma separated values for the variable.
	Values string `json:"values"`
}

// NewCsvVariableSourceDefinition instantiates a new CsvVariableSourceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCsvVariableSourceDefinition(values string, variableSourceType string) *CsvVariableSourceDefinition {
	this := CsvVariableSourceDefinition{}
	this.VariableSourceType = variableSourceType
	this.Values = values
	return &this
}

// NewCsvVariableSourceDefinitionWithDefaults instantiates a new CsvVariableSourceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCsvVariableSourceDefinitionWithDefaults() *CsvVariableSourceDefinition {
	this := CsvVariableSourceDefinition{}
	return &this
}

// GetValues returns the Values field value
func (o *CsvVariableSourceDefinition) GetValues() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *CsvVariableSourceDefinition) GetValuesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Values, true
}

// SetValues sets field value
func (o *CsvVariableSourceDefinition) SetValues(v string) {
	o.Values = v
}

func (o CsvVariableSourceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedVariableSourceDefinition, errVariableSourceDefinition := json.Marshal(o.VariableSourceDefinition)
	if errVariableSourceDefinition != nil {
		return []byte{}, errVariableSourceDefinition
	}
	errVariableSourceDefinition = json.Unmarshal([]byte(serializedVariableSourceDefinition), &toSerialize)
	if errVariableSourceDefinition != nil {
		return []byte{}, errVariableSourceDefinition
	}
	if true {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableCsvVariableSourceDefinition struct {
	value *CsvVariableSourceDefinition
	isSet bool
}

func (v NullableCsvVariableSourceDefinition) Get() *CsvVariableSourceDefinition {
	return v.value
}

func (v *NullableCsvVariableSourceDefinition) Set(val *CsvVariableSourceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableCsvVariableSourceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableCsvVariableSourceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCsvVariableSourceDefinition(val *CsvVariableSourceDefinition) *NullableCsvVariableSourceDefinition {
	return &NullableCsvVariableSourceDefinition{value: val, isSet: true}
}

func (v NullableCsvVariableSourceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCsvVariableSourceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


