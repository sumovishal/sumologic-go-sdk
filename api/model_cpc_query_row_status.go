/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CpcQueryRowStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CpcQueryRowStatus{}

// CpcQueryRowStatus struct for CpcQueryRowStatus
type CpcQueryRowStatus struct {
	// A unique identifier of the query.
	RowId string `json:"rowId"`
	// A list of CPC query statuses on a per time bucket basis.  Each status corresponds to the status of calculating aggregated CPC data from a sample of traces  matching search criteria falling within a specific time slice.
	Buckets []CpcQueryBucketStatus `json:"buckets"`
	// Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Canceled`.
	Status string `json:"status" validate:"regexp=^(Processing|Finished|Error|Canceled)$"`
}

type _CpcQueryRowStatus CpcQueryRowStatus

// NewCpcQueryRowStatus instantiates a new CpcQueryRowStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCpcQueryRowStatus(rowId string, buckets []CpcQueryBucketStatus, status string) *CpcQueryRowStatus {
	this := CpcQueryRowStatus{}
	this.RowId = rowId
	this.Buckets = buckets
	this.Status = status
	return &this
}

// NewCpcQueryRowStatusWithDefaults instantiates a new CpcQueryRowStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCpcQueryRowStatusWithDefaults() *CpcQueryRowStatus {
	this := CpcQueryRowStatus{}
	return &this
}

// GetRowId returns the RowId field value
func (o *CpcQueryRowStatus) GetRowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowId
}

// GetRowIdOk returns a tuple with the RowId field value
// and a boolean to check if the value has been set.
func (o *CpcQueryRowStatus) GetRowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowId, true
}

// SetRowId sets field value
func (o *CpcQueryRowStatus) SetRowId(v string) {
	o.RowId = v
}

// GetBuckets returns the Buckets field value
func (o *CpcQueryRowStatus) GetBuckets() []CpcQueryBucketStatus {
	if o == nil {
		var ret []CpcQueryBucketStatus
		return ret
	}

	return o.Buckets
}

// GetBucketsOk returns a tuple with the Buckets field value
// and a boolean to check if the value has been set.
func (o *CpcQueryRowStatus) GetBucketsOk() ([]CpcQueryBucketStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.Buckets, true
}

// SetBuckets sets field value
func (o *CpcQueryRowStatus) SetBuckets(v []CpcQueryBucketStatus) {
	o.Buckets = v
}

// GetStatus returns the Status field value
func (o *CpcQueryRowStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CpcQueryRowStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CpcQueryRowStatus) SetStatus(v string) {
	o.Status = v
}

func (o CpcQueryRowStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CpcQueryRowStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowId"] = o.RowId
	toSerialize["buckets"] = o.Buckets
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *CpcQueryRowStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rowId",
		"buckets",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCpcQueryRowStatus := _CpcQueryRowStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCpcQueryRowStatus)

	if err != nil {
		return err
	}

	*o = CpcQueryRowStatus(varCpcQueryRowStatus)

	return err
}

type NullableCpcQueryRowStatus struct {
	value *CpcQueryRowStatus
	isSet bool
}

func (v NullableCpcQueryRowStatus) Get() *CpcQueryRowStatus {
	return v.value
}

func (v *NullableCpcQueryRowStatus) Set(val *CpcQueryRowStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCpcQueryRowStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCpcQueryRowStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpcQueryRowStatus(val *CpcQueryRowStatus) *NullableCpcQueryRowStatus {
	return &NullableCpcQueryRowStatus{value: val, isSet: true}
}

func (v NullableCpcQueryRowStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpcQueryRowStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


