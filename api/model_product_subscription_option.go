/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductSubscriptionOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductSubscriptionOption{}

// ProductSubscriptionOption Subscription option containing billing frequency and discount details.
type ProductSubscriptionOption struct {
	// Identifier for the plans billing term. Valid values are:  1. Monthly  2. Annually 
	BillingFrequency string `json:"billingFrequency" validate:"regexp=^(Monthly|Annually)$"`
	// Discount percentage for this plan's subscription.
	DiscountPercentage int32 `json:"discountPercentage"`
}

type _ProductSubscriptionOption ProductSubscriptionOption

// NewProductSubscriptionOption instantiates a new ProductSubscriptionOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductSubscriptionOption(billingFrequency string, discountPercentage int32) *ProductSubscriptionOption {
	this := ProductSubscriptionOption{}
	this.BillingFrequency = billingFrequency
	this.DiscountPercentage = discountPercentage
	return &this
}

// NewProductSubscriptionOptionWithDefaults instantiates a new ProductSubscriptionOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductSubscriptionOptionWithDefaults() *ProductSubscriptionOption {
	this := ProductSubscriptionOption{}
	return &this
}

// GetBillingFrequency returns the BillingFrequency field value
func (o *ProductSubscriptionOption) GetBillingFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value
// and a boolean to check if the value has been set.
func (o *ProductSubscriptionOption) GetBillingFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingFrequency, true
}

// SetBillingFrequency sets field value
func (o *ProductSubscriptionOption) SetBillingFrequency(v string) {
	o.BillingFrequency = v
}

// GetDiscountPercentage returns the DiscountPercentage field value
func (o *ProductSubscriptionOption) GetDiscountPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiscountPercentage
}

// GetDiscountPercentageOk returns a tuple with the DiscountPercentage field value
// and a boolean to check if the value has been set.
func (o *ProductSubscriptionOption) GetDiscountPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscountPercentage, true
}

// SetDiscountPercentage sets field value
func (o *ProductSubscriptionOption) SetDiscountPercentage(v int32) {
	o.DiscountPercentage = v
}

func (o ProductSubscriptionOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductSubscriptionOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["billingFrequency"] = o.BillingFrequency
	toSerialize["discountPercentage"] = o.DiscountPercentage
	return toSerialize, nil
}

func (o *ProductSubscriptionOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"billingFrequency",
		"discountPercentage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductSubscriptionOption := _ProductSubscriptionOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductSubscriptionOption)

	if err != nil {
		return err
	}

	*o = ProductSubscriptionOption(varProductSubscriptionOption)

	return err
}

type NullableProductSubscriptionOption struct {
	value *ProductSubscriptionOption
	isSet bool
}

func (v NullableProductSubscriptionOption) Get() *ProductSubscriptionOption {
	return v.value
}

func (v *NullableProductSubscriptionOption) Set(val *ProductSubscriptionOption) {
	v.value = val
	v.isSet = true
}

func (v NullableProductSubscriptionOption) IsSet() bool {
	return v.isSet
}

func (v *NullableProductSubscriptionOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductSubscriptionOption(val *ProductSubscriptionOption) *NullableProductSubscriptionOption {
	return &NullableProductSubscriptionOption{value: val, isSet: true}
}

func (v NullableProductSubscriptionOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductSubscriptionOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


