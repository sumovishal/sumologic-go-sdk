/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// LookupUpdateDefinition The updated lookup table parameters.
type LookupUpdateDefinition struct {
	// A time to live for each entry in the lookup table (in minutes). 0 is a special value. A TTL of 0 implies entry will never be deleted from the table.
	Ttl int32 `json:"ttl"`
	// The description of the lookup table. The description cannot be blank.
	Description string `json:"description"`
	// The action that needs to be taken when the size limit is reached for the table. The possible values can be `StopIncomingMessages` or `DeleteOldData`. DeleteOldData will starting deleting old data once size limit is reached whereas StopIncomingMessages will discard all the updates made to the lookup table once size limit is reached.
	SizeLimitAction *string `json:"sizeLimitAction,omitempty"`
}

// NewLookupUpdateDefinition instantiates a new LookupUpdateDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLookupUpdateDefinition(ttl int32, description string) *LookupUpdateDefinition {
	this := LookupUpdateDefinition{}
	this.Ttl = ttl
	this.Description = description
	var sizeLimitAction string = "StopIncomingMessages"
	this.SizeLimitAction = &sizeLimitAction
	return &this
}

// NewLookupUpdateDefinitionWithDefaults instantiates a new LookupUpdateDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLookupUpdateDefinitionWithDefaults() *LookupUpdateDefinition {
	this := LookupUpdateDefinition{}
	var ttl int32 = 0
	this.Ttl = ttl
	var sizeLimitAction string = "StopIncomingMessages"
	this.SizeLimitAction = &sizeLimitAction
	return &this
}

// GetTtl returns the Ttl field value
func (o *LookupUpdateDefinition) GetTtl() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *LookupUpdateDefinition) GetTtlOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *LookupUpdateDefinition) SetTtl(v int32) {
	o.Ttl = v
}

// GetDescription returns the Description field value
func (o *LookupUpdateDefinition) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *LookupUpdateDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *LookupUpdateDefinition) SetDescription(v string) {
	o.Description = v
}

// GetSizeLimitAction returns the SizeLimitAction field value if set, zero value otherwise.
func (o *LookupUpdateDefinition) GetSizeLimitAction() string {
	if o == nil || o.SizeLimitAction == nil {
		var ret string
		return ret
	}
	return *o.SizeLimitAction
}

// GetSizeLimitActionOk returns a tuple with the SizeLimitAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupUpdateDefinition) GetSizeLimitActionOk() (*string, bool) {
	if o == nil || o.SizeLimitAction == nil {
		return nil, false
	}
	return o.SizeLimitAction, true
}

// HasSizeLimitAction returns a boolean if a field has been set.
func (o *LookupUpdateDefinition) HasSizeLimitAction() bool {
	if o != nil && o.SizeLimitAction != nil {
		return true
	}

	return false
}

// SetSizeLimitAction gets a reference to the given string and assigns it to the SizeLimitAction field.
func (o *LookupUpdateDefinition) SetSizeLimitAction(v string) {
	o.SizeLimitAction = &v
}

func (o LookupUpdateDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ttl"] = o.Ttl
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.SizeLimitAction != nil {
		toSerialize["sizeLimitAction"] = o.SizeLimitAction
	}
	return json.Marshal(toSerialize)
}

type NullableLookupUpdateDefinition struct {
	value *LookupUpdateDefinition
	isSet bool
}

func (v NullableLookupUpdateDefinition) Get() *LookupUpdateDefinition {
	return v.value
}

func (v *NullableLookupUpdateDefinition) Set(val *LookupUpdateDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableLookupUpdateDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableLookupUpdateDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookupUpdateDefinition(val *LookupUpdateDefinition) *NullableLookupUpdateDefinition {
	return &NullableLookupUpdateDefinition{value: val, isSet: true}
}

func (v NullableLookupUpdateDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookupUpdateDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


