/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// AndTracingExpressionAllOf struct for AndTracingExpressionAllOf
type AndTracingExpressionAllOf struct {
	// Evaluates to true, if (and only if) all expressions evaluate to true, otherwise evaluates to false.
	Expressions []TraceQueryExpression `json:"expressions"`
}

// NewAndTracingExpressionAllOf instantiates a new AndTracingExpressionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAndTracingExpressionAllOf(expressions []TraceQueryExpression) *AndTracingExpressionAllOf {
	this := AndTracingExpressionAllOf{}
	this.Expressions = expressions
	return &this
}

// NewAndTracingExpressionAllOfWithDefaults instantiates a new AndTracingExpressionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAndTracingExpressionAllOfWithDefaults() *AndTracingExpressionAllOf {
	this := AndTracingExpressionAllOf{}
	return &this
}

// GetExpressions returns the Expressions field value
func (o *AndTracingExpressionAllOf) GetExpressions() []TraceQueryExpression {
	if o == nil {
		var ret []TraceQueryExpression
		return ret
	}

	return o.Expressions
}

// GetExpressionsOk returns a tuple with the Expressions field value
// and a boolean to check if the value has been set.
func (o *AndTracingExpressionAllOf) GetExpressionsOk() ([]TraceQueryExpression, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expressions, true
}

// SetExpressions sets field value
func (o *AndTracingExpressionAllOf) SetExpressions(v []TraceQueryExpression) {
	o.Expressions = v
}

func (o AndTracingExpressionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["expressions"] = o.Expressions
	}
	return json.Marshal(toSerialize)
}

type NullableAndTracingExpressionAllOf struct {
	value *AndTracingExpressionAllOf
	isSet bool
}

func (v NullableAndTracingExpressionAllOf) Get() *AndTracingExpressionAllOf {
	return v.value
}

func (v *NullableAndTracingExpressionAllOf) Set(val *AndTracingExpressionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAndTracingExpressionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAndTracingExpressionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAndTracingExpressionAllOf(val *AndTracingExpressionAllOf) *NullableAndTracingExpressionAllOf {
	return &NullableAndTracingExpressionAllOf{value: val, isSet: true}
}

func (v NullableAndTracingExpressionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAndTracingExpressionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


