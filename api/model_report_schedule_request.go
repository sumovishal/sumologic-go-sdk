/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReportScheduleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportScheduleRequest{}

// ReportScheduleRequest struct for ReportScheduleRequest
type ReportScheduleRequest struct {
	// Identifier of dashboard the schedule will generate report for.
	DashboardId string `json:"dashboardId"`
	TimeRange *ResolvableTimeRange `json:"timeRange,omitempty"`
	VariableValues *VariablesValuesData `json:"variableValues,omitempty"`
	// File format of the report. Can be `Pdf` or `Png`. `Pdf` is portable document format. `Png` is portable graphics image format.
	ReportFormat string `json:"reportFormat" validate:"regexp=^(Pdf|Png)$"`
	// Run schedule of the scheduled report. Set to \"Custom\" to specify the schedule with a CRON expression. Possible schedule types are:   - `RealTime`   - `15Minutes`   - `1Hour`   - `2Hours`   - `4Hours`   - `6Hours`   - `8Hours`   - `12Hours`   - `1Day`   - `1Week`   - `Custom`
	ScheduleType string `json:"scheduleType"`
	// Cron-like expression specifying the report's schedule. Field scheduleType must be set to \"Custom\", otherwise, scheduleType takes precedence over cronExpression.
	CronExpression *string `json:"cronExpression,omitempty"`
	// Time zone identifier for time specification. Either an abbreviation such as \"PST\", a full name such as \"America/Los_Angeles\", or a custom ID such as \"GMT-8:00\". Note that the support of abbreviations is for JDK 1.1.x compatibility only and full names should be used.
	TimeZone string `json:"timeZone"`
	EmailNotification *Email `json:"emailNotification,omitempty"`
	// The notifications the dashboard report will be sent at the scheduled data and time. If field emailNotification is set, emailNotification takes precedence over notifications for email.
	Notifications []Action `json:"notifications,omitempty"`
	// Is the dashboard report schedule active
	IsActive *bool `json:"isActive,omitempty"`
}

type _ReportScheduleRequest ReportScheduleRequest

// NewReportScheduleRequest instantiates a new ReportScheduleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportScheduleRequest(dashboardId string, reportFormat string, scheduleType string, timeZone string) *ReportScheduleRequest {
	this := ReportScheduleRequest{}
	this.DashboardId = dashboardId
	this.ReportFormat = reportFormat
	this.ScheduleType = scheduleType
	this.TimeZone = timeZone
	var isActive bool = true
	this.IsActive = &isActive
	return &this
}

// NewReportScheduleRequestWithDefaults instantiates a new ReportScheduleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportScheduleRequestWithDefaults() *ReportScheduleRequest {
	this := ReportScheduleRequest{}
	var isActive bool = true
	this.IsActive = &isActive
	return &this
}

// GetDashboardId returns the DashboardId field value
func (o *ReportScheduleRequest) GetDashboardId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DashboardId
}

// GetDashboardIdOk returns a tuple with the DashboardId field value
// and a boolean to check if the value has been set.
func (o *ReportScheduleRequest) GetDashboardIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DashboardId, true
}

// SetDashboardId sets field value
func (o *ReportScheduleRequest) SetDashboardId(v string) {
	o.DashboardId = v
}

// GetTimeRange returns the TimeRange field value if set, zero value otherwise.
func (o *ReportScheduleRequest) GetTimeRange() ResolvableTimeRange {
	if o == nil || IsNil(o.TimeRange) {
		var ret ResolvableTimeRange
		return ret
	}
	return *o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportScheduleRequest) GetTimeRangeOk() (*ResolvableTimeRange, bool) {
	if o == nil || IsNil(o.TimeRange) {
		return nil, false
	}
	return o.TimeRange, true
}

// HasTimeRange returns a boolean if a field has been set.
func (o *ReportScheduleRequest) HasTimeRange() bool {
	if o != nil && !IsNil(o.TimeRange) {
		return true
	}

	return false
}

// SetTimeRange gets a reference to the given ResolvableTimeRange and assigns it to the TimeRange field.
func (o *ReportScheduleRequest) SetTimeRange(v ResolvableTimeRange) {
	o.TimeRange = &v
}

// GetVariableValues returns the VariableValues field value if set, zero value otherwise.
func (o *ReportScheduleRequest) GetVariableValues() VariablesValuesData {
	if o == nil || IsNil(o.VariableValues) {
		var ret VariablesValuesData
		return ret
	}
	return *o.VariableValues
}

// GetVariableValuesOk returns a tuple with the VariableValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportScheduleRequest) GetVariableValuesOk() (*VariablesValuesData, bool) {
	if o == nil || IsNil(o.VariableValues) {
		return nil, false
	}
	return o.VariableValues, true
}

// HasVariableValues returns a boolean if a field has been set.
func (o *ReportScheduleRequest) HasVariableValues() bool {
	if o != nil && !IsNil(o.VariableValues) {
		return true
	}

	return false
}

// SetVariableValues gets a reference to the given VariablesValuesData and assigns it to the VariableValues field.
func (o *ReportScheduleRequest) SetVariableValues(v VariablesValuesData) {
	o.VariableValues = &v
}

// GetReportFormat returns the ReportFormat field value
func (o *ReportScheduleRequest) GetReportFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportFormat
}

// GetReportFormatOk returns a tuple with the ReportFormat field value
// and a boolean to check if the value has been set.
func (o *ReportScheduleRequest) GetReportFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportFormat, true
}

// SetReportFormat sets field value
func (o *ReportScheduleRequest) SetReportFormat(v string) {
	o.ReportFormat = v
}

// GetScheduleType returns the ScheduleType field value
func (o *ReportScheduleRequest) GetScheduleType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value
// and a boolean to check if the value has been set.
func (o *ReportScheduleRequest) GetScheduleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleType, true
}

// SetScheduleType sets field value
func (o *ReportScheduleRequest) SetScheduleType(v string) {
	o.ScheduleType = v
}

// GetCronExpression returns the CronExpression field value if set, zero value otherwise.
func (o *ReportScheduleRequest) GetCronExpression() string {
	if o == nil || IsNil(o.CronExpression) {
		var ret string
		return ret
	}
	return *o.CronExpression
}

// GetCronExpressionOk returns a tuple with the CronExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportScheduleRequest) GetCronExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.CronExpression) {
		return nil, false
	}
	return o.CronExpression, true
}

// HasCronExpression returns a boolean if a field has been set.
func (o *ReportScheduleRequest) HasCronExpression() bool {
	if o != nil && !IsNil(o.CronExpression) {
		return true
	}

	return false
}

// SetCronExpression gets a reference to the given string and assigns it to the CronExpression field.
func (o *ReportScheduleRequest) SetCronExpression(v string) {
	o.CronExpression = &v
}

// GetTimeZone returns the TimeZone field value
func (o *ReportScheduleRequest) GetTimeZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value
// and a boolean to check if the value has been set.
func (o *ReportScheduleRequest) GetTimeZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeZone, true
}

// SetTimeZone sets field value
func (o *ReportScheduleRequest) SetTimeZone(v string) {
	o.TimeZone = v
}

// GetEmailNotification returns the EmailNotification field value if set, zero value otherwise.
func (o *ReportScheduleRequest) GetEmailNotification() Email {
	if o == nil || IsNil(o.EmailNotification) {
		var ret Email
		return ret
	}
	return *o.EmailNotification
}

// GetEmailNotificationOk returns a tuple with the EmailNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportScheduleRequest) GetEmailNotificationOk() (*Email, bool) {
	if o == nil || IsNil(o.EmailNotification) {
		return nil, false
	}
	return o.EmailNotification, true
}

// HasEmailNotification returns a boolean if a field has been set.
func (o *ReportScheduleRequest) HasEmailNotification() bool {
	if o != nil && !IsNil(o.EmailNotification) {
		return true
	}

	return false
}

// SetEmailNotification gets a reference to the given Email and assigns it to the EmailNotification field.
func (o *ReportScheduleRequest) SetEmailNotification(v Email) {
	o.EmailNotification = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *ReportScheduleRequest) GetNotifications() []Action {
	if o == nil || IsNil(o.Notifications) {
		var ret []Action
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportScheduleRequest) GetNotificationsOk() ([]Action, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *ReportScheduleRequest) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []Action and assigns it to the Notifications field.
func (o *ReportScheduleRequest) SetNotifications(v []Action) {
	o.Notifications = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *ReportScheduleRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportScheduleRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *ReportScheduleRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *ReportScheduleRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

func (o ReportScheduleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportScheduleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dashboardId"] = o.DashboardId
	if !IsNil(o.TimeRange) {
		toSerialize["timeRange"] = o.TimeRange
	}
	if !IsNil(o.VariableValues) {
		toSerialize["variableValues"] = o.VariableValues
	}
	toSerialize["reportFormat"] = o.ReportFormat
	toSerialize["scheduleType"] = o.ScheduleType
	if !IsNil(o.CronExpression) {
		toSerialize["cronExpression"] = o.CronExpression
	}
	toSerialize["timeZone"] = o.TimeZone
	if !IsNil(o.EmailNotification) {
		toSerialize["emailNotification"] = o.EmailNotification
	}
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	return toSerialize, nil
}

func (o *ReportScheduleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dashboardId",
		"reportFormat",
		"scheduleType",
		"timeZone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportScheduleRequest := _ReportScheduleRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportScheduleRequest)

	if err != nil {
		return err
	}

	*o = ReportScheduleRequest(varReportScheduleRequest)

	return err
}

type NullableReportScheduleRequest struct {
	value *ReportScheduleRequest
	isSet bool
}

func (v NullableReportScheduleRequest) Get() *ReportScheduleRequest {
	return v.value
}

func (v *NullableReportScheduleRequest) Set(val *ReportScheduleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReportScheduleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReportScheduleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportScheduleRequest(val *ReportScheduleRequest) *NullableReportScheduleRequest {
	return &NullableReportScheduleRequest{value: val, isSet: true}
}

func (v NullableReportScheduleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportScheduleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


