/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the LogsOutlierCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsOutlierCondition{}

// LogsOutlierCondition struct for LogsOutlierCondition
type LogsOutlierCondition struct {
	TriggerCondition
	// Sets the trailing number of data points to calculate mean and sigma.
	Window *int64 `json:"window,omitempty"`
	// Sets the required number of consecutive indicator data points (outliers) to trigger a violation.
	Consecutive *int64 `json:"consecutive,omitempty"`
	// Specifies which direction should trigger violations.
	Direction *string `json:"direction,omitempty"`
	// Sets the number of standard deviations for calculating violations.
	Threshold *float64 `json:"threshold,omitempty"`
	// The name of the field that the trigger condition will alert on.
	Field *string `json:"field,omitempty"`
}

// NewLogsOutlierCondition instantiates a new LogsOutlierCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsOutlierCondition(triggerType string) *LogsOutlierCondition {
	this := LogsOutlierCondition{}
	var detectionMethod string = "StaticCondition"
	this.DetectionMethod = &detectionMethod
	this.TriggerType = triggerType
	var window int64 = 50
	this.Window = &window
	var consecutive int64 = 1
	this.Consecutive = &consecutive
	var direction string = "Both"
	this.Direction = &direction
	var threshold float64 = 3.0
	this.Threshold = &threshold
	return &this
}

// NewLogsOutlierConditionWithDefaults instantiates a new LogsOutlierCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsOutlierConditionWithDefaults() *LogsOutlierCondition {
	this := LogsOutlierCondition{}
	var window int64 = 50
	this.Window = &window
	var consecutive int64 = 1
	this.Consecutive = &consecutive
	var direction string = "Both"
	this.Direction = &direction
	var threshold float64 = 3.0
	this.Threshold = &threshold
	return &this
}

// GetWindow returns the Window field value if set, zero value otherwise.
func (o *LogsOutlierCondition) GetWindow() int64 {
	if o == nil || IsNil(o.Window) {
		var ret int64
		return ret
	}
	return *o.Window
}

// GetWindowOk returns a tuple with the Window field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlierCondition) GetWindowOk() (*int64, bool) {
	if o == nil || IsNil(o.Window) {
		return nil, false
	}
	return o.Window, true
}

// HasWindow returns a boolean if a field has been set.
func (o *LogsOutlierCondition) HasWindow() bool {
	if o != nil && !IsNil(o.Window) {
		return true
	}

	return false
}

// SetWindow gets a reference to the given int64 and assigns it to the Window field.
func (o *LogsOutlierCondition) SetWindow(v int64) {
	o.Window = &v
}

// GetConsecutive returns the Consecutive field value if set, zero value otherwise.
func (o *LogsOutlierCondition) GetConsecutive() int64 {
	if o == nil || IsNil(o.Consecutive) {
		var ret int64
		return ret
	}
	return *o.Consecutive
}

// GetConsecutiveOk returns a tuple with the Consecutive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlierCondition) GetConsecutiveOk() (*int64, bool) {
	if o == nil || IsNil(o.Consecutive) {
		return nil, false
	}
	return o.Consecutive, true
}

// HasConsecutive returns a boolean if a field has been set.
func (o *LogsOutlierCondition) HasConsecutive() bool {
	if o != nil && !IsNil(o.Consecutive) {
		return true
	}

	return false
}

// SetConsecutive gets a reference to the given int64 and assigns it to the Consecutive field.
func (o *LogsOutlierCondition) SetConsecutive(v int64) {
	o.Consecutive = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *LogsOutlierCondition) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlierCondition) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *LogsOutlierCondition) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *LogsOutlierCondition) SetDirection(v string) {
	o.Direction = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *LogsOutlierCondition) GetThreshold() float64 {
	if o == nil || IsNil(o.Threshold) {
		var ret float64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlierCondition) GetThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *LogsOutlierCondition) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float64 and assigns it to the Threshold field.
func (o *LogsOutlierCondition) SetThreshold(v float64) {
	o.Threshold = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *LogsOutlierCondition) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlierCondition) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *LogsOutlierCondition) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *LogsOutlierCondition) SetField(v string) {
	o.Field = &v
}

func (o LogsOutlierCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsOutlierCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTriggerCondition, errTriggerCondition := json.Marshal(o.TriggerCondition)
	if errTriggerCondition != nil {
		return map[string]interface{}{}, errTriggerCondition
	}
	errTriggerCondition = json.Unmarshal([]byte(serializedTriggerCondition), &toSerialize)
	if errTriggerCondition != nil {
		return map[string]interface{}{}, errTriggerCondition
	}
	if !IsNil(o.Window) {
		toSerialize["window"] = o.Window
	}
	if !IsNil(o.Consecutive) {
		toSerialize["consecutive"] = o.Consecutive
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	return toSerialize, nil
}

type NullableLogsOutlierCondition struct {
	value *LogsOutlierCondition
	isSet bool
}

func (v NullableLogsOutlierCondition) Get() *LogsOutlierCondition {
	return v.value
}

func (v *NullableLogsOutlierCondition) Set(val *LogsOutlierCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsOutlierCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsOutlierCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsOutlierCondition(val *LogsOutlierCondition) *NullableLogsOutlierCondition {
	return &NullableLogsOutlierCondition{value: val, isSet: true}
}

func (v NullableLogsOutlierCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsOutlierCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


