/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// CSEWindowsSensorOfflineTrackerAllOf struct for CSEWindowsSensorOfflineTrackerAllOf
type CSEWindowsSensorOfflineTrackerAllOf struct {
	// The number of minutes without heartbeat after which sensor is marked offline.
	MinutesWithNoHeartbeatBeforeMarkingOffline *string `json:"minutesWithNoHeartbeatBeforeMarkingOffline,omitempty"`
}

// NewCSEWindowsSensorOfflineTrackerAllOf instantiates a new CSEWindowsSensorOfflineTrackerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSEWindowsSensorOfflineTrackerAllOf() *CSEWindowsSensorOfflineTrackerAllOf {
	this := CSEWindowsSensorOfflineTrackerAllOf{}
	return &this
}

// NewCSEWindowsSensorOfflineTrackerAllOfWithDefaults instantiates a new CSEWindowsSensorOfflineTrackerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSEWindowsSensorOfflineTrackerAllOfWithDefaults() *CSEWindowsSensorOfflineTrackerAllOf {
	this := CSEWindowsSensorOfflineTrackerAllOf{}
	return &this
}

// GetMinutesWithNoHeartbeatBeforeMarkingOffline returns the MinutesWithNoHeartbeatBeforeMarkingOffline field value if set, zero value otherwise.
func (o *CSEWindowsSensorOfflineTrackerAllOf) GetMinutesWithNoHeartbeatBeforeMarkingOffline() string {
	if o == nil || o.MinutesWithNoHeartbeatBeforeMarkingOffline == nil {
		var ret string
		return ret
	}
	return *o.MinutesWithNoHeartbeatBeforeMarkingOffline
}

// GetMinutesWithNoHeartbeatBeforeMarkingOfflineOk returns a tuple with the MinutesWithNoHeartbeatBeforeMarkingOffline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsSensorOfflineTrackerAllOf) GetMinutesWithNoHeartbeatBeforeMarkingOfflineOk() (*string, bool) {
	if o == nil || o.MinutesWithNoHeartbeatBeforeMarkingOffline == nil {
		return nil, false
	}
	return o.MinutesWithNoHeartbeatBeforeMarkingOffline, true
}

// HasMinutesWithNoHeartbeatBeforeMarkingOffline returns a boolean if a field has been set.
func (o *CSEWindowsSensorOfflineTrackerAllOf) HasMinutesWithNoHeartbeatBeforeMarkingOffline() bool {
	if o != nil && o.MinutesWithNoHeartbeatBeforeMarkingOffline != nil {
		return true
	}

	return false
}

// SetMinutesWithNoHeartbeatBeforeMarkingOffline gets a reference to the given string and assigns it to the MinutesWithNoHeartbeatBeforeMarkingOffline field.
func (o *CSEWindowsSensorOfflineTrackerAllOf) SetMinutesWithNoHeartbeatBeforeMarkingOffline(v string) {
	o.MinutesWithNoHeartbeatBeforeMarkingOffline = &v
}

func (o CSEWindowsSensorOfflineTrackerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MinutesWithNoHeartbeatBeforeMarkingOffline != nil {
		toSerialize["minutesWithNoHeartbeatBeforeMarkingOffline"] = o.MinutesWithNoHeartbeatBeforeMarkingOffline
	}
	return json.Marshal(toSerialize)
}

type NullableCSEWindowsSensorOfflineTrackerAllOf struct {
	value *CSEWindowsSensorOfflineTrackerAllOf
	isSet bool
}

func (v NullableCSEWindowsSensorOfflineTrackerAllOf) Get() *CSEWindowsSensorOfflineTrackerAllOf {
	return v.value
}

func (v *NullableCSEWindowsSensorOfflineTrackerAllOf) Set(val *CSEWindowsSensorOfflineTrackerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCSEWindowsSensorOfflineTrackerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCSEWindowsSensorOfflineTrackerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSEWindowsSensorOfflineTrackerAllOf(val *CSEWindowsSensorOfflineTrackerAllOf) *NullableCSEWindowsSensorOfflineTrackerAllOf {
	return &NullableCSEWindowsSensorOfflineTrackerAllOf{value: val, isSet: true}
}

func (v NullableCSEWindowsSensorOfflineTrackerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSEWindowsSensorOfflineTrackerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


