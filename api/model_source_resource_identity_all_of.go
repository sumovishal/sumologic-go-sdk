/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the SourceResourceIdentityAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceResourceIdentityAllOf{}

// SourceResourceIdentityAllOf struct for SourceResourceIdentityAllOf
type SourceResourceIdentityAllOf struct {
	// The unique identifier of the Collector this Source belongs to.
	CollectorId *string `json:"collectorId,omitempty"`
	// The name of the Collector this Source belongs to.
	CollectorName *string `json:"collectorName,omitempty"`
}

// NewSourceResourceIdentityAllOf instantiates a new SourceResourceIdentityAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceResourceIdentityAllOf() *SourceResourceIdentityAllOf {
	this := SourceResourceIdentityAllOf{}
	var collectorId string = "Unknown"
	this.CollectorId = &collectorId
	var collectorName string = "Unknown"
	this.CollectorName = &collectorName
	return &this
}

// NewSourceResourceIdentityAllOfWithDefaults instantiates a new SourceResourceIdentityAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceResourceIdentityAllOfWithDefaults() *SourceResourceIdentityAllOf {
	this := SourceResourceIdentityAllOf{}
	var collectorId string = "Unknown"
	this.CollectorId = &collectorId
	var collectorName string = "Unknown"
	this.CollectorName = &collectorName
	return &this
}

// GetCollectorId returns the CollectorId field value if set, zero value otherwise.
func (o *SourceResourceIdentityAllOf) GetCollectorId() string {
	if o == nil || IsNil(o.CollectorId) {
		var ret string
		return ret
	}
	return *o.CollectorId
}

// GetCollectorIdOk returns a tuple with the CollectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceResourceIdentityAllOf) GetCollectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CollectorId) {
		return nil, false
	}
	return o.CollectorId, true
}

// HasCollectorId returns a boolean if a field has been set.
func (o *SourceResourceIdentityAllOf) HasCollectorId() bool {
	if o != nil && !IsNil(o.CollectorId) {
		return true
	}

	return false
}

// SetCollectorId gets a reference to the given string and assigns it to the CollectorId field.
func (o *SourceResourceIdentityAllOf) SetCollectorId(v string) {
	o.CollectorId = &v
}

// GetCollectorName returns the CollectorName field value if set, zero value otherwise.
func (o *SourceResourceIdentityAllOf) GetCollectorName() string {
	if o == nil || IsNil(o.CollectorName) {
		var ret string
		return ret
	}
	return *o.CollectorName
}

// GetCollectorNameOk returns a tuple with the CollectorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceResourceIdentityAllOf) GetCollectorNameOk() (*string, bool) {
	if o == nil || IsNil(o.CollectorName) {
		return nil, false
	}
	return o.CollectorName, true
}

// HasCollectorName returns a boolean if a field has been set.
func (o *SourceResourceIdentityAllOf) HasCollectorName() bool {
	if o != nil && !IsNil(o.CollectorName) {
		return true
	}

	return false
}

// SetCollectorName gets a reference to the given string and assigns it to the CollectorName field.
func (o *SourceResourceIdentityAllOf) SetCollectorName(v string) {
	o.CollectorName = &v
}

func (o SourceResourceIdentityAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceResourceIdentityAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CollectorId) {
		toSerialize["collectorId"] = o.CollectorId
	}
	if !IsNil(o.CollectorName) {
		toSerialize["collectorName"] = o.CollectorName
	}
	return toSerialize, nil
}

type NullableSourceResourceIdentityAllOf struct {
	value *SourceResourceIdentityAllOf
	isSet bool
}

func (v NullableSourceResourceIdentityAllOf) Get() *SourceResourceIdentityAllOf {
	return v.value
}

func (v *NullableSourceResourceIdentityAllOf) Set(val *SourceResourceIdentityAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceResourceIdentityAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceResourceIdentityAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceResourceIdentityAllOf(val *SourceResourceIdentityAllOf) *NullableSourceResourceIdentityAllOf {
	return &NullableSourceResourceIdentityAllOf{value: val, isSet: true}
}

func (v NullableSourceResourceIdentityAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceResourceIdentityAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


