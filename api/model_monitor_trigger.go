/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MonitorTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorTrigger{}

// MonitorTrigger Monitor related info required for defining SLO.
type MonitorTrigger struct {
	// Hex-id of the monitor on which the SLI is based.
	MonitorId string `json:"monitorId"`
	// The types of trigger conditions (such as Critical, Warning, MissingData etc).
	TriggerTypes []string `json:"triggerTypes"`
}

// NewMonitorTrigger instantiates a new MonitorTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorTrigger(monitorId string, triggerTypes []string) *MonitorTrigger {
	this := MonitorTrigger{}
	this.MonitorId = monitorId
	this.TriggerTypes = triggerTypes
	return &this
}

// NewMonitorTriggerWithDefaults instantiates a new MonitorTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorTriggerWithDefaults() *MonitorTrigger {
	this := MonitorTrigger{}
	return &this
}

// GetMonitorId returns the MonitorId field value
func (o *MonitorTrigger) GetMonitorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MonitorId
}

// GetMonitorIdOk returns a tuple with the MonitorId field value
// and a boolean to check if the value has been set.
func (o *MonitorTrigger) GetMonitorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonitorId, true
}

// SetMonitorId sets field value
func (o *MonitorTrigger) SetMonitorId(v string) {
	o.MonitorId = v
}

// GetTriggerTypes returns the TriggerTypes field value
func (o *MonitorTrigger) GetTriggerTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TriggerTypes
}

// GetTriggerTypesOk returns a tuple with the TriggerTypes field value
// and a boolean to check if the value has been set.
func (o *MonitorTrigger) GetTriggerTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TriggerTypes, true
}

// SetTriggerTypes sets field value
func (o *MonitorTrigger) SetTriggerTypes(v []string) {
	o.TriggerTypes = v
}

func (o MonitorTrigger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["monitorId"] = o.MonitorId
	toSerialize["triggerTypes"] = o.TriggerTypes
	return toSerialize, nil
}

type NullableMonitorTrigger struct {
	value *MonitorTrigger
	isSet bool
}

func (v NullableMonitorTrigger) Get() *MonitorTrigger {
	return v.value
}

func (v *NullableMonitorTrigger) Set(val *MonitorTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorTrigger(val *MonitorTrigger) *NullableMonitorTrigger {
	return &NullableMonitorTrigger{value: val, isSet: true}
}

func (v NullableMonitorTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


