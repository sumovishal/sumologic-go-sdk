/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the ViewFilterDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewFilterDefinition{}

// ViewFilterDefinition struct for ViewFilterDefinition
type ViewFilterDefinition struct {
	// Name of the view.
	ViewName string `json:"viewName"`
}

// NewViewFilterDefinition instantiates a new ViewFilterDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewFilterDefinition(viewName string) *ViewFilterDefinition {
	this := ViewFilterDefinition{}
	this.ViewName = viewName
	return &this
}

// NewViewFilterDefinitionWithDefaults instantiates a new ViewFilterDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewFilterDefinitionWithDefaults() *ViewFilterDefinition {
	this := ViewFilterDefinition{}
	return &this
}

// GetViewName returns the ViewName field value
func (o *ViewFilterDefinition) GetViewName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value
// and a boolean to check if the value has been set.
func (o *ViewFilterDefinition) GetViewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewName, true
}

// SetViewName sets field value
func (o *ViewFilterDefinition) SetViewName(v string) {
	o.ViewName = v
}

func (o ViewFilterDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewFilterDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["viewName"] = o.ViewName
	return toSerialize, nil
}

type NullableViewFilterDefinition struct {
	value *ViewFilterDefinition
	isSet bool
}

func (v NullableViewFilterDefinition) Get() *ViewFilterDefinition {
	return v.value
}

func (v *NullableViewFilterDefinition) Set(val *ViewFilterDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableViewFilterDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableViewFilterDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewFilterDefinition(val *ViewFilterDefinition) *NullableViewFilterDefinition {
	return &NullableViewFilterDefinition{value: val, isSet: true}
}

func (v NullableViewFilterDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewFilterDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


