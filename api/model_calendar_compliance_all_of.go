/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the CalendarComplianceAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalendarComplianceAllOf{}

// CalendarComplianceAllOf struct for CalendarComplianceAllOf
type CalendarComplianceAllOf struct {
	// Type of Calendar Window (week/month/quarter).
	WindowType string `json:"windowType"`
	// Start of the calendar window. For week, it would be the day of the week (for e.g Sunday, Monday etc). For month, it will always be the first day of the month (therefore not required to specify for monthly compliance). For quarter, it would be the first month of the quarter (for e.g January, February etc.)
	StartFrom *string `json:"startFrom,omitempty"`
}

// NewCalendarComplianceAllOf instantiates a new CalendarComplianceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarComplianceAllOf(windowType string) *CalendarComplianceAllOf {
	this := CalendarComplianceAllOf{}
	this.WindowType = windowType
	return &this
}

// NewCalendarComplianceAllOfWithDefaults instantiates a new CalendarComplianceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarComplianceAllOfWithDefaults() *CalendarComplianceAllOf {
	this := CalendarComplianceAllOf{}
	return &this
}

// GetWindowType returns the WindowType field value
func (o *CalendarComplianceAllOf) GetWindowType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WindowType
}

// GetWindowTypeOk returns a tuple with the WindowType field value
// and a boolean to check if the value has been set.
func (o *CalendarComplianceAllOf) GetWindowTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WindowType, true
}

// SetWindowType sets field value
func (o *CalendarComplianceAllOf) SetWindowType(v string) {
	o.WindowType = v
}

// GetStartFrom returns the StartFrom field value if set, zero value otherwise.
func (o *CalendarComplianceAllOf) GetStartFrom() string {
	if o == nil || IsNil(o.StartFrom) {
		var ret string
		return ret
	}
	return *o.StartFrom
}

// GetStartFromOk returns a tuple with the StartFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarComplianceAllOf) GetStartFromOk() (*string, bool) {
	if o == nil || IsNil(o.StartFrom) {
		return nil, false
	}
	return o.StartFrom, true
}

// HasStartFrom returns a boolean if a field has been set.
func (o *CalendarComplianceAllOf) HasStartFrom() bool {
	if o != nil && !IsNil(o.StartFrom) {
		return true
	}

	return false
}

// SetStartFrom gets a reference to the given string and assigns it to the StartFrom field.
func (o *CalendarComplianceAllOf) SetStartFrom(v string) {
	o.StartFrom = &v
}

func (o CalendarComplianceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalendarComplianceAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["windowType"] = o.WindowType
	if !IsNil(o.StartFrom) {
		toSerialize["startFrom"] = o.StartFrom
	}
	return toSerialize, nil
}

type NullableCalendarComplianceAllOf struct {
	value *CalendarComplianceAllOf
	isSet bool
}

func (v NullableCalendarComplianceAllOf) Get() *CalendarComplianceAllOf {
	return v.value
}

func (v *NullableCalendarComplianceAllOf) Set(val *CalendarComplianceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarComplianceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarComplianceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarComplianceAllOf(val *CalendarComplianceAllOf) *NullableCalendarComplianceAllOf {
	return &NullableCalendarComplianceAllOf{value: val, isSet: true}
}

func (v NullableCalendarComplianceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarComplianceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


