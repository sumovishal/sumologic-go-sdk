/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// LogsOutlierConditionAllOf A rule that defines how logs monitor should evaluate outlier data and trigger notifications.
type LogsOutlierConditionAllOf struct {
	// Sets the trailing number of data points to calculate mean and sigma.
	Window *int64 `json:"window,omitempty"`
	// Sets the required number of consecutive indicator data points (outliers) to trigger a violation.
	Consecutive *int64 `json:"consecutive,omitempty"`
	// Specifies which direction should trigger violations.
	Direction *string `json:"direction,omitempty"`
	// Sets the number of standard deviations for calculating violations.
	Threshold *float64 `json:"threshold,omitempty"`
	// The name of the field that the trigger condition will alert on.
	Field *string `json:"field,omitempty"`
}

// NewLogsOutlierConditionAllOf instantiates a new LogsOutlierConditionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsOutlierConditionAllOf() *LogsOutlierConditionAllOf {
	this := LogsOutlierConditionAllOf{}
	var window int64 = 50
	this.Window = &window
	var consecutive int64 = 1
	this.Consecutive = &consecutive
	var direction string = "Both"
	this.Direction = &direction
	var threshold float64 = 3.0
	this.Threshold = &threshold
	return &this
}

// NewLogsOutlierConditionAllOfWithDefaults instantiates a new LogsOutlierConditionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsOutlierConditionAllOfWithDefaults() *LogsOutlierConditionAllOf {
	this := LogsOutlierConditionAllOf{}
	var window int64 = 50
	this.Window = &window
	var consecutive int64 = 1
	this.Consecutive = &consecutive
	var direction string = "Both"
	this.Direction = &direction
	var threshold float64 = 3.0
	this.Threshold = &threshold
	return &this
}

// GetWindow returns the Window field value if set, zero value otherwise.
func (o *LogsOutlierConditionAllOf) GetWindow() int64 {
	if o == nil || o.Window == nil {
		var ret int64
		return ret
	}
	return *o.Window
}

// GetWindowOk returns a tuple with the Window field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlierConditionAllOf) GetWindowOk() (*int64, bool) {
	if o == nil || o.Window == nil {
		return nil, false
	}
	return o.Window, true
}

// HasWindow returns a boolean if a field has been set.
func (o *LogsOutlierConditionAllOf) HasWindow() bool {
	if o != nil && o.Window != nil {
		return true
	}

	return false
}

// SetWindow gets a reference to the given int64 and assigns it to the Window field.
func (o *LogsOutlierConditionAllOf) SetWindow(v int64) {
	o.Window = &v
}

// GetConsecutive returns the Consecutive field value if set, zero value otherwise.
func (o *LogsOutlierConditionAllOf) GetConsecutive() int64 {
	if o == nil || o.Consecutive == nil {
		var ret int64
		return ret
	}
	return *o.Consecutive
}

// GetConsecutiveOk returns a tuple with the Consecutive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlierConditionAllOf) GetConsecutiveOk() (*int64, bool) {
	if o == nil || o.Consecutive == nil {
		return nil, false
	}
	return o.Consecutive, true
}

// HasConsecutive returns a boolean if a field has been set.
func (o *LogsOutlierConditionAllOf) HasConsecutive() bool {
	if o != nil && o.Consecutive != nil {
		return true
	}

	return false
}

// SetConsecutive gets a reference to the given int64 and assigns it to the Consecutive field.
func (o *LogsOutlierConditionAllOf) SetConsecutive(v int64) {
	o.Consecutive = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *LogsOutlierConditionAllOf) GetDirection() string {
	if o == nil || o.Direction == nil {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlierConditionAllOf) GetDirectionOk() (*string, bool) {
	if o == nil || o.Direction == nil {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *LogsOutlierConditionAllOf) HasDirection() bool {
	if o != nil && o.Direction != nil {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *LogsOutlierConditionAllOf) SetDirection(v string) {
	o.Direction = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *LogsOutlierConditionAllOf) GetThreshold() float64 {
	if o == nil || o.Threshold == nil {
		var ret float64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlierConditionAllOf) GetThresholdOk() (*float64, bool) {
	if o == nil || o.Threshold == nil {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *LogsOutlierConditionAllOf) HasThreshold() bool {
	if o != nil && o.Threshold != nil {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float64 and assigns it to the Threshold field.
func (o *LogsOutlierConditionAllOf) SetThreshold(v float64) {
	o.Threshold = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *LogsOutlierConditionAllOf) GetField() string {
	if o == nil || o.Field == nil {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlierConditionAllOf) GetFieldOk() (*string, bool) {
	if o == nil || o.Field == nil {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *LogsOutlierConditionAllOf) HasField() bool {
	if o != nil && o.Field != nil {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *LogsOutlierConditionAllOf) SetField(v string) {
	o.Field = &v
}

func (o LogsOutlierConditionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Window != nil {
		toSerialize["window"] = o.Window
	}
	if o.Consecutive != nil {
		toSerialize["consecutive"] = o.Consecutive
	}
	if o.Direction != nil {
		toSerialize["direction"] = o.Direction
	}
	if o.Threshold != nil {
		toSerialize["threshold"] = o.Threshold
	}
	if o.Field != nil {
		toSerialize["field"] = o.Field
	}
	return json.Marshal(toSerialize)
}

type NullableLogsOutlierConditionAllOf struct {
	value *LogsOutlierConditionAllOf
	isSet bool
}

func (v NullableLogsOutlierConditionAllOf) Get() *LogsOutlierConditionAllOf {
	return v.value
}

func (v *NullableLogsOutlierConditionAllOf) Set(val *LogsOutlierConditionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsOutlierConditionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsOutlierConditionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsOutlierConditionAllOf(val *LogsOutlierConditionAllOf) *NullableLogsOutlierConditionAllOf {
	return &NullableLogsOutlierConditionAllOf{value: val, isSet: true}
}

func (v NullableLogsOutlierConditionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsOutlierConditionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


