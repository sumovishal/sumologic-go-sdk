/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the AnomalyConditionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnomalyConditionAllOf{}

// AnomalyConditionAllOf A rule that defines a monitor based on anomaly models.
type AnomalyConditionAllOf struct {
	// The relative time range of the monitor. Valid values of time ranges are `-5m`, `-10m`, `-15m`, `-30m`, `-1h`, `-3h`, `-6h`, `-12h`, `-24h` or `-1d`.
	TimeRange string `json:"timeRange"`
	// The triggering sensitivity of the anomaly model used for this monitor.
	Sensitivity *float64 `json:"sensitivity,omitempty"`
	// The type of anomaly model that will be used for evaluating this monitor. Only `Cluster` option is supported currently.
	AnomalyDetectorType string `json:"anomalyDetectorType"`
	// The name of the field that the trigger condition will alert on. The trigger could compare the value of specified field with the threshold. If `field` is not specified, monitor would default to result count instead.
	Field string `json:"field"`
	// The minimum number of anomalies required to exist in the current time range for the condition to trigger.
	MinAnomalyCount *int32 `json:"minAnomalyCount,omitempty"`
	// Specifies which direction should trigger violations.
	Direction *string `json:"direction,omitempty"`
}

// NewAnomalyConditionAllOf instantiates a new AnomalyConditionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnomalyConditionAllOf(timeRange string, anomalyDetectorType string, field string) *AnomalyConditionAllOf {
	this := AnomalyConditionAllOf{}
	this.TimeRange = timeRange
	var sensitivity float64 = 0.5
	this.Sensitivity = &sensitivity
	this.AnomalyDetectorType = anomalyDetectorType
	this.Field = field
	var minAnomalyCount int32 = 1
	this.MinAnomalyCount = &minAnomalyCount
	var direction string = "Both"
	this.Direction = &direction
	return &this
}

// NewAnomalyConditionAllOfWithDefaults instantiates a new AnomalyConditionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnomalyConditionAllOfWithDefaults() *AnomalyConditionAllOf {
	this := AnomalyConditionAllOf{}
	var sensitivity float64 = 0.5
	this.Sensitivity = &sensitivity
	var minAnomalyCount int32 = 1
	this.MinAnomalyCount = &minAnomalyCount
	var direction string = "Both"
	this.Direction = &direction
	return &this
}

// GetTimeRange returns the TimeRange field value
func (o *AnomalyConditionAllOf) GetTimeRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *AnomalyConditionAllOf) GetTimeRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *AnomalyConditionAllOf) SetTimeRange(v string) {
	o.TimeRange = v
}

// GetSensitivity returns the Sensitivity field value if set, zero value otherwise.
func (o *AnomalyConditionAllOf) GetSensitivity() float64 {
	if o == nil || IsNil(o.Sensitivity) {
		var ret float64
		return ret
	}
	return *o.Sensitivity
}

// GetSensitivityOk returns a tuple with the Sensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnomalyConditionAllOf) GetSensitivityOk() (*float64, bool) {
	if o == nil || IsNil(o.Sensitivity) {
		return nil, false
	}
	return o.Sensitivity, true
}

// HasSensitivity returns a boolean if a field has been set.
func (o *AnomalyConditionAllOf) HasSensitivity() bool {
	if o != nil && !IsNil(o.Sensitivity) {
		return true
	}

	return false
}

// SetSensitivity gets a reference to the given float64 and assigns it to the Sensitivity field.
func (o *AnomalyConditionAllOf) SetSensitivity(v float64) {
	o.Sensitivity = &v
}

// GetAnomalyDetectorType returns the AnomalyDetectorType field value
func (o *AnomalyConditionAllOf) GetAnomalyDetectorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnomalyDetectorType
}

// GetAnomalyDetectorTypeOk returns a tuple with the AnomalyDetectorType field value
// and a boolean to check if the value has been set.
func (o *AnomalyConditionAllOf) GetAnomalyDetectorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnomalyDetectorType, true
}

// SetAnomalyDetectorType sets field value
func (o *AnomalyConditionAllOf) SetAnomalyDetectorType(v string) {
	o.AnomalyDetectorType = v
}

// GetField returns the Field field value
func (o *AnomalyConditionAllOf) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *AnomalyConditionAllOf) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *AnomalyConditionAllOf) SetField(v string) {
	o.Field = v
}

// GetMinAnomalyCount returns the MinAnomalyCount field value if set, zero value otherwise.
func (o *AnomalyConditionAllOf) GetMinAnomalyCount() int32 {
	if o == nil || IsNil(o.MinAnomalyCount) {
		var ret int32
		return ret
	}
	return *o.MinAnomalyCount
}

// GetMinAnomalyCountOk returns a tuple with the MinAnomalyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnomalyConditionAllOf) GetMinAnomalyCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MinAnomalyCount) {
		return nil, false
	}
	return o.MinAnomalyCount, true
}

// HasMinAnomalyCount returns a boolean if a field has been set.
func (o *AnomalyConditionAllOf) HasMinAnomalyCount() bool {
	if o != nil && !IsNil(o.MinAnomalyCount) {
		return true
	}

	return false
}

// SetMinAnomalyCount gets a reference to the given int32 and assigns it to the MinAnomalyCount field.
func (o *AnomalyConditionAllOf) SetMinAnomalyCount(v int32) {
	o.MinAnomalyCount = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *AnomalyConditionAllOf) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnomalyConditionAllOf) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *AnomalyConditionAllOf) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *AnomalyConditionAllOf) SetDirection(v string) {
	o.Direction = &v
}

func (o AnomalyConditionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnomalyConditionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timeRange"] = o.TimeRange
	if !IsNil(o.Sensitivity) {
		toSerialize["sensitivity"] = o.Sensitivity
	}
	toSerialize["anomalyDetectorType"] = o.AnomalyDetectorType
	toSerialize["field"] = o.Field
	if !IsNil(o.MinAnomalyCount) {
		toSerialize["minAnomalyCount"] = o.MinAnomalyCount
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	return toSerialize, nil
}

type NullableAnomalyConditionAllOf struct {
	value *AnomalyConditionAllOf
	isSet bool
}

func (v NullableAnomalyConditionAllOf) Get() *AnomalyConditionAllOf {
	return v.value
}

func (v *NullableAnomalyConditionAllOf) Set(val *AnomalyConditionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAnomalyConditionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAnomalyConditionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnomalyConditionAllOf(val *AnomalyConditionAllOf) *NullableAnomalyConditionAllOf {
	return &NullableAnomalyConditionAllOf{value: val, isSet: true}
}

func (v NullableAnomalyConditionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnomalyConditionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


