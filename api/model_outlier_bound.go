/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// OutlierBound The upper and lower bound of outlier/baseline.
type OutlierBound struct {
	// Lower bond value.
	Lower *float64 `json:"lower,omitempty"`
	// Upper bond value.
	Upper *float64 `json:"upper,omitempty"`
}

// NewOutlierBound instantiates a new OutlierBound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutlierBound() *OutlierBound {
	this := OutlierBound{}
	return &this
}

// NewOutlierBoundWithDefaults instantiates a new OutlierBound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutlierBoundWithDefaults() *OutlierBound {
	this := OutlierBound{}
	return &this
}

// GetLower returns the Lower field value if set, zero value otherwise.
func (o *OutlierBound) GetLower() float64 {
	if o == nil || o.Lower == nil {
		var ret float64
		return ret
	}
	return *o.Lower
}

// GetLowerOk returns a tuple with the Lower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierBound) GetLowerOk() (*float64, bool) {
	if o == nil || o.Lower == nil {
		return nil, false
	}
	return o.Lower, true
}

// HasLower returns a boolean if a field has been set.
func (o *OutlierBound) HasLower() bool {
	if o != nil && o.Lower != nil {
		return true
	}

	return false
}

// SetLower gets a reference to the given float64 and assigns it to the Lower field.
func (o *OutlierBound) SetLower(v float64) {
	o.Lower = &v
}

// GetUpper returns the Upper field value if set, zero value otherwise.
func (o *OutlierBound) GetUpper() float64 {
	if o == nil || o.Upper == nil {
		var ret float64
		return ret
	}
	return *o.Upper
}

// GetUpperOk returns a tuple with the Upper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierBound) GetUpperOk() (*float64, bool) {
	if o == nil || o.Upper == nil {
		return nil, false
	}
	return o.Upper, true
}

// HasUpper returns a boolean if a field has been set.
func (o *OutlierBound) HasUpper() bool {
	if o != nil && o.Upper != nil {
		return true
	}

	return false
}

// SetUpper gets a reference to the given float64 and assigns it to the Upper field.
func (o *OutlierBound) SetUpper(v float64) {
	o.Upper = &v
}

func (o OutlierBound) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Lower != nil {
		toSerialize["lower"] = o.Lower
	}
	if o.Upper != nil {
		toSerialize["upper"] = o.Upper
	}
	return json.Marshal(toSerialize)
}

type NullableOutlierBound struct {
	value *OutlierBound
	isSet bool
}

func (v NullableOutlierBound) Get() *OutlierBound {
	return v.value
}

func (v *NullableOutlierBound) Set(val *OutlierBound) {
	v.value = val
	v.isSet = true
}

func (v NullableOutlierBound) IsSet() bool {
	return v.isSet
}

func (v *NullableOutlierBound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutlierBound(val *OutlierBound) *NullableOutlierBound {
	return &NullableOutlierBound{value: val, isSet: true}
}

func (v NullableOutlierBound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutlierBound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


