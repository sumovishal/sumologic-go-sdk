/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricTracingFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricTracingFilter{}

// MetricTracingFilter struct for MetricTracingFilter
type MetricTracingFilter struct {
	TraceQueryExpression
	// The name of the metric to filter by. The list of supported metrics can be retrieved using the [Trace Metrics](#operation/getMetrics) endpoint.
	Metric string `json:"metric"`
	// The operator to use. Accepted values:   <table>     <tr>       <th>Operator</th>       <th>Accepted value types</th>     </tr>     <tr>       <th>&lt; &lt;= &gt; &gt;= =</th>       <th>DoubleTracingValue IntegerTracingValue</th>     </tr>     <tr>       <th>between</th>       <th>RangeTracingValue of DoubleTracingValue / IntegerTracingValue</th>     </tr>   </table>
	Operator string `json:"operator"`
	Value *TracingValue `json:"value,omitempty"`
}

type _MetricTracingFilter MetricTracingFilter

// NewMetricTracingFilter instantiates a new MetricTracingFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricTracingFilter(metric string, operator string, type_ string) *MetricTracingFilter {
	this := MetricTracingFilter{}
	this.Type = type_
	this.Metric = metric
	this.Operator = operator
	return &this
}

// NewMetricTracingFilterWithDefaults instantiates a new MetricTracingFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricTracingFilterWithDefaults() *MetricTracingFilter {
	this := MetricTracingFilter{}
	return &this
}

// GetMetric returns the Metric field value
func (o *MetricTracingFilter) GetMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *MetricTracingFilter) GetMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *MetricTracingFilter) SetMetric(v string) {
	o.Metric = v
}

// GetOperator returns the Operator field value
func (o *MetricTracingFilter) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *MetricTracingFilter) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *MetricTracingFilter) SetOperator(v string) {
	o.Operator = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MetricTracingFilter) GetValue() TracingValue {
	if o == nil || IsNil(o.Value) {
		var ret TracingValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricTracingFilter) GetValueOk() (*TracingValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MetricTracingFilter) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given TracingValue and assigns it to the Value field.
func (o *MetricTracingFilter) SetValue(v TracingValue) {
	o.Value = &v
}

func (o MetricTracingFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricTracingFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTraceQueryExpression, errTraceQueryExpression := json.Marshal(o.TraceQueryExpression)
	if errTraceQueryExpression != nil {
		return map[string]interface{}{}, errTraceQueryExpression
	}
	errTraceQueryExpression = json.Unmarshal([]byte(serializedTraceQueryExpression), &toSerialize)
	if errTraceQueryExpression != nil {
		return map[string]interface{}{}, errTraceQueryExpression
	}
	toSerialize["metric"] = o.Metric
	toSerialize["operator"] = o.Operator
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *MetricTracingFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metric",
		"operator",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricTracingFilter := _MetricTracingFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricTracingFilter)

	if err != nil {
		return err
	}

	*o = MetricTracingFilter(varMetricTracingFilter)

	return err
}

type NullableMetricTracingFilter struct {
	value *MetricTracingFilter
	isSet bool
}

func (v NullableMetricTracingFilter) Get() *MetricTracingFilter {
	return v.value
}

func (v *NullableMetricTracingFilter) Set(val *MetricTracingFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricTracingFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricTracingFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricTracingFilter(val *MetricTracingFilter) *NullableMetricTracingFilter {
	return &NullableMetricTracingFilter{value: val, isSet: true}
}

func (v NullableMetricTracingFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricTracingFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


