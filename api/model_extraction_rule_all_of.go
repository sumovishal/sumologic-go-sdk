/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// ExtractionRuleAllOf struct for ExtractionRuleAllOf
type ExtractionRuleAllOf struct {
	// Unique identifier for the field extraction rule.
	Id string `json:"id"`
	// List of extracted fields from \"parseExpression\".
	FieldNames []string `json:"fieldNames,omitempty"`
}

// NewExtractionRuleAllOf instantiates a new ExtractionRuleAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtractionRuleAllOf(id string) *ExtractionRuleAllOf {
	this := ExtractionRuleAllOf{}
	this.Id = id
	return &this
}

// NewExtractionRuleAllOfWithDefaults instantiates a new ExtractionRuleAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtractionRuleAllOfWithDefaults() *ExtractionRuleAllOf {
	this := ExtractionRuleAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *ExtractionRuleAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExtractionRuleAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExtractionRuleAllOf) SetId(v string) {
	o.Id = v
}

// GetFieldNames returns the FieldNames field value if set, zero value otherwise.
func (o *ExtractionRuleAllOf) GetFieldNames() []string {
	if o == nil || o.FieldNames == nil {
		var ret []string
		return ret
	}
	return o.FieldNames
}

// GetFieldNamesOk returns a tuple with the FieldNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractionRuleAllOf) GetFieldNamesOk() ([]string, bool) {
	if o == nil || o.FieldNames == nil {
		return nil, false
	}
	return o.FieldNames, true
}

// HasFieldNames returns a boolean if a field has been set.
func (o *ExtractionRuleAllOf) HasFieldNames() bool {
	if o != nil && o.FieldNames != nil {
		return true
	}

	return false
}

// SetFieldNames gets a reference to the given []string and assigns it to the FieldNames field.
func (o *ExtractionRuleAllOf) SetFieldNames(v []string) {
	o.FieldNames = v
}

func (o ExtractionRuleAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.FieldNames != nil {
		toSerialize["fieldNames"] = o.FieldNames
	}
	return json.Marshal(toSerialize)
}

type NullableExtractionRuleAllOf struct {
	value *ExtractionRuleAllOf
	isSet bool
}

func (v NullableExtractionRuleAllOf) Get() *ExtractionRuleAllOf {
	return v.value
}

func (v *NullableExtractionRuleAllOf) Set(val *ExtractionRuleAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableExtractionRuleAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableExtractionRuleAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtractionRuleAllOf(val *ExtractionRuleAllOf) *NullableExtractionRuleAllOf {
	return &NullableExtractionRuleAllOf{value: val, isSet: true}
}

func (v NullableExtractionRuleAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtractionRuleAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


