/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunAs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunAs{}

// RunAs struct for RunAs
type RunAs struct {
	// The runAsId indicates the context in which monitors will run. If not provided, then it will run in the context of the monitor author.
	RunAsId string `json:"runAsId"`
}

type _RunAs RunAs

// NewRunAs instantiates a new RunAs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunAs(runAsId string) *RunAs {
	this := RunAs{}
	this.RunAsId = runAsId
	return &this
}

// NewRunAsWithDefaults instantiates a new RunAs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunAsWithDefaults() *RunAs {
	this := RunAs{}
	return &this
}

// GetRunAsId returns the RunAsId field value
func (o *RunAs) GetRunAsId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunAsId
}

// GetRunAsIdOk returns a tuple with the RunAsId field value
// and a boolean to check if the value has been set.
func (o *RunAs) GetRunAsIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunAsId, true
}

// SetRunAsId sets field value
func (o *RunAs) SetRunAsId(v string) {
	o.RunAsId = v
}

func (o RunAs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunAs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["runAsId"] = o.RunAsId
	return toSerialize, nil
}

func (o *RunAs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"runAsId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunAs := _RunAs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunAs)

	if err != nil {
		return err
	}

	*o = RunAs(varRunAs)

	return err
}

type NullableRunAs struct {
	value *RunAs
	isSet bool
}

func (v NullableRunAs) Get() *RunAs {
	return v.value
}

func (v *NullableRunAs) Set(val *RunAs) {
	v.value = val
	v.isSet = true
}

func (v NullableRunAs) IsSet() bool {
	return v.isSet
}

func (v *NullableRunAs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunAs(val *RunAs) *NullableRunAs {
	return &NullableRunAs{value: val, isSet: true}
}

func (v NullableRunAs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunAs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


