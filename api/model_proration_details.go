/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// ProrationDetails Details about the prorated credits and prorated cost in case of immediate monthly to monthly cycle upgrades.
type ProrationDetails struct {
	// Remaining days in the billing cycle for which the new plan is prorated.
	RemainingDays int32 `json:"remainingDays"`
	// Total prorated credits that get added to the bucket based on the remaining billing period.
	ProratedCredits int32 `json:"proratedCredits"`
	// Cost of the total prorated credits.
	ProratedCost float64 `json:"proratedCost"`
}

// NewProrationDetails instantiates a new ProrationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProrationDetails(remainingDays int32, proratedCredits int32, proratedCost float64) *ProrationDetails {
	this := ProrationDetails{}
	this.RemainingDays = remainingDays
	this.ProratedCredits = proratedCredits
	this.ProratedCost = proratedCost
	return &this
}

// NewProrationDetailsWithDefaults instantiates a new ProrationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProrationDetailsWithDefaults() *ProrationDetails {
	this := ProrationDetails{}
	return &this
}

// GetRemainingDays returns the RemainingDays field value
func (o *ProrationDetails) GetRemainingDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RemainingDays
}

// GetRemainingDaysOk returns a tuple with the RemainingDays field value
// and a boolean to check if the value has been set.
func (o *ProrationDetails) GetRemainingDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemainingDays, true
}

// SetRemainingDays sets field value
func (o *ProrationDetails) SetRemainingDays(v int32) {
	o.RemainingDays = v
}

// GetProratedCredits returns the ProratedCredits field value
func (o *ProrationDetails) GetProratedCredits() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProratedCredits
}

// GetProratedCreditsOk returns a tuple with the ProratedCredits field value
// and a boolean to check if the value has been set.
func (o *ProrationDetails) GetProratedCreditsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProratedCredits, true
}

// SetProratedCredits sets field value
func (o *ProrationDetails) SetProratedCredits(v int32) {
	o.ProratedCredits = v
}

// GetProratedCost returns the ProratedCost field value
func (o *ProrationDetails) GetProratedCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ProratedCost
}

// GetProratedCostOk returns a tuple with the ProratedCost field value
// and a boolean to check if the value has been set.
func (o *ProrationDetails) GetProratedCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProratedCost, true
}

// SetProratedCost sets field value
func (o *ProrationDetails) SetProratedCost(v float64) {
	o.ProratedCost = v
}

func (o ProrationDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["remainingDays"] = o.RemainingDays
	}
	if true {
		toSerialize["proratedCredits"] = o.ProratedCredits
	}
	if true {
		toSerialize["proratedCost"] = o.ProratedCost
	}
	return json.Marshal(toSerialize)
}

type NullableProrationDetails struct {
	value *ProrationDetails
	isSet bool
}

func (v NullableProrationDetails) Get() *ProrationDetails {
	return v.value
}

func (v *NullableProrationDetails) Set(val *ProrationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableProrationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableProrationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProrationDetails(val *ProrationDetails) *NullableProrationDetails {
	return &NullableProrationDetails{value: val, isSet: true}
}

func (v NullableProrationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProrationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


