/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParsersLibraryItemWithPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParsersLibraryItemWithPath{}

// ParsersLibraryItemWithPath struct for ParsersLibraryItemWithPath
type ParsersLibraryItemWithPath struct {
	Item ParsersLibraryBaseResponse `json:"item"`
	// Path of the folder or parser.
	Path string `json:"path"`
}

type _ParsersLibraryItemWithPath ParsersLibraryItemWithPath

// NewParsersLibraryItemWithPath instantiates a new ParsersLibraryItemWithPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParsersLibraryItemWithPath(item ParsersLibraryBaseResponse, path string) *ParsersLibraryItemWithPath {
	this := ParsersLibraryItemWithPath{}
	this.Item = item
	this.Path = path
	return &this
}

// NewParsersLibraryItemWithPathWithDefaults instantiates a new ParsersLibraryItemWithPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParsersLibraryItemWithPathWithDefaults() *ParsersLibraryItemWithPath {
	this := ParsersLibraryItemWithPath{}
	return &this
}

// GetItem returns the Item field value
func (o *ParsersLibraryItemWithPath) GetItem() ParsersLibraryBaseResponse {
	if o == nil {
		var ret ParsersLibraryBaseResponse
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *ParsersLibraryItemWithPath) GetItemOk() (*ParsersLibraryBaseResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *ParsersLibraryItemWithPath) SetItem(v ParsersLibraryBaseResponse) {
	o.Item = v
}

// GetPath returns the Path field value
func (o *ParsersLibraryItemWithPath) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ParsersLibraryItemWithPath) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ParsersLibraryItemWithPath) SetPath(v string) {
	o.Path = v
}

func (o ParsersLibraryItemWithPath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParsersLibraryItemWithPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["item"] = o.Item
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *ParsersLibraryItemWithPath) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"item",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParsersLibraryItemWithPath := _ParsersLibraryItemWithPath{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParsersLibraryItemWithPath)

	if err != nil {
		return err
	}

	*o = ParsersLibraryItemWithPath(varParsersLibraryItemWithPath)

	return err
}

type NullableParsersLibraryItemWithPath struct {
	value *ParsersLibraryItemWithPath
	isSet bool
}

func (v NullableParsersLibraryItemWithPath) Get() *ParsersLibraryItemWithPath {
	return v.value
}

func (v *NullableParsersLibraryItemWithPath) Set(val *ParsersLibraryItemWithPath) {
	v.value = val
	v.isSet = true
}

func (v NullableParsersLibraryItemWithPath) IsSet() bool {
	return v.isSet
}

func (v *NullableParsersLibraryItemWithPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParsersLibraryItemWithPath(val *ParsersLibraryItemWithPath) *NullableParsersLibraryItemWithPath {
	return &NullableParsersLibraryItemWithPath{value: val, isSet: true}
}

func (v NullableParsersLibraryItemWithPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParsersLibraryItemWithPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


