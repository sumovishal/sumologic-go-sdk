/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MonitorPlaybook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorPlaybook{}

// MonitorPlaybook The single monitor playbook.
type MonitorPlaybook struct {
	// The description of the monitor playbook.
	Description string `json:"description"`
	// The id of the playbook.
	PlaybookId string `json:"playbookId"`
	// The name of the playbook.
	Name string `json:"name"`
	// The version id of the playbook.
	VersionId string `json:"versionId"`
	// The type of the playbook.
	Type string `json:"type"`
}

type _MonitorPlaybook MonitorPlaybook

// NewMonitorPlaybook instantiates a new MonitorPlaybook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorPlaybook(description string, playbookId string, name string, versionId string, type_ string) *MonitorPlaybook {
	this := MonitorPlaybook{}
	this.Description = description
	this.PlaybookId = playbookId
	this.Name = name
	this.VersionId = versionId
	this.Type = type_
	return &this
}

// NewMonitorPlaybookWithDefaults instantiates a new MonitorPlaybook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorPlaybookWithDefaults() *MonitorPlaybook {
	this := MonitorPlaybook{}
	return &this
}

// GetDescription returns the Description field value
func (o *MonitorPlaybook) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *MonitorPlaybook) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *MonitorPlaybook) SetDescription(v string) {
	o.Description = v
}

// GetPlaybookId returns the PlaybookId field value
func (o *MonitorPlaybook) GetPlaybookId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlaybookId
}

// GetPlaybookIdOk returns a tuple with the PlaybookId field value
// and a boolean to check if the value has been set.
func (o *MonitorPlaybook) GetPlaybookIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlaybookId, true
}

// SetPlaybookId sets field value
func (o *MonitorPlaybook) SetPlaybookId(v string) {
	o.PlaybookId = v
}

// GetName returns the Name field value
func (o *MonitorPlaybook) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MonitorPlaybook) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MonitorPlaybook) SetName(v string) {
	o.Name = v
}

// GetVersionId returns the VersionId field value
func (o *MonitorPlaybook) GetVersionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value
// and a boolean to check if the value has been set.
func (o *MonitorPlaybook) GetVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionId, true
}

// SetVersionId sets field value
func (o *MonitorPlaybook) SetVersionId(v string) {
	o.VersionId = v
}

// GetType returns the Type field value
func (o *MonitorPlaybook) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MonitorPlaybook) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MonitorPlaybook) SetType(v string) {
	o.Type = v
}

func (o MonitorPlaybook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorPlaybook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["playbookId"] = o.PlaybookId
	toSerialize["name"] = o.Name
	toSerialize["versionId"] = o.VersionId
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *MonitorPlaybook) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"playbookId",
		"name",
		"versionId",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMonitorPlaybook := _MonitorPlaybook{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMonitorPlaybook)

	if err != nil {
		return err
	}

	*o = MonitorPlaybook(varMonitorPlaybook)

	return err
}

type NullableMonitorPlaybook struct {
	value *MonitorPlaybook
	isSet bool
}

func (v NullableMonitorPlaybook) Get() *MonitorPlaybook {
	return v.value
}

func (v *NullableMonitorPlaybook) Set(val *MonitorPlaybook) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorPlaybook) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorPlaybook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorPlaybook(val *MonitorPlaybook) *NullableMonitorPlaybook {
	return &NullableMonitorPlaybook{value: val, isSet: true}
}

func (v NullableMonitorPlaybook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorPlaybook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


