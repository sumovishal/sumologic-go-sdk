/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the LogSearchAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogSearchAllOf{}

// LogSearchAllOf struct for LogSearchAllOf
type LogSearchAllOf struct {
	// Identifier of the saved log search.
	Id string `json:"id"`
	// Identifier of the parent element in the content library, such as folder.
	ParentId *string `json:"parentId,omitempty"`
}

// NewLogSearchAllOf instantiates a new LogSearchAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogSearchAllOf(id string) *LogSearchAllOf {
	this := LogSearchAllOf{}
	this.Id = id
	return &this
}

// NewLogSearchAllOfWithDefaults instantiates a new LogSearchAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogSearchAllOfWithDefaults() *LogSearchAllOf {
	this := LogSearchAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *LogSearchAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogSearchAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogSearchAllOf) SetId(v string) {
	o.Id = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *LogSearchAllOf) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSearchAllOf) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *LogSearchAllOf) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *LogSearchAllOf) SetParentId(v string) {
	o.ParentId = &v
}

func (o LogSearchAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogSearchAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	return toSerialize, nil
}

type NullableLogSearchAllOf struct {
	value *LogSearchAllOf
	isSet bool
}

func (v NullableLogSearchAllOf) Get() *LogSearchAllOf {
	return v.value
}

func (v *NullableLogSearchAllOf) Set(val *LogSearchAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSearchAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSearchAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSearchAllOf(val *LogSearchAllOf) *NullableLogSearchAllOf {
	return &NullableLogSearchAllOf{value: val, isSet: true}
}

func (v NullableLogSearchAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSearchAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


