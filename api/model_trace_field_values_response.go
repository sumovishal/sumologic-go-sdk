/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TraceFieldValuesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceFieldValuesResponse{}

// TraceFieldValuesResponse struct for TraceFieldValuesResponse
type TraceFieldValuesResponse struct {
	// List of filter field values.
	FieldValues []string `json:"fieldValues"`
	// Total number of values for a field matching the query. Can be approximated when it's above 3000.
	TotalCount int64 `json:"totalCount"`
	// Next continuation token.
	Next *string `json:"next,omitempty"`
}

type _TraceFieldValuesResponse TraceFieldValuesResponse

// NewTraceFieldValuesResponse instantiates a new TraceFieldValuesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceFieldValuesResponse(fieldValues []string, totalCount int64) *TraceFieldValuesResponse {
	this := TraceFieldValuesResponse{}
	this.FieldValues = fieldValues
	this.TotalCount = totalCount
	return &this
}

// NewTraceFieldValuesResponseWithDefaults instantiates a new TraceFieldValuesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceFieldValuesResponseWithDefaults() *TraceFieldValuesResponse {
	this := TraceFieldValuesResponse{}
	return &this
}

// GetFieldValues returns the FieldValues field value
func (o *TraceFieldValuesResponse) GetFieldValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FieldValues
}

// GetFieldValuesOk returns a tuple with the FieldValues field value
// and a boolean to check if the value has been set.
func (o *TraceFieldValuesResponse) GetFieldValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldValues, true
}

// SetFieldValues sets field value
func (o *TraceFieldValuesResponse) SetFieldValues(v []string) {
	o.FieldValues = v
}

// GetTotalCount returns the TotalCount field value
func (o *TraceFieldValuesResponse) GetTotalCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *TraceFieldValuesResponse) GetTotalCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *TraceFieldValuesResponse) SetTotalCount(v int64) {
	o.TotalCount = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *TraceFieldValuesResponse) GetNext() string {
	if o == nil || IsNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceFieldValuesResponse) GetNextOk() (*string, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *TraceFieldValuesResponse) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *TraceFieldValuesResponse) SetNext(v string) {
	o.Next = &v
}

func (o TraceFieldValuesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceFieldValuesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fieldValues"] = o.FieldValues
	toSerialize["totalCount"] = o.TotalCount
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

func (o *TraceFieldValuesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fieldValues",
		"totalCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTraceFieldValuesResponse := _TraceFieldValuesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTraceFieldValuesResponse)

	if err != nil {
		return err
	}

	*o = TraceFieldValuesResponse(varTraceFieldValuesResponse)

	return err
}

type NullableTraceFieldValuesResponse struct {
	value *TraceFieldValuesResponse
	isSet bool
}

func (v NullableTraceFieldValuesResponse) Get() *TraceFieldValuesResponse {
	return v.value
}

func (v *NullableTraceFieldValuesResponse) Set(val *TraceFieldValuesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceFieldValuesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceFieldValuesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceFieldValuesResponse(val *TraceFieldValuesResponse) *NullableTraceFieldValuesResponse {
	return &NullableTraceFieldValuesResponse{value: val, isSet: true}
}

func (v NullableTraceFieldValuesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceFieldValuesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


