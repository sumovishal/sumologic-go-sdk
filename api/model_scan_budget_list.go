/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the ScanBudgetList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScanBudgetList{}

// ScanBudgetList struct for ScanBudgetList
type ScanBudgetList struct {
	// List of scan budgets.
	Data []ScanBudget `json:"data"`
}

// NewScanBudgetList instantiates a new ScanBudgetList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanBudgetList(data []ScanBudget) *ScanBudgetList {
	this := ScanBudgetList{}
	this.Data = data
	return &this
}

// NewScanBudgetListWithDefaults instantiates a new ScanBudgetList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanBudgetListWithDefaults() *ScanBudgetList {
	this := ScanBudgetList{}
	return &this
}

// GetData returns the Data field value
func (o *ScanBudgetList) GetData() []ScanBudget {
	if o == nil {
		var ret []ScanBudget
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ScanBudgetList) GetDataOk() ([]ScanBudget, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ScanBudgetList) SetData(v []ScanBudget) {
	o.Data = v
}

func (o ScanBudgetList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanBudgetList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableScanBudgetList struct {
	value *ScanBudgetList
	isSet bool
}

func (v NullableScanBudgetList) Get() *ScanBudgetList {
	return v.value
}

func (v *NullableScanBudgetList) Set(val *ScanBudgetList) {
	v.value = val
	v.isSet = true
}

func (v NullableScanBudgetList) IsSet() bool {
	return v.isSet
}

func (v *NullableScanBudgetList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanBudgetList(val *ScanBudgetList) *NullableScanBudgetList {
	return &NullableScanBudgetList{value: val, isSet: true}
}

func (v NullableScanBudgetList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanBudgetList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


