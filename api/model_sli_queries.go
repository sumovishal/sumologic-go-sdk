/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SliQueries type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SliQueries{}

// SliQueries struct for SliQueries
type SliQueries struct {
	QueryGroup SliQueryGroup `json:"queryGroup"`
	// Type of queries for SLI (Logs/Metrics).
	QueryType string `json:"queryType" validate:"regexp=^(Logs|Metrics)$"`
	// SLI evaluation type.
	EvaluationType *string `json:"evaluationType,omitempty" validate:"regexp=^(Window|Request|Monitor)$"`
	// Size of the SLI aggregation window (valid only for `Window` evaluation type).
	WindowSize *string `json:"windowSize,omitempty"`
}

type _SliQueries SliQueries

// NewSliQueries instantiates a new SliQueries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliQueries(queryGroup SliQueryGroup, queryType string) *SliQueries {
	this := SliQueries{}
	this.QueryGroup = queryGroup
	this.QueryType = queryType
	return &this
}

// NewSliQueriesWithDefaults instantiates a new SliQueries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliQueriesWithDefaults() *SliQueries {
	this := SliQueries{}
	return &this
}

// GetQueryGroup returns the QueryGroup field value
func (o *SliQueries) GetQueryGroup() SliQueryGroup {
	if o == nil {
		var ret SliQueryGroup
		return ret
	}

	return o.QueryGroup
}

// GetQueryGroupOk returns a tuple with the QueryGroup field value
// and a boolean to check if the value has been set.
func (o *SliQueries) GetQueryGroupOk() (*SliQueryGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryGroup, true
}

// SetQueryGroup sets field value
func (o *SliQueries) SetQueryGroup(v SliQueryGroup) {
	o.QueryGroup = v
}

// GetQueryType returns the QueryType field value
func (o *SliQueries) GetQueryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value
// and a boolean to check if the value has been set.
func (o *SliQueries) GetQueryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryType, true
}

// SetQueryType sets field value
func (o *SliQueries) SetQueryType(v string) {
	o.QueryType = v
}

// GetEvaluationType returns the EvaluationType field value if set, zero value otherwise.
func (o *SliQueries) GetEvaluationType() string {
	if o == nil || IsNil(o.EvaluationType) {
		var ret string
		return ret
	}
	return *o.EvaluationType
}

// GetEvaluationTypeOk returns a tuple with the EvaluationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliQueries) GetEvaluationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EvaluationType) {
		return nil, false
	}
	return o.EvaluationType, true
}

// HasEvaluationType returns a boolean if a field has been set.
func (o *SliQueries) HasEvaluationType() bool {
	if o != nil && !IsNil(o.EvaluationType) {
		return true
	}

	return false
}

// SetEvaluationType gets a reference to the given string and assigns it to the EvaluationType field.
func (o *SliQueries) SetEvaluationType(v string) {
	o.EvaluationType = &v
}

// GetWindowSize returns the WindowSize field value if set, zero value otherwise.
func (o *SliQueries) GetWindowSize() string {
	if o == nil || IsNil(o.WindowSize) {
		var ret string
		return ret
	}
	return *o.WindowSize
}

// GetWindowSizeOk returns a tuple with the WindowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SliQueries) GetWindowSizeOk() (*string, bool) {
	if o == nil || IsNil(o.WindowSize) {
		return nil, false
	}
	return o.WindowSize, true
}

// HasWindowSize returns a boolean if a field has been set.
func (o *SliQueries) HasWindowSize() bool {
	if o != nil && !IsNil(o.WindowSize) {
		return true
	}

	return false
}

// SetWindowSize gets a reference to the given string and assigns it to the WindowSize field.
func (o *SliQueries) SetWindowSize(v string) {
	o.WindowSize = &v
}

func (o SliQueries) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SliQueries) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queryGroup"] = o.QueryGroup
	toSerialize["queryType"] = o.QueryType
	if !IsNil(o.EvaluationType) {
		toSerialize["evaluationType"] = o.EvaluationType
	}
	if !IsNil(o.WindowSize) {
		toSerialize["windowSize"] = o.WindowSize
	}
	return toSerialize, nil
}

func (o *SliQueries) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queryGroup",
		"queryType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSliQueries := _SliQueries{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSliQueries)

	if err != nil {
		return err
	}

	*o = SliQueries(varSliQueries)

	return err
}

type NullableSliQueries struct {
	value *SliQueries
	isSet bool
}

func (v NullableSliQueries) Get() *SliQueries {
	return v.value
}

func (v *NullableSliQueries) Set(val *SliQueries) {
	v.value = val
	v.isSet = true
}

func (v NullableSliQueries) IsSet() bool {
	return v.isSet
}

func (v *NullableSliQueries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliQueries(val *SliQueries) *NullableSliQueries {
	return &NullableSliQueries{value: val, isSet: true}
}

func (v NullableSliQueries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliQueries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


