/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SliQueries struct for SliQueries
type SliQueries struct {
	QueryGroup SliQueryGroup `json:"queryGroup"`
	// Type of queries for SLI (Logs/Metrics).
	QueryType string `json:"queryType"`
}

// NewSliQueries instantiates a new SliQueries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliQueries(queryGroup SliQueryGroup, queryType string) *SliQueries {
	this := SliQueries{}
	this.QueryGroup = queryGroup
	this.QueryType = queryType
	return &this
}

// NewSliQueriesWithDefaults instantiates a new SliQueries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliQueriesWithDefaults() *SliQueries {
	this := SliQueries{}
	return &this
}

// GetQueryGroup returns the QueryGroup field value
func (o *SliQueries) GetQueryGroup() SliQueryGroup {
	if o == nil {
		var ret SliQueryGroup
		return ret
	}

	return o.QueryGroup
}

// GetQueryGroupOk returns a tuple with the QueryGroup field value
// and a boolean to check if the value has been set.
func (o *SliQueries) GetQueryGroupOk() (*SliQueryGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryGroup, true
}

// SetQueryGroup sets field value
func (o *SliQueries) SetQueryGroup(v SliQueryGroup) {
	o.QueryGroup = v
}

// GetQueryType returns the QueryType field value
func (o *SliQueries) GetQueryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value
// and a boolean to check if the value has been set.
func (o *SliQueries) GetQueryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryType, true
}

// SetQueryType sets field value
func (o *SliQueries) SetQueryType(v string) {
	o.QueryType = v
}

func (o SliQueries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["queryGroup"] = o.QueryGroup
	}
	if true {
		toSerialize["queryType"] = o.QueryType
	}
	return json.Marshal(toSerialize)
}

type NullableSliQueries struct {
	value *SliQueries
	isSet bool
}

func (v NullableSliQueries) Get() *SliQueries {
	return v.value
}

func (v *NullableSliQueries) Set(val *SliQueries) {
	v.value = val
	v.isSet = true
}

func (v NullableSliQueries) IsSet() bool {
	return v.isSet
}

func (v *NullableSliQueries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliQueries(val *SliQueries) *NullableSliQueries {
	return &NullableSliQueries{value: val, isSet: true}
}

func (v NullableSliQueries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliQueries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


