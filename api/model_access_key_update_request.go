/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the AccessKeyUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessKeyUpdateRequest{}

// AccessKeyUpdateRequest struct for AccessKeyUpdateRequest
type AccessKeyUpdateRequest struct {
	// Indicates whether the access key is disabled or not.
	Disabled bool `json:"disabled"`
	// An array of domains for which the access key is valid. Whether Sumo Logic accepts or rejects an API request depends on whether it contains an ORIGIN header and the entries in the allowlist. Sumo Logic will reject:   1. Requests with an ORIGIN header but the allowlist is empty.   2. Requests with an ORIGIN header that don't match any entry in the allowlist.
	CorsHeaders []string `json:"corsHeaders,omitempty"`
}

// NewAccessKeyUpdateRequest instantiates a new AccessKeyUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessKeyUpdateRequest(disabled bool) *AccessKeyUpdateRequest {
	this := AccessKeyUpdateRequest{}
	this.Disabled = disabled
	return &this
}

// NewAccessKeyUpdateRequestWithDefaults instantiates a new AccessKeyUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessKeyUpdateRequestWithDefaults() *AccessKeyUpdateRequest {
	this := AccessKeyUpdateRequest{}
	return &this
}

// GetDisabled returns the Disabled field value
func (o *AccessKeyUpdateRequest) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *AccessKeyUpdateRequest) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *AccessKeyUpdateRequest) SetDisabled(v bool) {
	o.Disabled = v
}

// GetCorsHeaders returns the CorsHeaders field value if set, zero value otherwise.
func (o *AccessKeyUpdateRequest) GetCorsHeaders() []string {
	if o == nil || IsNil(o.CorsHeaders) {
		var ret []string
		return ret
	}
	return o.CorsHeaders
}

// GetCorsHeadersOk returns a tuple with the CorsHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKeyUpdateRequest) GetCorsHeadersOk() ([]string, bool) {
	if o == nil || IsNil(o.CorsHeaders) {
		return nil, false
	}
	return o.CorsHeaders, true
}

// HasCorsHeaders returns a boolean if a field has been set.
func (o *AccessKeyUpdateRequest) HasCorsHeaders() bool {
	if o != nil && !IsNil(o.CorsHeaders) {
		return true
	}

	return false
}

// SetCorsHeaders gets a reference to the given []string and assigns it to the CorsHeaders field.
func (o *AccessKeyUpdateRequest) SetCorsHeaders(v []string) {
	o.CorsHeaders = v
}

func (o AccessKeyUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessKeyUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disabled"] = o.Disabled
	if !IsNil(o.CorsHeaders) {
		toSerialize["corsHeaders"] = o.CorsHeaders
	}
	return toSerialize, nil
}

type NullableAccessKeyUpdateRequest struct {
	value *AccessKeyUpdateRequest
	isSet bool
}

func (v NullableAccessKeyUpdateRequest) Get() *AccessKeyUpdateRequest {
	return v.value
}

func (v *NullableAccessKeyUpdateRequest) Set(val *AccessKeyUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessKeyUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessKeyUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessKeyUpdateRequest(val *AccessKeyUpdateRequest) *NullableAccessKeyUpdateRequest {
	return &NullableAccessKeyUpdateRequest{value: val, isSet: true}
}

func (v NullableAccessKeyUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessKeyUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


