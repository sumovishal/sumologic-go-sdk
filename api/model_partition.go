/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
)

// checks if the Partition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Partition{}

// Partition struct for Partition
type Partition struct {
	// The name of the partition.
	Name string `json:"name"`
	// The query that defines the data to be included in the partition.
	RoutingExpression string `json:"routingExpression"`
	// The Data Tier where the data in the partition will reside. Possible values are:               1. `continuous`               2. `frequent`               3. `infrequent` Note: The \"infrequent\" and \"frequent\" tiers are only available to Cloud Flex Credits Enterprise Suite accounts.
	AnalyticsTier *string `json:"analyticsTier,omitempty"`
	// The number of days to retain data in the partition, or -1 to use the default value for your account.  Only relevant if your account has variable retention enabled.
	RetentionPeriod *int32 `json:"retentionPeriod,omitempty"`
	// Whether the partition is compliant or not. Mark a partition as compliant if it contains data used for compliance or audit purpose. Retention for a compliant partition can only be increased and cannot be reduced after the partition is marked compliant. A partition once marked compliant, cannot be marked non-compliant later.
	IsCompliant *bool `json:"isCompliant,omitempty"`
	// If the retention period is scheduled to be updated in the future (i.e., if retention period is previously reduced with value of reduceRetentionPeriodImmediately as false), this property gives the future value of retention period while retentionPeriod gives the current value. retentionPeriod will take up the value of newRetentionPeriod after the scheduled time.
	NewRetentionPeriod *int32 `json:"newRetentionPeriod,omitempty"`
	// When the newRetentionPeriod will become effective in UTC format.
	RetentionEffectiveAt *time.Time `json:"retentionEffectiveAt,omitempty"`
	// Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
	CreatedAt time.Time `json:"createdAt"`
	// Identifier of the user who created the resource.
	CreatedBy string `json:"createdBy"`
	// Last modification timestamp in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// Identifier of the user who last modified the resource.
	ModifiedBy string `json:"modifiedBy"`
	// Unique identifier for the partition.
	Id string `json:"id"`
	// Size of data in partition in bytes.
	TotalBytes int64 `json:"totalBytes"`
	// This has the value `true` if the partition is active and `false` if it has been decommissioned.
	IsActive *bool `json:"isActive,omitempty"`
	// This has the value `DefaultIndex`, `AuditIndex`or `Partition` depending upon the type of partition.
	IndexType *string `json:"indexType,omitempty"`
	// Id of the data forwarding configuration to be used by the partition.
	DataForwardingId *string `json:"dataForwardingId,omitempty"`
}

// NewPartition instantiates a new Partition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartition(name string, routingExpression string, createdAt time.Time, createdBy string, modifiedAt time.Time, modifiedBy string, id string, totalBytes int64) *Partition {
	this := Partition{}
	this.Name = name
	this.RoutingExpression = routingExpression
	var retentionPeriod int32 = -1
	this.RetentionPeriod = &retentionPeriod
	var isCompliant bool = false
	this.IsCompliant = &isCompliant
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.Id = id
	this.TotalBytes = totalBytes
	return &this
}

// NewPartitionWithDefaults instantiates a new Partition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionWithDefaults() *Partition {
	this := Partition{}
	var retentionPeriod int32 = -1
	this.RetentionPeriod = &retentionPeriod
	var isCompliant bool = false
	this.IsCompliant = &isCompliant
	return &this
}

// GetName returns the Name field value
func (o *Partition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Partition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Partition) SetName(v string) {
	o.Name = v
}

// GetRoutingExpression returns the RoutingExpression field value
func (o *Partition) GetRoutingExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoutingExpression
}

// GetRoutingExpressionOk returns a tuple with the RoutingExpression field value
// and a boolean to check if the value has been set.
func (o *Partition) GetRoutingExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoutingExpression, true
}

// SetRoutingExpression sets field value
func (o *Partition) SetRoutingExpression(v string) {
	o.RoutingExpression = v
}

// GetAnalyticsTier returns the AnalyticsTier field value if set, zero value otherwise.
func (o *Partition) GetAnalyticsTier() string {
	if o == nil || IsNil(o.AnalyticsTier) {
		var ret string
		return ret
	}
	return *o.AnalyticsTier
}

// GetAnalyticsTierOk returns a tuple with the AnalyticsTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetAnalyticsTierOk() (*string, bool) {
	if o == nil || IsNil(o.AnalyticsTier) {
		return nil, false
	}
	return o.AnalyticsTier, true
}

// HasAnalyticsTier returns a boolean if a field has been set.
func (o *Partition) HasAnalyticsTier() bool {
	if o != nil && !IsNil(o.AnalyticsTier) {
		return true
	}

	return false
}

// SetAnalyticsTier gets a reference to the given string and assigns it to the AnalyticsTier field.
func (o *Partition) SetAnalyticsTier(v string) {
	o.AnalyticsTier = &v
}

// GetRetentionPeriod returns the RetentionPeriod field value if set, zero value otherwise.
func (o *Partition) GetRetentionPeriod() int32 {
	if o == nil || IsNil(o.RetentionPeriod) {
		var ret int32
		return ret
	}
	return *o.RetentionPeriod
}

// GetRetentionPeriodOk returns a tuple with the RetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetRetentionPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.RetentionPeriod) {
		return nil, false
	}
	return o.RetentionPeriod, true
}

// HasRetentionPeriod returns a boolean if a field has been set.
func (o *Partition) HasRetentionPeriod() bool {
	if o != nil && !IsNil(o.RetentionPeriod) {
		return true
	}

	return false
}

// SetRetentionPeriod gets a reference to the given int32 and assigns it to the RetentionPeriod field.
func (o *Partition) SetRetentionPeriod(v int32) {
	o.RetentionPeriod = &v
}

// GetIsCompliant returns the IsCompliant field value if set, zero value otherwise.
func (o *Partition) GetIsCompliant() bool {
	if o == nil || IsNil(o.IsCompliant) {
		var ret bool
		return ret
	}
	return *o.IsCompliant
}

// GetIsCompliantOk returns a tuple with the IsCompliant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetIsCompliantOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCompliant) {
		return nil, false
	}
	return o.IsCompliant, true
}

// HasIsCompliant returns a boolean if a field has been set.
func (o *Partition) HasIsCompliant() bool {
	if o != nil && !IsNil(o.IsCompliant) {
		return true
	}

	return false
}

// SetIsCompliant gets a reference to the given bool and assigns it to the IsCompliant field.
func (o *Partition) SetIsCompliant(v bool) {
	o.IsCompliant = &v
}

// GetNewRetentionPeriod returns the NewRetentionPeriod field value if set, zero value otherwise.
func (o *Partition) GetNewRetentionPeriod() int32 {
	if o == nil || IsNil(o.NewRetentionPeriod) {
		var ret int32
		return ret
	}
	return *o.NewRetentionPeriod
}

// GetNewRetentionPeriodOk returns a tuple with the NewRetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetNewRetentionPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.NewRetentionPeriod) {
		return nil, false
	}
	return o.NewRetentionPeriod, true
}

// HasNewRetentionPeriod returns a boolean if a field has been set.
func (o *Partition) HasNewRetentionPeriod() bool {
	if o != nil && !IsNil(o.NewRetentionPeriod) {
		return true
	}

	return false
}

// SetNewRetentionPeriod gets a reference to the given int32 and assigns it to the NewRetentionPeriod field.
func (o *Partition) SetNewRetentionPeriod(v int32) {
	o.NewRetentionPeriod = &v
}

// GetRetentionEffectiveAt returns the RetentionEffectiveAt field value if set, zero value otherwise.
func (o *Partition) GetRetentionEffectiveAt() time.Time {
	if o == nil || IsNil(o.RetentionEffectiveAt) {
		var ret time.Time
		return ret
	}
	return *o.RetentionEffectiveAt
}

// GetRetentionEffectiveAtOk returns a tuple with the RetentionEffectiveAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetRetentionEffectiveAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RetentionEffectiveAt) {
		return nil, false
	}
	return o.RetentionEffectiveAt, true
}

// HasRetentionEffectiveAt returns a boolean if a field has been set.
func (o *Partition) HasRetentionEffectiveAt() bool {
	if o != nil && !IsNil(o.RetentionEffectiveAt) {
		return true
	}

	return false
}

// SetRetentionEffectiveAt gets a reference to the given time.Time and assigns it to the RetentionEffectiveAt field.
func (o *Partition) SetRetentionEffectiveAt(v time.Time) {
	o.RetentionEffectiveAt = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Partition) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Partition) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Partition) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Partition) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Partition) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Partition) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *Partition) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *Partition) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *Partition) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Partition) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Partition) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Partition) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetId returns the Id field value
func (o *Partition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Partition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Partition) SetId(v string) {
	o.Id = v
}

// GetTotalBytes returns the TotalBytes field value
func (o *Partition) GetTotalBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalBytes
}

// GetTotalBytesOk returns a tuple with the TotalBytes field value
// and a boolean to check if the value has been set.
func (o *Partition) GetTotalBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalBytes, true
}

// SetTotalBytes sets field value
func (o *Partition) SetTotalBytes(v int64) {
	o.TotalBytes = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *Partition) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *Partition) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *Partition) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIndexType returns the IndexType field value if set, zero value otherwise.
func (o *Partition) GetIndexType() string {
	if o == nil || IsNil(o.IndexType) {
		var ret string
		return ret
	}
	return *o.IndexType
}

// GetIndexTypeOk returns a tuple with the IndexType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetIndexTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IndexType) {
		return nil, false
	}
	return o.IndexType, true
}

// HasIndexType returns a boolean if a field has been set.
func (o *Partition) HasIndexType() bool {
	if o != nil && !IsNil(o.IndexType) {
		return true
	}

	return false
}

// SetIndexType gets a reference to the given string and assigns it to the IndexType field.
func (o *Partition) SetIndexType(v string) {
	o.IndexType = &v
}

// GetDataForwardingId returns the DataForwardingId field value if set, zero value otherwise.
func (o *Partition) GetDataForwardingId() string {
	if o == nil || IsNil(o.DataForwardingId) {
		var ret string
		return ret
	}
	return *o.DataForwardingId
}

// GetDataForwardingIdOk returns a tuple with the DataForwardingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Partition) GetDataForwardingIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataForwardingId) {
		return nil, false
	}
	return o.DataForwardingId, true
}

// HasDataForwardingId returns a boolean if a field has been set.
func (o *Partition) HasDataForwardingId() bool {
	if o != nil && !IsNil(o.DataForwardingId) {
		return true
	}

	return false
}

// SetDataForwardingId gets a reference to the given string and assigns it to the DataForwardingId field.
func (o *Partition) SetDataForwardingId(v string) {
	o.DataForwardingId = &v
}

func (o Partition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Partition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["routingExpression"] = o.RoutingExpression
	if !IsNil(o.AnalyticsTier) {
		toSerialize["analyticsTier"] = o.AnalyticsTier
	}
	if !IsNil(o.RetentionPeriod) {
		toSerialize["retentionPeriod"] = o.RetentionPeriod
	}
	if !IsNil(o.IsCompliant) {
		toSerialize["isCompliant"] = o.IsCompliant
	}
	if !IsNil(o.NewRetentionPeriod) {
		toSerialize["newRetentionPeriod"] = o.NewRetentionPeriod
	}
	if !IsNil(o.RetentionEffectiveAt) {
		toSerialize["retentionEffectiveAt"] = o.RetentionEffectiveAt
	}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["modifiedAt"] = o.ModifiedAt
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["id"] = o.Id
	toSerialize["totalBytes"] = o.TotalBytes
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.IndexType) {
		toSerialize["indexType"] = o.IndexType
	}
	if !IsNil(o.DataForwardingId) {
		toSerialize["dataForwardingId"] = o.DataForwardingId
	}
	return toSerialize, nil
}

type NullablePartition struct {
	value *Partition
	isSet bool
}

func (v NullablePartition) Get() *Partition {
	return v.value
}

func (v *NullablePartition) Set(val *Partition) {
	v.value = val
	v.isSet = true
}

func (v NullablePartition) IsSet() bool {
	return v.isSet
}

func (v *NullablePartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartition(val *Partition) *NullablePartition {
	return &NullablePartition{value: val, isSet: true}
}

func (v NullablePartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


