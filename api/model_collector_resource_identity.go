/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CollectorResourceIdentity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectorResourceIdentity{}

// CollectorResourceIdentity struct for CollectorResourceIdentity
type CollectorResourceIdentity struct {
	ResourceIdentity
}

type _CollectorResourceIdentity CollectorResourceIdentity

// NewCollectorResourceIdentity instantiates a new CollectorResourceIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectorResourceIdentity(id string, type_ string) *CollectorResourceIdentity {
	this := CollectorResourceIdentity{}
	this.Id = id
	var name string = "Unknown"
	this.Name = &name
	this.Type = type_
	return &this
}

// NewCollectorResourceIdentityWithDefaults instantiates a new CollectorResourceIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectorResourceIdentityWithDefaults() *CollectorResourceIdentity {
	this := CollectorResourceIdentity{}
	return &this
}

func (o CollectorResourceIdentity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectorResourceIdentity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedResourceIdentity, errResourceIdentity := json.Marshal(o.ResourceIdentity)
	if errResourceIdentity != nil {
		return map[string]interface{}{}, errResourceIdentity
	}
	errResourceIdentity = json.Unmarshal([]byte(serializedResourceIdentity), &toSerialize)
	if errResourceIdentity != nil {
		return map[string]interface{}{}, errResourceIdentity
	}
	return toSerialize, nil
}

func (o *CollectorResourceIdentity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCollectorResourceIdentity := _CollectorResourceIdentity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCollectorResourceIdentity)

	if err != nil {
		return err
	}

	*o = CollectorResourceIdentity(varCollectorResourceIdentity)

	return err
}

type NullableCollectorResourceIdentity struct {
	value *CollectorResourceIdentity
	isSet bool
}

func (v NullableCollectorResourceIdentity) Get() *CollectorResourceIdentity {
	return v.value
}

func (v *NullableCollectorResourceIdentity) Set(val *CollectorResourceIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectorResourceIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectorResourceIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectorResourceIdentity(val *CollectorResourceIdentity) *NullableCollectorResourceIdentity {
	return &NullableCollectorResourceIdentity{value: val, isSet: true}
}

func (v NullableCollectorResourceIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectorResourceIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


