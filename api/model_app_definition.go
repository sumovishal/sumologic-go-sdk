/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the AppDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDefinition{}

// AppDefinition struct for AppDefinition
type AppDefinition struct {
	// Content identifier of the app in hexadecimal format.
	ContentId string `json:"contentId"`
	// Unique identifier for the app.
	Uuid string `json:"uuid"`
	// Name of the app.
	Name string `json:"name"`
	// Version of the app.
	AppVersion string `json:"appVersion"`
	// Indicates whether the app is in preview or not.
	Preview *bool `json:"preview,omitempty"`
	// Manifest version of the app
	ManifestVersion *string `json:"manifestVersion,omitempty"`
}

// NewAppDefinition instantiates a new AppDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDefinition(contentId string, uuid string, name string, appVersion string) *AppDefinition {
	this := AppDefinition{}
	this.ContentId = contentId
	this.Uuid = uuid
	this.Name = name
	this.AppVersion = appVersion
	return &this
}

// NewAppDefinitionWithDefaults instantiates a new AppDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDefinitionWithDefaults() *AppDefinition {
	this := AppDefinition{}
	return &this
}

// GetContentId returns the ContentId field value
func (o *AppDefinition) GetContentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentId
}

// GetContentIdOk returns a tuple with the ContentId field value
// and a boolean to check if the value has been set.
func (o *AppDefinition) GetContentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentId, true
}

// SetContentId sets field value
func (o *AppDefinition) SetContentId(v string) {
	o.ContentId = v
}

// GetUuid returns the Uuid field value
func (o *AppDefinition) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *AppDefinition) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *AppDefinition) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *AppDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppDefinition) SetName(v string) {
	o.Name = v
}

// GetAppVersion returns the AppVersion field value
func (o *AppDefinition) GetAppVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppVersion
}

// GetAppVersionOk returns a tuple with the AppVersion field value
// and a boolean to check if the value has been set.
func (o *AppDefinition) GetAppVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppVersion, true
}

// SetAppVersion sets field value
func (o *AppDefinition) SetAppVersion(v string) {
	o.AppVersion = v
}

// GetPreview returns the Preview field value if set, zero value otherwise.
func (o *AppDefinition) GetPreview() bool {
	if o == nil || IsNil(o.Preview) {
		var ret bool
		return ret
	}
	return *o.Preview
}

// GetPreviewOk returns a tuple with the Preview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDefinition) GetPreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.Preview) {
		return nil, false
	}
	return o.Preview, true
}

// HasPreview returns a boolean if a field has been set.
func (o *AppDefinition) HasPreview() bool {
	if o != nil && !IsNil(o.Preview) {
		return true
	}

	return false
}

// SetPreview gets a reference to the given bool and assigns it to the Preview field.
func (o *AppDefinition) SetPreview(v bool) {
	o.Preview = &v
}

// GetManifestVersion returns the ManifestVersion field value if set, zero value otherwise.
func (o *AppDefinition) GetManifestVersion() string {
	if o == nil || IsNil(o.ManifestVersion) {
		var ret string
		return ret
	}
	return *o.ManifestVersion
}

// GetManifestVersionOk returns a tuple with the ManifestVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDefinition) GetManifestVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ManifestVersion) {
		return nil, false
	}
	return o.ManifestVersion, true
}

// HasManifestVersion returns a boolean if a field has been set.
func (o *AppDefinition) HasManifestVersion() bool {
	if o != nil && !IsNil(o.ManifestVersion) {
		return true
	}

	return false
}

// SetManifestVersion gets a reference to the given string and assigns it to the ManifestVersion field.
func (o *AppDefinition) SetManifestVersion(v string) {
	o.ManifestVersion = &v
}

func (o AppDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contentId"] = o.ContentId
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	toSerialize["appVersion"] = o.AppVersion
	if !IsNil(o.Preview) {
		toSerialize["preview"] = o.Preview
	}
	if !IsNil(o.ManifestVersion) {
		toSerialize["manifestVersion"] = o.ManifestVersion
	}
	return toSerialize, nil
}

type NullableAppDefinition struct {
	value *AppDefinition
	isSet bool
}

func (v NullableAppDefinition) Get() *AppDefinition {
	return v.value
}

func (v *NullableAppDefinition) Set(val *AppDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDefinition(val *AppDefinition) *NullableAppDefinition {
	return &NullableAppDefinition{value: val, isSet: true}
}

func (v NullableAppDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


