/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the CSEWindowsSensorOfflineTracker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSEWindowsSensorOfflineTracker{}

// CSEWindowsSensorOfflineTracker struct for CSEWindowsSensorOfflineTracker
type CSEWindowsSensorOfflineTracker struct {
	TrackerIdentity
	// The number of minutes without heartbeat after which sensor is marked offline.
	MinutesWithNoHeartbeatBeforeMarkingOffline *string `json:"minutesWithNoHeartbeatBeforeMarkingOffline,omitempty"`
}

// NewCSEWindowsSensorOfflineTracker instantiates a new CSEWindowsSensorOfflineTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSEWindowsSensorOfflineTracker(trackerId string, error_ string, description string) *CSEWindowsSensorOfflineTracker {
	this := CSEWindowsSensorOfflineTracker{}
	this.TrackerId = trackerId
	this.Error = error_
	this.Description = description
	return &this
}

// NewCSEWindowsSensorOfflineTrackerWithDefaults instantiates a new CSEWindowsSensorOfflineTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSEWindowsSensorOfflineTrackerWithDefaults() *CSEWindowsSensorOfflineTracker {
	this := CSEWindowsSensorOfflineTracker{}
	return &this
}

// GetMinutesWithNoHeartbeatBeforeMarkingOffline returns the MinutesWithNoHeartbeatBeforeMarkingOffline field value if set, zero value otherwise.
func (o *CSEWindowsSensorOfflineTracker) GetMinutesWithNoHeartbeatBeforeMarkingOffline() string {
	if o == nil || IsNil(o.MinutesWithNoHeartbeatBeforeMarkingOffline) {
		var ret string
		return ret
	}
	return *o.MinutesWithNoHeartbeatBeforeMarkingOffline
}

// GetMinutesWithNoHeartbeatBeforeMarkingOfflineOk returns a tuple with the MinutesWithNoHeartbeatBeforeMarkingOffline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsSensorOfflineTracker) GetMinutesWithNoHeartbeatBeforeMarkingOfflineOk() (*string, bool) {
	if o == nil || IsNil(o.MinutesWithNoHeartbeatBeforeMarkingOffline) {
		return nil, false
	}
	return o.MinutesWithNoHeartbeatBeforeMarkingOffline, true
}

// HasMinutesWithNoHeartbeatBeforeMarkingOffline returns a boolean if a field has been set.
func (o *CSEWindowsSensorOfflineTracker) HasMinutesWithNoHeartbeatBeforeMarkingOffline() bool {
	if o != nil && !IsNil(o.MinutesWithNoHeartbeatBeforeMarkingOffline) {
		return true
	}

	return false
}

// SetMinutesWithNoHeartbeatBeforeMarkingOffline gets a reference to the given string and assigns it to the MinutesWithNoHeartbeatBeforeMarkingOffline field.
func (o *CSEWindowsSensorOfflineTracker) SetMinutesWithNoHeartbeatBeforeMarkingOffline(v string) {
	o.MinutesWithNoHeartbeatBeforeMarkingOffline = &v
}

func (o CSEWindowsSensorOfflineTracker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSEWindowsSensorOfflineTracker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTrackerIdentity, errTrackerIdentity := json.Marshal(o.TrackerIdentity)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	errTrackerIdentity = json.Unmarshal([]byte(serializedTrackerIdentity), &toSerialize)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	if !IsNil(o.MinutesWithNoHeartbeatBeforeMarkingOffline) {
		toSerialize["minutesWithNoHeartbeatBeforeMarkingOffline"] = o.MinutesWithNoHeartbeatBeforeMarkingOffline
	}
	return toSerialize, nil
}

type NullableCSEWindowsSensorOfflineTracker struct {
	value *CSEWindowsSensorOfflineTracker
	isSet bool
}

func (v NullableCSEWindowsSensorOfflineTracker) Get() *CSEWindowsSensorOfflineTracker {
	return v.value
}

func (v *NullableCSEWindowsSensorOfflineTracker) Set(val *CSEWindowsSensorOfflineTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableCSEWindowsSensorOfflineTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableCSEWindowsSensorOfflineTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSEWindowsSensorOfflineTracker(val *CSEWindowsSensorOfflineTracker) *NullableCSEWindowsSensorOfflineTracker {
	return &NullableCSEWindowsSensorOfflineTracker{value: val, isSet: true}
}

func (v NullableCSEWindowsSensorOfflineTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSEWindowsSensorOfflineTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


