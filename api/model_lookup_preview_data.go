/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// LookupPreviewData The preview data of the lookup table.
type LookupPreviewData struct {
	// The field properties of the lookup table. This includes the field name, field description, and an identifier associated with each field.
	FieldProperties []PreviewLookupTableField `json:"fieldProperties,omitempty"`
	// The data of the lookup table as a list of field identifiers mapped to their values.
	FieldValueMapList []map[string]string `json:"fieldValueMapList,omitempty"`
}

// NewLookupPreviewData instantiates a new LookupPreviewData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLookupPreviewData() *LookupPreviewData {
	this := LookupPreviewData{}
	return &this
}

// NewLookupPreviewDataWithDefaults instantiates a new LookupPreviewData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLookupPreviewDataWithDefaults() *LookupPreviewData {
	this := LookupPreviewData{}
	return &this
}

// GetFieldProperties returns the FieldProperties field value if set, zero value otherwise.
func (o *LookupPreviewData) GetFieldProperties() []PreviewLookupTableField {
	if o == nil || o.FieldProperties == nil {
		var ret []PreviewLookupTableField
		return ret
	}
	return o.FieldProperties
}

// GetFieldPropertiesOk returns a tuple with the FieldProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupPreviewData) GetFieldPropertiesOk() ([]PreviewLookupTableField, bool) {
	if o == nil || o.FieldProperties == nil {
		return nil, false
	}
	return o.FieldProperties, true
}

// HasFieldProperties returns a boolean if a field has been set.
func (o *LookupPreviewData) HasFieldProperties() bool {
	if o != nil && o.FieldProperties != nil {
		return true
	}

	return false
}

// SetFieldProperties gets a reference to the given []PreviewLookupTableField and assigns it to the FieldProperties field.
func (o *LookupPreviewData) SetFieldProperties(v []PreviewLookupTableField) {
	o.FieldProperties = v
}

// GetFieldValueMapList returns the FieldValueMapList field value if set, zero value otherwise.
func (o *LookupPreviewData) GetFieldValueMapList() []map[string]string {
	if o == nil || o.FieldValueMapList == nil {
		var ret []map[string]string
		return ret
	}
	return o.FieldValueMapList
}

// GetFieldValueMapListOk returns a tuple with the FieldValueMapList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupPreviewData) GetFieldValueMapListOk() ([]map[string]string, bool) {
	if o == nil || o.FieldValueMapList == nil {
		return nil, false
	}
	return o.FieldValueMapList, true
}

// HasFieldValueMapList returns a boolean if a field has been set.
func (o *LookupPreviewData) HasFieldValueMapList() bool {
	if o != nil && o.FieldValueMapList != nil {
		return true
	}

	return false
}

// SetFieldValueMapList gets a reference to the given []map[string]string and assigns it to the FieldValueMapList field.
func (o *LookupPreviewData) SetFieldValueMapList(v []map[string]string) {
	o.FieldValueMapList = v
}

func (o LookupPreviewData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldProperties != nil {
		toSerialize["fieldProperties"] = o.FieldProperties
	}
	if o.FieldValueMapList != nil {
		toSerialize["fieldValueMapList"] = o.FieldValueMapList
	}
	return json.Marshal(toSerialize)
}

type NullableLookupPreviewData struct {
	value *LookupPreviewData
	isSet bool
}

func (v NullableLookupPreviewData) Get() *LookupPreviewData {
	return v.value
}

func (v *NullableLookupPreviewData) Set(val *LookupPreviewData) {
	v.value = val
	v.isSet = true
}

func (v NullableLookupPreviewData) IsSet() bool {
	return v.isSet
}

func (v *NullableLookupPreviewData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookupPreviewData(val *LookupPreviewData) *NullableLookupPreviewData {
	return &NullableLookupPreviewData{value: val, isSet: true}
}

func (v NullableLookupPreviewData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookupPreviewData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


