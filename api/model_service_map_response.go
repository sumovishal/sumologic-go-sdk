/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServiceMapResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceMapResponse{}

// ServiceMapResponse struct for ServiceMapResponse
type ServiceMapResponse struct {
	// List of service map nodes.
	Nodes []ServiceMapNode `json:"nodes"`
	// List of service map edges.
	Edges []ServiceMapEdge `json:"edges"`
}

type _ServiceMapResponse ServiceMapResponse

// NewServiceMapResponse instantiates a new ServiceMapResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceMapResponse(nodes []ServiceMapNode, edges []ServiceMapEdge) *ServiceMapResponse {
	this := ServiceMapResponse{}
	this.Nodes = nodes
	this.Edges = edges
	return &this
}

// NewServiceMapResponseWithDefaults instantiates a new ServiceMapResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceMapResponseWithDefaults() *ServiceMapResponse {
	this := ServiceMapResponse{}
	return &this
}

// GetNodes returns the Nodes field value
func (o *ServiceMapResponse) GetNodes() []ServiceMapNode {
	if o == nil {
		var ret []ServiceMapNode
		return ret
	}

	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value
// and a boolean to check if the value has been set.
func (o *ServiceMapResponse) GetNodesOk() ([]ServiceMapNode, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nodes, true
}

// SetNodes sets field value
func (o *ServiceMapResponse) SetNodes(v []ServiceMapNode) {
	o.Nodes = v
}

// GetEdges returns the Edges field value
func (o *ServiceMapResponse) GetEdges() []ServiceMapEdge {
	if o == nil {
		var ret []ServiceMapEdge
		return ret
	}

	return o.Edges
}

// GetEdgesOk returns a tuple with the Edges field value
// and a boolean to check if the value has been set.
func (o *ServiceMapResponse) GetEdgesOk() ([]ServiceMapEdge, bool) {
	if o == nil {
		return nil, false
	}
	return o.Edges, true
}

// SetEdges sets field value
func (o *ServiceMapResponse) SetEdges(v []ServiceMapEdge) {
	o.Edges = v
}

func (o ServiceMapResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceMapResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodes"] = o.Nodes
	toSerialize["edges"] = o.Edges
	return toSerialize, nil
}

func (o *ServiceMapResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodes",
		"edges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceMapResponse := _ServiceMapResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceMapResponse)

	if err != nil {
		return err
	}

	*o = ServiceMapResponse(varServiceMapResponse)

	return err
}

type NullableServiceMapResponse struct {
	value *ServiceMapResponse
	isSet bool
}

func (v NullableServiceMapResponse) Get() *ServiceMapResponse {
	return v.value
}

func (v *NullableServiceMapResponse) Set(val *ServiceMapResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceMapResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceMapResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceMapResponse(val *ServiceMapResponse) *NullableServiceMapResponse {
	return &NullableServiceMapResponse{value: val, isSet: true}
}

func (v NullableServiceMapResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceMapResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


