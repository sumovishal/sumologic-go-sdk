/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ServiceMapNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceMapNode{}

// ServiceMapNode struct for ServiceMapNode
type ServiceMapNode struct {
	// Name of a service in a service map.
	ServiceName string `json:"serviceName"`
	// Color hex code assigned to the service.
	ServiceColor *string `json:"serviceColor,omitempty"`
	// The last time in UTC a service has been seen. Formatted as defined by date-time - RFC3339.
	LastSeenAt time.Time `json:"lastSeenAt"`
	// Indicates whether node comes from inferred remote service or instrumented one.
	IsRemote bool `json:"isRemote"`
	// Defines type of service.
	ServiceType string `json:"serviceType" validate:"regexp=^(Db|HTTP|MQ|Web|Mixed|Unknown|Cpp|DotNET|Erlang|Go|Java|NodeJS|Php|Python|Ruby|WebJS|Swift|MSSQL|MySQL|Oracle|Db2|PostgreSQL|Redshift|Hive|Cloudscape|HSQLDB|Progress|MaxDB|HANADB|Ingres|FirstSQL|EnterpriseDB|Cache|Adabas|Firebird|ApacheDerby|FileMaker|Informix|InstantDB|InterBase|MariaDB|Netezza|PervasivePSQL|PointBase|SQLite|Sybase|Teradata|Vertica|H2|ColdFusion|Cassandra|HBase|MongoDB|Redis|Couchbase|CouchDB|CosmosDB|DynamoDB|Neo4j|Geode|Elasticsearch|Memcached|CockroachDB|RPC|gRPC|JavaRMI|DotNETWCF|ApacheDubbo)$"`
}

type _ServiceMapNode ServiceMapNode

// NewServiceMapNode instantiates a new ServiceMapNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceMapNode(serviceName string, lastSeenAt time.Time, isRemote bool, serviceType string) *ServiceMapNode {
	this := ServiceMapNode{}
	this.ServiceName = serviceName
	this.LastSeenAt = lastSeenAt
	this.IsRemote = isRemote
	this.ServiceType = serviceType
	return &this
}

// NewServiceMapNodeWithDefaults instantiates a new ServiceMapNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceMapNodeWithDefaults() *ServiceMapNode {
	this := ServiceMapNode{}
	return &this
}

// GetServiceName returns the ServiceName field value
func (o *ServiceMapNode) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *ServiceMapNode) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *ServiceMapNode) SetServiceName(v string) {
	o.ServiceName = v
}

// GetServiceColor returns the ServiceColor field value if set, zero value otherwise.
func (o *ServiceMapNode) GetServiceColor() string {
	if o == nil || IsNil(o.ServiceColor) {
		var ret string
		return ret
	}
	return *o.ServiceColor
}

// GetServiceColorOk returns a tuple with the ServiceColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceMapNode) GetServiceColorOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceColor) {
		return nil, false
	}
	return o.ServiceColor, true
}

// HasServiceColor returns a boolean if a field has been set.
func (o *ServiceMapNode) HasServiceColor() bool {
	if o != nil && !IsNil(o.ServiceColor) {
		return true
	}

	return false
}

// SetServiceColor gets a reference to the given string and assigns it to the ServiceColor field.
func (o *ServiceMapNode) SetServiceColor(v string) {
	o.ServiceColor = &v
}

// GetLastSeenAt returns the LastSeenAt field value
func (o *ServiceMapNode) GetLastSeenAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastSeenAt
}

// GetLastSeenAtOk returns a tuple with the LastSeenAt field value
// and a boolean to check if the value has been set.
func (o *ServiceMapNode) GetLastSeenAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeenAt, true
}

// SetLastSeenAt sets field value
func (o *ServiceMapNode) SetLastSeenAt(v time.Time) {
	o.LastSeenAt = v
}

// GetIsRemote returns the IsRemote field value
func (o *ServiceMapNode) GetIsRemote() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRemote
}

// GetIsRemoteOk returns a tuple with the IsRemote field value
// and a boolean to check if the value has been set.
func (o *ServiceMapNode) GetIsRemoteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRemote, true
}

// SetIsRemote sets field value
func (o *ServiceMapNode) SetIsRemote(v bool) {
	o.IsRemote = v
}

// GetServiceType returns the ServiceType field value
func (o *ServiceMapNode) GetServiceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *ServiceMapNode) GetServiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *ServiceMapNode) SetServiceType(v string) {
	o.ServiceType = v
}

func (o ServiceMapNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceMapNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serviceName"] = o.ServiceName
	if !IsNil(o.ServiceColor) {
		toSerialize["serviceColor"] = o.ServiceColor
	}
	toSerialize["lastSeenAt"] = o.LastSeenAt
	toSerialize["isRemote"] = o.IsRemote
	toSerialize["serviceType"] = o.ServiceType
	return toSerialize, nil
}

func (o *ServiceMapNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serviceName",
		"lastSeenAt",
		"isRemote",
		"serviceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceMapNode := _ServiceMapNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceMapNode)

	if err != nil {
		return err
	}

	*o = ServiceMapNode(varServiceMapNode)

	return err
}

type NullableServiceMapNode struct {
	value *ServiceMapNode
	isSet bool
}

func (v NullableServiceMapNode) Get() *ServiceMapNode {
	return v.value
}

func (v *NullableServiceMapNode) Set(val *ServiceMapNode) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceMapNode) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceMapNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceMapNode(val *ServiceMapNode) *NullableServiceMapNode {
	return &NullableServiceMapNode{value: val, isSet: true}
}

func (v NullableServiceMapNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceMapNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


