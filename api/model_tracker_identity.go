/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TrackerIdentity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackerIdentity{}

// TrackerIdentity struct for TrackerIdentity
type TrackerIdentity struct {
	// Name that uniquely identifies the health event. It focuses on what happened rather than why.
	TrackerId string `json:"trackerId"`
	// Description of the underlying reason for the event change.
	Error string `json:"error"`
	// A more elaborate description of why the event occurred.
	Description string `json:"description"`
}

type _TrackerIdentity TrackerIdentity

// NewTrackerIdentity instantiates a new TrackerIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackerIdentity(trackerId string, error_ string, description string) *TrackerIdentity {
	this := TrackerIdentity{}
	this.TrackerId = trackerId
	this.Error = error_
	this.Description = description
	return &this
}

// NewTrackerIdentityWithDefaults instantiates a new TrackerIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackerIdentityWithDefaults() *TrackerIdentity {
	this := TrackerIdentity{}
	return &this
}

// GetTrackerId returns the TrackerId field value
func (o *TrackerIdentity) GetTrackerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrackerId
}

// GetTrackerIdOk returns a tuple with the TrackerId field value
// and a boolean to check if the value has been set.
func (o *TrackerIdentity) GetTrackerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackerId, true
}

// SetTrackerId sets field value
func (o *TrackerIdentity) SetTrackerId(v string) {
	o.TrackerId = v
}

// GetError returns the Error field value
func (o *TrackerIdentity) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *TrackerIdentity) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *TrackerIdentity) SetError(v string) {
	o.Error = v
}

// GetDescription returns the Description field value
func (o *TrackerIdentity) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TrackerIdentity) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TrackerIdentity) SetDescription(v string) {
	o.Description = v
}

func (o TrackerIdentity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackerIdentity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trackerId"] = o.TrackerId
	toSerialize["error"] = o.Error
	toSerialize["description"] = o.Description
	return toSerialize, nil
}

func (o *TrackerIdentity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trackerId",
		"error",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrackerIdentity := _TrackerIdentity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrackerIdentity)

	if err != nil {
		return err
	}

	*o = TrackerIdentity(varTrackerIdentity)

	return err
}

type NullableTrackerIdentity struct {
	value *TrackerIdentity
	isSet bool
}

func (v NullableTrackerIdentity) Get() *TrackerIdentity {
	return v.value
}

func (v *NullableTrackerIdentity) Set(val *TrackerIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackerIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackerIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackerIdentity(val *TrackerIdentity) *NullableTrackerIdentity {
	return &NullableTrackerIdentity{value: val, isSet: true}
}

func (v NullableTrackerIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackerIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


