/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CalendarCompliance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalendarCompliance{}

// CalendarCompliance struct for CalendarCompliance
type CalendarCompliance struct {
	Compliance
	// Type of Calendar Window (week/month/quarter).
	WindowType string `json:"windowType" validate:"regexp=^(Week|Month|Quarter)$"`
	// Start of the calendar window. For week, it would be the day of the week (for e.g Sunday, Monday etc). For month, it will always be the first day of the month (therefore not required to specify for monthly compliance). For quarter, it would be the first month of the quarter (for e.g January, February etc.)
	StartFrom *string `json:"startFrom,omitempty"`
}

type _CalendarCompliance CalendarCompliance

// NewCalendarCompliance instantiates a new CalendarCompliance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarCompliance(windowType string, complianceType string, target float32, timezone string) *CalendarCompliance {
	this := CalendarCompliance{}
	this.ComplianceType = complianceType
	this.Target = target
	this.Timezone = timezone
	this.WindowType = windowType
	return &this
}

// NewCalendarComplianceWithDefaults instantiates a new CalendarCompliance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarComplianceWithDefaults() *CalendarCompliance {
	this := CalendarCompliance{}
	return &this
}

// GetWindowType returns the WindowType field value
func (o *CalendarCompliance) GetWindowType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WindowType
}

// GetWindowTypeOk returns a tuple with the WindowType field value
// and a boolean to check if the value has been set.
func (o *CalendarCompliance) GetWindowTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WindowType, true
}

// SetWindowType sets field value
func (o *CalendarCompliance) SetWindowType(v string) {
	o.WindowType = v
}

// GetStartFrom returns the StartFrom field value if set, zero value otherwise.
func (o *CalendarCompliance) GetStartFrom() string {
	if o == nil || IsNil(o.StartFrom) {
		var ret string
		return ret
	}
	return *o.StartFrom
}

// GetStartFromOk returns a tuple with the StartFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarCompliance) GetStartFromOk() (*string, bool) {
	if o == nil || IsNil(o.StartFrom) {
		return nil, false
	}
	return o.StartFrom, true
}

// HasStartFrom returns a boolean if a field has been set.
func (o *CalendarCompliance) HasStartFrom() bool {
	if o != nil && !IsNil(o.StartFrom) {
		return true
	}

	return false
}

// SetStartFrom gets a reference to the given string and assigns it to the StartFrom field.
func (o *CalendarCompliance) SetStartFrom(v string) {
	o.StartFrom = &v
}

func (o CalendarCompliance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalendarCompliance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCompliance, errCompliance := json.Marshal(o.Compliance)
	if errCompliance != nil {
		return map[string]interface{}{}, errCompliance
	}
	errCompliance = json.Unmarshal([]byte(serializedCompliance), &toSerialize)
	if errCompliance != nil {
		return map[string]interface{}{}, errCompliance
	}
	toSerialize["windowType"] = o.WindowType
	if !IsNil(o.StartFrom) {
		toSerialize["startFrom"] = o.StartFrom
	}
	return toSerialize, nil
}

func (o *CalendarCompliance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"windowType",
		"complianceType",
		"target",
		"timezone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCalendarCompliance := _CalendarCompliance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCalendarCompliance)

	if err != nil {
		return err
	}

	*o = CalendarCompliance(varCalendarCompliance)

	return err
}

type NullableCalendarCompliance struct {
	value *CalendarCompliance
	isSet bool
}

func (v NullableCalendarCompliance) Get() *CalendarCompliance {
	return v.value
}

func (v *NullableCalendarCompliance) Set(val *CalendarCompliance) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarCompliance) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarCompliance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarCompliance(val *CalendarCompliance) *NullableCalendarCompliance {
	return &NullableCalendarCompliance{value: val, isSet: true}
}

func (v NullableCalendarCompliance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarCompliance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


