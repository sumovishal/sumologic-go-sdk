/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParsersLibraryBaseUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParsersLibraryBaseUpdate{}

// ParsersLibraryBaseUpdate struct for ParsersLibraryBaseUpdate
type ParsersLibraryBaseUpdate struct {
	// Name of the folder or parser.
	Name string `json:"name"`
	// Description of the folder or parser.
	Description string `json:"description"`
	// Version of the folder or parser.
	Version int64 `json:"version"`
	// Type of the object model.
	Type *string `json:"type,omitempty"`
}

type _ParsersLibraryBaseUpdate ParsersLibraryBaseUpdate

// NewParsersLibraryBaseUpdate instantiates a new ParsersLibraryBaseUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParsersLibraryBaseUpdate(name string, description string, version int64) *ParsersLibraryBaseUpdate {
	this := ParsersLibraryBaseUpdate{}
	this.Name = name
	this.Description = description
	this.Version = version
	return &this
}

// NewParsersLibraryBaseUpdateWithDefaults instantiates a new ParsersLibraryBaseUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParsersLibraryBaseUpdateWithDefaults() *ParsersLibraryBaseUpdate {
	this := ParsersLibraryBaseUpdate{}
	return &this
}

// GetName returns the Name field value
func (o *ParsersLibraryBaseUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ParsersLibraryBaseUpdate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ParsersLibraryBaseUpdate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *ParsersLibraryBaseUpdate) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ParsersLibraryBaseUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ParsersLibraryBaseUpdate) SetDescription(v string) {
	o.Description = v
}

// GetVersion returns the Version field value
func (o *ParsersLibraryBaseUpdate) GetVersion() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ParsersLibraryBaseUpdate) GetVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ParsersLibraryBaseUpdate) SetVersion(v int64) {
	o.Version = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ParsersLibraryBaseUpdate) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParsersLibraryBaseUpdate) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ParsersLibraryBaseUpdate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ParsersLibraryBaseUpdate) SetType(v string) {
	o.Type = &v
}

func (o ParsersLibraryBaseUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParsersLibraryBaseUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["version"] = o.Version
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *ParsersLibraryBaseUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParsersLibraryBaseUpdate := _ParsersLibraryBaseUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParsersLibraryBaseUpdate)

	if err != nil {
		return err
	}

	*o = ParsersLibraryBaseUpdate(varParsersLibraryBaseUpdate)

	return err
}

type NullableParsersLibraryBaseUpdate struct {
	value *ParsersLibraryBaseUpdate
	isSet bool
}

func (v NullableParsersLibraryBaseUpdate) Get() *ParsersLibraryBaseUpdate {
	return v.value
}

func (v *NullableParsersLibraryBaseUpdate) Set(val *ParsersLibraryBaseUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableParsersLibraryBaseUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableParsersLibraryBaseUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParsersLibraryBaseUpdate(val *ParsersLibraryBaseUpdate) *NullableParsersLibraryBaseUpdate {
	return &NullableParsersLibraryBaseUpdate{value: val, isSet: true}
}

func (v NullableParsersLibraryBaseUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParsersLibraryBaseUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


