/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the TraceDbSpanInfoAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceDbSpanInfoAllOf{}

// TraceDbSpanInfoAllOf struct for TraceDbSpanInfoAllOf
type TraceDbSpanInfoAllOf struct {
	// Database type.
	DbType *string `json:"dbType,omitempty"`
	// Database instance name, e.g. in java, if jdbc.url=\"jdbc:mysql://127.0.0.1:3306/customers\", the instance name is \"customers\".
	Instance *string `json:"instance,omitempty"`
	// Database statement for the given database type.
	Statement *string `json:"statement,omitempty"`
}

// NewTraceDbSpanInfoAllOf instantiates a new TraceDbSpanInfoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceDbSpanInfoAllOf() *TraceDbSpanInfoAllOf {
	this := TraceDbSpanInfoAllOf{}
	return &this
}

// NewTraceDbSpanInfoAllOfWithDefaults instantiates a new TraceDbSpanInfoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceDbSpanInfoAllOfWithDefaults() *TraceDbSpanInfoAllOf {
	this := TraceDbSpanInfoAllOf{}
	return &this
}

// GetDbType returns the DbType field value if set, zero value otherwise.
func (o *TraceDbSpanInfoAllOf) GetDbType() string {
	if o == nil || IsNil(o.DbType) {
		var ret string
		return ret
	}
	return *o.DbType
}

// GetDbTypeOk returns a tuple with the DbType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceDbSpanInfoAllOf) GetDbTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DbType) {
		return nil, false
	}
	return o.DbType, true
}

// HasDbType returns a boolean if a field has been set.
func (o *TraceDbSpanInfoAllOf) HasDbType() bool {
	if o != nil && !IsNil(o.DbType) {
		return true
	}

	return false
}

// SetDbType gets a reference to the given string and assigns it to the DbType field.
func (o *TraceDbSpanInfoAllOf) SetDbType(v string) {
	o.DbType = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *TraceDbSpanInfoAllOf) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceDbSpanInfoAllOf) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *TraceDbSpanInfoAllOf) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *TraceDbSpanInfoAllOf) SetInstance(v string) {
	o.Instance = &v
}

// GetStatement returns the Statement field value if set, zero value otherwise.
func (o *TraceDbSpanInfoAllOf) GetStatement() string {
	if o == nil || IsNil(o.Statement) {
		var ret string
		return ret
	}
	return *o.Statement
}

// GetStatementOk returns a tuple with the Statement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceDbSpanInfoAllOf) GetStatementOk() (*string, bool) {
	if o == nil || IsNil(o.Statement) {
		return nil, false
	}
	return o.Statement, true
}

// HasStatement returns a boolean if a field has been set.
func (o *TraceDbSpanInfoAllOf) HasStatement() bool {
	if o != nil && !IsNil(o.Statement) {
		return true
	}

	return false
}

// SetStatement gets a reference to the given string and assigns it to the Statement field.
func (o *TraceDbSpanInfoAllOf) SetStatement(v string) {
	o.Statement = &v
}

func (o TraceDbSpanInfoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceDbSpanInfoAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DbType) {
		toSerialize["dbType"] = o.DbType
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.Statement) {
		toSerialize["statement"] = o.Statement
	}
	return toSerialize, nil
}

type NullableTraceDbSpanInfoAllOf struct {
	value *TraceDbSpanInfoAllOf
	isSet bool
}

func (v NullableTraceDbSpanInfoAllOf) Get() *TraceDbSpanInfoAllOf {
	return v.value
}

func (v *NullableTraceDbSpanInfoAllOf) Set(val *TraceDbSpanInfoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceDbSpanInfoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceDbSpanInfoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceDbSpanInfoAllOf(val *TraceDbSpanInfoAllOf) *NullableTraceDbSpanInfoAllOf {
	return &NullableTraceDbSpanInfoAllOf{value: val, isSet: true}
}

func (v NullableTraceDbSpanInfoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceDbSpanInfoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


