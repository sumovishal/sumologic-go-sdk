/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// AddOrReplaceTransformation struct for AddOrReplaceTransformation
type AddOrReplaceTransformation struct {
	DimensionTransformation
	// The dimension that needs to be modified or added.
	DimensionToReplace string `json:"dimensionToReplace"`
	// The value for the dimension.
	Value string `json:"value"`
}

// NewAddOrReplaceTransformation instantiates a new AddOrReplaceTransformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOrReplaceTransformation(dimensionToReplace string, value string, transformationType string) *AddOrReplaceTransformation {
	this := AddOrReplaceTransformation{}
	this.TransformationType = transformationType
	this.DimensionToReplace = dimensionToReplace
	this.Value = value
	return &this
}

// NewAddOrReplaceTransformationWithDefaults instantiates a new AddOrReplaceTransformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOrReplaceTransformationWithDefaults() *AddOrReplaceTransformation {
	this := AddOrReplaceTransformation{}
	return &this
}

// GetDimensionToReplace returns the DimensionToReplace field value
func (o *AddOrReplaceTransformation) GetDimensionToReplace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DimensionToReplace
}

// GetDimensionToReplaceOk returns a tuple with the DimensionToReplace field value
// and a boolean to check if the value has been set.
func (o *AddOrReplaceTransformation) GetDimensionToReplaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DimensionToReplace, true
}

// SetDimensionToReplace sets field value
func (o *AddOrReplaceTransformation) SetDimensionToReplace(v string) {
	o.DimensionToReplace = v
}

// GetValue returns the Value field value
func (o *AddOrReplaceTransformation) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *AddOrReplaceTransformation) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *AddOrReplaceTransformation) SetValue(v string) {
	o.Value = v
}

func (o AddOrReplaceTransformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedDimensionTransformation, errDimensionTransformation := json.Marshal(o.DimensionTransformation)
	if errDimensionTransformation != nil {
		return []byte{}, errDimensionTransformation
	}
	errDimensionTransformation = json.Unmarshal([]byte(serializedDimensionTransformation), &toSerialize)
	if errDimensionTransformation != nil {
		return []byte{}, errDimensionTransformation
	}
	if true {
		toSerialize["dimensionToReplace"] = o.DimensionToReplace
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableAddOrReplaceTransformation struct {
	value *AddOrReplaceTransformation
	isSet bool
}

func (v NullableAddOrReplaceTransformation) Get() *AddOrReplaceTransformation {
	return v.value
}

func (v *NullableAddOrReplaceTransformation) Set(val *AddOrReplaceTransformation) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOrReplaceTransformation) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOrReplaceTransformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOrReplaceTransformation(val *AddOrReplaceTransformation) *NullableAddOrReplaceTransformation {
	return &NullableAddOrReplaceTransformation{value: val, isSet: true}
}

func (v NullableAddOrReplaceTransformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOrReplaceTransformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


