/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// CustomFieldAllOf struct for CustomFieldAllOf
type CustomFieldAllOf struct {
	// Identifier of the field.
	FieldId string `json:"fieldId"`
	// Field type. Possible values are `String`, `Long`, `Int`, `Double`, and `Boolean`.
	DataType string `json:"dataType"`
	// Indicates whether the field is enabled and its values are being accepted. Possible values are `Enabled` and `Disabled`.
	State string `json:"state"`
}

// NewCustomFieldAllOf instantiates a new CustomFieldAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFieldAllOf(fieldId string, dataType string, state string) *CustomFieldAllOf {
	this := CustomFieldAllOf{}
	this.FieldId = fieldId
	this.DataType = dataType
	this.State = state
	return &this
}

// NewCustomFieldAllOfWithDefaults instantiates a new CustomFieldAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldAllOfWithDefaults() *CustomFieldAllOf {
	this := CustomFieldAllOf{}
	return &this
}

// GetFieldId returns the FieldId field value
func (o *CustomFieldAllOf) GetFieldId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldId
}

// GetFieldIdOk returns a tuple with the FieldId field value
// and a boolean to check if the value has been set.
func (o *CustomFieldAllOf) GetFieldIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldId, true
}

// SetFieldId sets field value
func (o *CustomFieldAllOf) SetFieldId(v string) {
	o.FieldId = v
}

// GetDataType returns the DataType field value
func (o *CustomFieldAllOf) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *CustomFieldAllOf) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *CustomFieldAllOf) SetDataType(v string) {
	o.DataType = v
}

// GetState returns the State field value
func (o *CustomFieldAllOf) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CustomFieldAllOf) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CustomFieldAllOf) SetState(v string) {
	o.State = v
}

func (o CustomFieldAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fieldId"] = o.FieldId
	}
	if true {
		toSerialize["dataType"] = o.DataType
	}
	if true {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableCustomFieldAllOf struct {
	value *CustomFieldAllOf
	isSet bool
}

func (v NullableCustomFieldAllOf) Get() *CustomFieldAllOf {
	return v.value
}

func (v *NullableCustomFieldAllOf) Set(val *CustomFieldAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldAllOf(val *CustomFieldAllOf) *NullableCustomFieldAllOf {
	return &NullableCustomFieldAllOf{value: val, isSet: true}
}

func (v NullableCustomFieldAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


