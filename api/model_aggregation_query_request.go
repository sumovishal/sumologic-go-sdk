/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AggregationQueryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregationQueryRequest{}

// AggregationQueryRequest struct for AggregationQueryRequest
type AggregationQueryRequest struct {
	// A list of tracing queries.
	QueryRows []AggregationQueryRow `json:"queryRows"`
	TimeRange ResolvableTimeRange `json:"timeRange"`
	XAxisGroupByAttribute AggregationGroupByAttribute `json:"xAxisGroupByAttribute"`
}

type _AggregationQueryRequest AggregationQueryRequest

// NewAggregationQueryRequest instantiates a new AggregationQueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregationQueryRequest(queryRows []AggregationQueryRow, timeRange ResolvableTimeRange, xAxisGroupByAttribute AggregationGroupByAttribute) *AggregationQueryRequest {
	this := AggregationQueryRequest{}
	this.QueryRows = queryRows
	this.TimeRange = timeRange
	this.XAxisGroupByAttribute = xAxisGroupByAttribute
	return &this
}

// NewAggregationQueryRequestWithDefaults instantiates a new AggregationQueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregationQueryRequestWithDefaults() *AggregationQueryRequest {
	this := AggregationQueryRequest{}
	return &this
}

// GetQueryRows returns the QueryRows field value
func (o *AggregationQueryRequest) GetQueryRows() []AggregationQueryRow {
	if o == nil {
		var ret []AggregationQueryRow
		return ret
	}

	return o.QueryRows
}

// GetQueryRowsOk returns a tuple with the QueryRows field value
// and a boolean to check if the value has been set.
func (o *AggregationQueryRequest) GetQueryRowsOk() ([]AggregationQueryRow, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueryRows, true
}

// SetQueryRows sets field value
func (o *AggregationQueryRequest) SetQueryRows(v []AggregationQueryRow) {
	o.QueryRows = v
}

// GetTimeRange returns the TimeRange field value
func (o *AggregationQueryRequest) GetTimeRange() ResolvableTimeRange {
	if o == nil {
		var ret ResolvableTimeRange
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *AggregationQueryRequest) GetTimeRangeOk() (*ResolvableTimeRange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *AggregationQueryRequest) SetTimeRange(v ResolvableTimeRange) {
	o.TimeRange = v
}

// GetXAxisGroupByAttribute returns the XAxisGroupByAttribute field value
func (o *AggregationQueryRequest) GetXAxisGroupByAttribute() AggregationGroupByAttribute {
	if o == nil {
		var ret AggregationGroupByAttribute
		return ret
	}

	return o.XAxisGroupByAttribute
}

// GetXAxisGroupByAttributeOk returns a tuple with the XAxisGroupByAttribute field value
// and a boolean to check if the value has been set.
func (o *AggregationQueryRequest) GetXAxisGroupByAttributeOk() (*AggregationGroupByAttribute, bool) {
	if o == nil {
		return nil, false
	}
	return &o.XAxisGroupByAttribute, true
}

// SetXAxisGroupByAttribute sets field value
func (o *AggregationQueryRequest) SetXAxisGroupByAttribute(v AggregationGroupByAttribute) {
	o.XAxisGroupByAttribute = v
}

func (o AggregationQueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregationQueryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queryRows"] = o.QueryRows
	toSerialize["timeRange"] = o.TimeRange
	toSerialize["xAxisGroupByAttribute"] = o.XAxisGroupByAttribute
	return toSerialize, nil
}

func (o *AggregationQueryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queryRows",
		"timeRange",
		"xAxisGroupByAttribute",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAggregationQueryRequest := _AggregationQueryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAggregationQueryRequest)

	if err != nil {
		return err
	}

	*o = AggregationQueryRequest(varAggregationQueryRequest)

	return err
}

type NullableAggregationQueryRequest struct {
	value *AggregationQueryRequest
	isSet bool
}

func (v NullableAggregationQueryRequest) Get() *AggregationQueryRequest {
	return v.value
}

func (v *NullableAggregationQueryRequest) Set(val *AggregationQueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationQueryRequest(val *AggregationQueryRequest) *NullableAggregationQueryRequest {
	return &NullableAggregationQueryRequest{value: val, isSet: true}
}

func (v NullableAggregationQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


