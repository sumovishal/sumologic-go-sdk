/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScanBudgetScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScanBudgetScope{}

// ScanBudgetScope struct for ScanBudgetScope
type ScanBudgetScope struct {
	// List of userIds included in the budget.
	IncludedUsers []string `json:"includedUsers"`
	// List of userIds excluded in the budget.
	ExcludedUsers []string `json:"excludedUsers"`
	// List of roleIds included in the budget.
	IncludedRoles []string `json:"includedRoles"`
	// List of roleIds excluded in the budget.
	ExcludedRoles []string `json:"excludedRoles"`
}

type _ScanBudgetScope ScanBudgetScope

// NewScanBudgetScope instantiates a new ScanBudgetScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanBudgetScope(includedUsers []string, excludedUsers []string, includedRoles []string, excludedRoles []string) *ScanBudgetScope {
	this := ScanBudgetScope{}
	this.IncludedUsers = includedUsers
	this.ExcludedUsers = excludedUsers
	this.IncludedRoles = includedRoles
	this.ExcludedRoles = excludedRoles
	return &this
}

// NewScanBudgetScopeWithDefaults instantiates a new ScanBudgetScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanBudgetScopeWithDefaults() *ScanBudgetScope {
	this := ScanBudgetScope{}
	return &this
}

// GetIncludedUsers returns the IncludedUsers field value
func (o *ScanBudgetScope) GetIncludedUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IncludedUsers
}

// GetIncludedUsersOk returns a tuple with the IncludedUsers field value
// and a boolean to check if the value has been set.
func (o *ScanBudgetScope) GetIncludedUsersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludedUsers, true
}

// SetIncludedUsers sets field value
func (o *ScanBudgetScope) SetIncludedUsers(v []string) {
	o.IncludedUsers = v
}

// GetExcludedUsers returns the ExcludedUsers field value
func (o *ScanBudgetScope) GetExcludedUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExcludedUsers
}

// GetExcludedUsersOk returns a tuple with the ExcludedUsers field value
// and a boolean to check if the value has been set.
func (o *ScanBudgetScope) GetExcludedUsersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludedUsers, true
}

// SetExcludedUsers sets field value
func (o *ScanBudgetScope) SetExcludedUsers(v []string) {
	o.ExcludedUsers = v
}

// GetIncludedRoles returns the IncludedRoles field value
func (o *ScanBudgetScope) GetIncludedRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IncludedRoles
}

// GetIncludedRolesOk returns a tuple with the IncludedRoles field value
// and a boolean to check if the value has been set.
func (o *ScanBudgetScope) GetIncludedRolesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludedRoles, true
}

// SetIncludedRoles sets field value
func (o *ScanBudgetScope) SetIncludedRoles(v []string) {
	o.IncludedRoles = v
}

// GetExcludedRoles returns the ExcludedRoles field value
func (o *ScanBudgetScope) GetExcludedRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExcludedRoles
}

// GetExcludedRolesOk returns a tuple with the ExcludedRoles field value
// and a boolean to check if the value has been set.
func (o *ScanBudgetScope) GetExcludedRolesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludedRoles, true
}

// SetExcludedRoles sets field value
func (o *ScanBudgetScope) SetExcludedRoles(v []string) {
	o.ExcludedRoles = v
}

func (o ScanBudgetScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanBudgetScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["includedUsers"] = o.IncludedUsers
	toSerialize["excludedUsers"] = o.ExcludedUsers
	toSerialize["includedRoles"] = o.IncludedRoles
	toSerialize["excludedRoles"] = o.ExcludedRoles
	return toSerialize, nil
}

func (o *ScanBudgetScope) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"includedUsers",
		"excludedUsers",
		"includedRoles",
		"excludedRoles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScanBudgetScope := _ScanBudgetScope{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScanBudgetScope)

	if err != nil {
		return err
	}

	*o = ScanBudgetScope(varScanBudgetScope)

	return err
}

type NullableScanBudgetScope struct {
	value *ScanBudgetScope
	isSet bool
}

func (v NullableScanBudgetScope) Get() *ScanBudgetScope {
	return v.value
}

func (v *NullableScanBudgetScope) Set(val *ScanBudgetScope) {
	v.value = val
	v.isSet = true
}

func (v NullableScanBudgetScope) IsSet() bool {
	return v.isSet
}

func (v *NullableScanBudgetScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanBudgetScope(val *ScanBudgetScope) *NullableScanBudgetScope {
	return &NullableScanBudgetScope{value: val, isSet: true}
}

func (v NullableScanBudgetScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanBudgetScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


