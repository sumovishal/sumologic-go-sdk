/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TracesListPanel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TracesListPanel{}

// TracesListPanel struct for TracesListPanel
type TracesListPanel struct {
	Panel
	// Traces queries of the panel.
	Queries []Query `json:"queries,omitempty"`
	TimeRange *ResolvableTimeRange `json:"timeRange,omitempty"`
}

// NewTracesListPanel instantiates a new TracesListPanel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracesListPanel(key string, panelType string) *TracesListPanel {
	this := TracesListPanel{}
	this.Key = key
	var keepVisualSettingsConsistentWithParent bool = true
	this.KeepVisualSettingsConsistentWithParent = &keepVisualSettingsConsistentWithParent
	this.PanelType = panelType
	return &this
}

// NewTracesListPanelWithDefaults instantiates a new TracesListPanel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracesListPanelWithDefaults() *TracesListPanel {
	this := TracesListPanel{}
	return &this
}

// GetQueries returns the Queries field value if set, zero value otherwise.
func (o *TracesListPanel) GetQueries() []Query {
	if o == nil || IsNil(o.Queries) {
		var ret []Query
		return ret
	}
	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracesListPanel) GetQueriesOk() ([]Query, bool) {
	if o == nil || IsNil(o.Queries) {
		return nil, false
	}
	return o.Queries, true
}

// HasQueries returns a boolean if a field has been set.
func (o *TracesListPanel) HasQueries() bool {
	if o != nil && !IsNil(o.Queries) {
		return true
	}

	return false
}

// SetQueries gets a reference to the given []Query and assigns it to the Queries field.
func (o *TracesListPanel) SetQueries(v []Query) {
	o.Queries = v
}

// GetTimeRange returns the TimeRange field value if set, zero value otherwise.
func (o *TracesListPanel) GetTimeRange() ResolvableTimeRange {
	if o == nil || IsNil(o.TimeRange) {
		var ret ResolvableTimeRange
		return ret
	}
	return *o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TracesListPanel) GetTimeRangeOk() (*ResolvableTimeRange, bool) {
	if o == nil || IsNil(o.TimeRange) {
		return nil, false
	}
	return o.TimeRange, true
}

// HasTimeRange returns a boolean if a field has been set.
func (o *TracesListPanel) HasTimeRange() bool {
	if o != nil && !IsNil(o.TimeRange) {
		return true
	}

	return false
}

// SetTimeRange gets a reference to the given ResolvableTimeRange and assigns it to the TimeRange field.
func (o *TracesListPanel) SetTimeRange(v ResolvableTimeRange) {
	o.TimeRange = &v
}

func (o TracesListPanel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TracesListPanel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPanel, errPanel := json.Marshal(o.Panel)
	if errPanel != nil {
		return map[string]interface{}{}, errPanel
	}
	errPanel = json.Unmarshal([]byte(serializedPanel), &toSerialize)
	if errPanel != nil {
		return map[string]interface{}{}, errPanel
	}
	if !IsNil(o.Queries) {
		toSerialize["queries"] = o.Queries
	}
	if !IsNil(o.TimeRange) {
		toSerialize["timeRange"] = o.TimeRange
	}
	return toSerialize, nil
}

type NullableTracesListPanel struct {
	value *TracesListPanel
	isSet bool
}

func (v NullableTracesListPanel) Get() *TracesListPanel {
	return v.value
}

func (v *NullableTracesListPanel) Set(val *TracesListPanel) {
	v.value = val
	v.isSet = true
}

func (v NullableTracesListPanel) IsSet() bool {
	return v.isSet
}

func (v *NullableTracesListPanel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracesListPanel(val *TracesListPanel) *NullableTracesListPanel {
	return &NullableTracesListPanel{value: val, isSet: true}
}

func (v NullableTracesListPanel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracesListPanel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


