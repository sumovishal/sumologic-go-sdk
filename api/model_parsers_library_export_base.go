/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParsersLibraryExportBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParsersLibraryExportBase{}

// ParsersLibraryExportBase struct for ParsersLibraryExportBase
type ParsersLibraryExportBase struct {
	// Name of the folder or parser.
	Name string `json:"name"`
	// Description of the folder or parser.
	Description string `json:"description"`
	// Type of the object model.
	Type string `json:"type"`
}

type _ParsersLibraryExportBase ParsersLibraryExportBase

// NewParsersLibraryExportBase instantiates a new ParsersLibraryExportBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParsersLibraryExportBase(name string, description string, type_ string) *ParsersLibraryExportBase {
	this := ParsersLibraryExportBase{}
	this.Name = name
	this.Description = description
	this.Type = type_
	return &this
}

// NewParsersLibraryExportBaseWithDefaults instantiates a new ParsersLibraryExportBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParsersLibraryExportBaseWithDefaults() *ParsersLibraryExportBase {
	this := ParsersLibraryExportBase{}
	return &this
}

// GetName returns the Name field value
func (o *ParsersLibraryExportBase) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ParsersLibraryExportBase) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ParsersLibraryExportBase) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *ParsersLibraryExportBase) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ParsersLibraryExportBase) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ParsersLibraryExportBase) SetDescription(v string) {
	o.Description = v
}

// GetType returns the Type field value
func (o *ParsersLibraryExportBase) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ParsersLibraryExportBase) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ParsersLibraryExportBase) SetType(v string) {
	o.Type = v
}

func (o ParsersLibraryExportBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParsersLibraryExportBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ParsersLibraryExportBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParsersLibraryExportBase := _ParsersLibraryExportBase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParsersLibraryExportBase)

	if err != nil {
		return err
	}

	*o = ParsersLibraryExportBase(varParsersLibraryExportBase)

	return err
}

type NullableParsersLibraryExportBase struct {
	value *ParsersLibraryExportBase
	isSet bool
}

func (v NullableParsersLibraryExportBase) Get() *ParsersLibraryExportBase {
	return v.value
}

func (v *NullableParsersLibraryExportBase) Set(val *ParsersLibraryExportBase) {
	v.value = val
	v.isSet = true
}

func (v NullableParsersLibraryExportBase) IsSet() bool {
	return v.isSet
}

func (v *NullableParsersLibraryExportBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParsersLibraryExportBase(val *ParsersLibraryExportBase) *NullableParsersLibraryExportBase {
	return &NullableParsersLibraryExportBase{value: val, isSet: true}
}

func (v NullableParsersLibraryExportBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParsersLibraryExportBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


