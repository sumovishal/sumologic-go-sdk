/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoleDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleDefinition{}

// RoleDefinition struct for RoleDefinition
type RoleDefinition struct {
	// Name of the role.
	Name string `json:"name"`
	// Description of the role.
	Description *string `json:"description,omitempty"`
	// A search filter which would be applied on partitions which belong to Log Analytics product area.
	LogAnalyticsFilter *string `json:"logAnalyticsFilter,omitempty"`
	// A search filter which would be applied on partitions which belong to Audit Data product area. Help Doc : (https://help.sumologic.com/docs/manage/security/audit-index/).
	AuditDataFilter *string `json:"auditDataFilter,omitempty"`
	// A search filter which would be applied on partitions which belong to Security Data product area.
	SecurityDataFilter *string `json:"securityDataFilter,omitempty"`
	// Describes the Permission Construct for the list of views in \"selectedViews\" parameter.  ### Valid Values are :    - `All` selectionType would allow access to all views in the org.   - `Allow` selectionType would allow access to specific views mentioned in \"selectedViews\" parameter.   - `Deny` selectionType would deny access to specific views mentioned in \"selectedViews\" parameter.
	SelectionType *string `json:"selectionType,omitempty"`
	// List of views which with specific view level filters in accordance to the selectionType chosen.
	SelectedViews []GetViewFilterDefinition `json:"selectedViews,omitempty"`
	// List of user identifiers to assign the role to.
	Users []string `json:"users,omitempty"`
	// List of [capabilities](https://help.sumologic.com/Manage/Users-and-Roles/Manage-Roles/Role-Capabilities) associated with this role. Valid values are ### Data Management   - viewCollectors   - manageCollectors   - manageBudgets   - manageDataVolumeFeed   - viewFieldExtraction   - manageFieldExtractionRules   - manageS3DataForwarding   - manageContent   - manageApps   - dataVolumeIndex   - manageConnections   - viewScheduledViews   - manageScheduledViews   - viewPartitions   - managePartitions   - viewFields   - manageFields   - viewAccountOverview   - manageTokens   - downloadSearchResults  ### Entity management   - manageEntityTypeConfig  ### Metrics   - metricsTransformation   - metricsExtraction   - metricsRules  ### Security   - managePasswordPolicy   - ipAllowlisting   - createAccessKeys   - manageAccessKeys   - manageSupportAccountAccess   - manageAuditDataFeed   - manageSaml   - shareDashboardOutsideOrg   - manageOrgSettings   - changeDataAccessLevel  ### Dashboards   - shareDashboardWorld   - shareDashboardAllowlist  ### UserManagement   - manageUsersAndRoles  ### Observability   - searchAuditIndex   - auditEventIndex  ### Cloud SIEM Enterprise   - viewCse  ### Alerting   - viewMonitorsV2   - manageMonitorsV2   - viewAlerts
	Capabilities []string `json:"capabilities,omitempty"`
	// Set this to true if you want to automatically append all missing capability requirements. If set to false an error will be thrown if any capabilities are missing their dependencies.
	AutofillDependencies *bool `json:"autofillDependencies,omitempty"`
}

type _RoleDefinition RoleDefinition

// NewRoleDefinition instantiates a new RoleDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleDefinition(name string) *RoleDefinition {
	this := RoleDefinition{}
	this.Name = name
	var autofillDependencies bool = true
	this.AutofillDependencies = &autofillDependencies
	return &this
}

// NewRoleDefinitionWithDefaults instantiates a new RoleDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleDefinitionWithDefaults() *RoleDefinition {
	this := RoleDefinition{}
	var autofillDependencies bool = true
	this.AutofillDependencies = &autofillDependencies
	return &this
}

// GetName returns the Name field value
func (o *RoleDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RoleDefinition) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoleDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoleDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetLogAnalyticsFilter returns the LogAnalyticsFilter field value if set, zero value otherwise.
func (o *RoleDefinition) GetLogAnalyticsFilter() string {
	if o == nil || IsNil(o.LogAnalyticsFilter) {
		var ret string
		return ret
	}
	return *o.LogAnalyticsFilter
}

// GetLogAnalyticsFilterOk returns a tuple with the LogAnalyticsFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetLogAnalyticsFilterOk() (*string, bool) {
	if o == nil || IsNil(o.LogAnalyticsFilter) {
		return nil, false
	}
	return o.LogAnalyticsFilter, true
}

// HasLogAnalyticsFilter returns a boolean if a field has been set.
func (o *RoleDefinition) HasLogAnalyticsFilter() bool {
	if o != nil && !IsNil(o.LogAnalyticsFilter) {
		return true
	}

	return false
}

// SetLogAnalyticsFilter gets a reference to the given string and assigns it to the LogAnalyticsFilter field.
func (o *RoleDefinition) SetLogAnalyticsFilter(v string) {
	o.LogAnalyticsFilter = &v
}

// GetAuditDataFilter returns the AuditDataFilter field value if set, zero value otherwise.
func (o *RoleDefinition) GetAuditDataFilter() string {
	if o == nil || IsNil(o.AuditDataFilter) {
		var ret string
		return ret
	}
	return *o.AuditDataFilter
}

// GetAuditDataFilterOk returns a tuple with the AuditDataFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetAuditDataFilterOk() (*string, bool) {
	if o == nil || IsNil(o.AuditDataFilter) {
		return nil, false
	}
	return o.AuditDataFilter, true
}

// HasAuditDataFilter returns a boolean if a field has been set.
func (o *RoleDefinition) HasAuditDataFilter() bool {
	if o != nil && !IsNil(o.AuditDataFilter) {
		return true
	}

	return false
}

// SetAuditDataFilter gets a reference to the given string and assigns it to the AuditDataFilter field.
func (o *RoleDefinition) SetAuditDataFilter(v string) {
	o.AuditDataFilter = &v
}

// GetSecurityDataFilter returns the SecurityDataFilter field value if set, zero value otherwise.
func (o *RoleDefinition) GetSecurityDataFilter() string {
	if o == nil || IsNil(o.SecurityDataFilter) {
		var ret string
		return ret
	}
	return *o.SecurityDataFilter
}

// GetSecurityDataFilterOk returns a tuple with the SecurityDataFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetSecurityDataFilterOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityDataFilter) {
		return nil, false
	}
	return o.SecurityDataFilter, true
}

// HasSecurityDataFilter returns a boolean if a field has been set.
func (o *RoleDefinition) HasSecurityDataFilter() bool {
	if o != nil && !IsNil(o.SecurityDataFilter) {
		return true
	}

	return false
}

// SetSecurityDataFilter gets a reference to the given string and assigns it to the SecurityDataFilter field.
func (o *RoleDefinition) SetSecurityDataFilter(v string) {
	o.SecurityDataFilter = &v
}

// GetSelectionType returns the SelectionType field value if set, zero value otherwise.
func (o *RoleDefinition) GetSelectionType() string {
	if o == nil || IsNil(o.SelectionType) {
		var ret string
		return ret
	}
	return *o.SelectionType
}

// GetSelectionTypeOk returns a tuple with the SelectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetSelectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SelectionType) {
		return nil, false
	}
	return o.SelectionType, true
}

// HasSelectionType returns a boolean if a field has been set.
func (o *RoleDefinition) HasSelectionType() bool {
	if o != nil && !IsNil(o.SelectionType) {
		return true
	}

	return false
}

// SetSelectionType gets a reference to the given string and assigns it to the SelectionType field.
func (o *RoleDefinition) SetSelectionType(v string) {
	o.SelectionType = &v
}

// GetSelectedViews returns the SelectedViews field value if set, zero value otherwise.
func (o *RoleDefinition) GetSelectedViews() []GetViewFilterDefinition {
	if o == nil || IsNil(o.SelectedViews) {
		var ret []GetViewFilterDefinition
		return ret
	}
	return o.SelectedViews
}

// GetSelectedViewsOk returns a tuple with the SelectedViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetSelectedViewsOk() ([]GetViewFilterDefinition, bool) {
	if o == nil || IsNil(o.SelectedViews) {
		return nil, false
	}
	return o.SelectedViews, true
}

// HasSelectedViews returns a boolean if a field has been set.
func (o *RoleDefinition) HasSelectedViews() bool {
	if o != nil && !IsNil(o.SelectedViews) {
		return true
	}

	return false
}

// SetSelectedViews gets a reference to the given []GetViewFilterDefinition and assigns it to the SelectedViews field.
func (o *RoleDefinition) SetSelectedViews(v []GetViewFilterDefinition) {
	o.SelectedViews = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *RoleDefinition) GetUsers() []string {
	if o == nil || IsNil(o.Users) {
		var ret []string
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *RoleDefinition) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *RoleDefinition) SetUsers(v []string) {
	o.Users = v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *RoleDefinition) GetCapabilities() []string {
	if o == nil || IsNil(o.Capabilities) {
		var ret []string
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetCapabilitiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *RoleDefinition) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []string and assigns it to the Capabilities field.
func (o *RoleDefinition) SetCapabilities(v []string) {
	o.Capabilities = v
}

// GetAutofillDependencies returns the AutofillDependencies field value if set, zero value otherwise.
func (o *RoleDefinition) GetAutofillDependencies() bool {
	if o == nil || IsNil(o.AutofillDependencies) {
		var ret bool
		return ret
	}
	return *o.AutofillDependencies
}

// GetAutofillDependenciesOk returns a tuple with the AutofillDependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleDefinition) GetAutofillDependenciesOk() (*bool, bool) {
	if o == nil || IsNil(o.AutofillDependencies) {
		return nil, false
	}
	return o.AutofillDependencies, true
}

// HasAutofillDependencies returns a boolean if a field has been set.
func (o *RoleDefinition) HasAutofillDependencies() bool {
	if o != nil && !IsNil(o.AutofillDependencies) {
		return true
	}

	return false
}

// SetAutofillDependencies gets a reference to the given bool and assigns it to the AutofillDependencies field.
func (o *RoleDefinition) SetAutofillDependencies(v bool) {
	o.AutofillDependencies = &v
}

func (o RoleDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LogAnalyticsFilter) {
		toSerialize["logAnalyticsFilter"] = o.LogAnalyticsFilter
	}
	if !IsNil(o.AuditDataFilter) {
		toSerialize["auditDataFilter"] = o.AuditDataFilter
	}
	if !IsNil(o.SecurityDataFilter) {
		toSerialize["securityDataFilter"] = o.SecurityDataFilter
	}
	if !IsNil(o.SelectionType) {
		toSerialize["selectionType"] = o.SelectionType
	}
	if !IsNil(o.SelectedViews) {
		toSerialize["selectedViews"] = o.SelectedViews
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}
	if !IsNil(o.AutofillDependencies) {
		toSerialize["autofillDependencies"] = o.AutofillDependencies
	}
	return toSerialize, nil
}

func (o *RoleDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleDefinition := _RoleDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoleDefinition)

	if err != nil {
		return err
	}

	*o = RoleDefinition(varRoleDefinition)

	return err
}

type NullableRoleDefinition struct {
	value *RoleDefinition
	isSet bool
}

func (v NullableRoleDefinition) Get() *RoleDefinition {
	return v.value
}

func (v *NullableRoleDefinition) Set(val *RoleDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleDefinition(val *RoleDefinition) *NullableRoleDefinition {
	return &NullableRoleDefinition{value: val, isSet: true}
}

func (v NullableRoleDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


