/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DoubleArrayEventAttributeValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DoubleArrayEventAttributeValue{}

// DoubleArrayEventAttributeValue struct for DoubleArrayEventAttributeValue
type DoubleArrayEventAttributeValue struct {
	EventAttributeValue
	Values []float64 `json:"values"`
}

// NewDoubleArrayEventAttributeValue instantiates a new DoubleArrayEventAttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDoubleArrayEventAttributeValue(values []float64, type_ string) *DoubleArrayEventAttributeValue {
	this := DoubleArrayEventAttributeValue{}
	this.Type = type_
	this.Values = values
	return &this
}

// NewDoubleArrayEventAttributeValueWithDefaults instantiates a new DoubleArrayEventAttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDoubleArrayEventAttributeValueWithDefaults() *DoubleArrayEventAttributeValue {
	this := DoubleArrayEventAttributeValue{}
	return &this
}

// GetValues returns the Values field value
func (o *DoubleArrayEventAttributeValue) GetValues() []float64 {
	if o == nil {
		var ret []float64
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *DoubleArrayEventAttributeValue) GetValuesOk() ([]float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *DoubleArrayEventAttributeValue) SetValues(v []float64) {
	o.Values = v
}

func (o DoubleArrayEventAttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DoubleArrayEventAttributeValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEventAttributeValue, errEventAttributeValue := json.Marshal(o.EventAttributeValue)
	if errEventAttributeValue != nil {
		return map[string]interface{}{}, errEventAttributeValue
	}
	errEventAttributeValue = json.Unmarshal([]byte(serializedEventAttributeValue), &toSerialize)
	if errEventAttributeValue != nil {
		return map[string]interface{}{}, errEventAttributeValue
	}
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

type NullableDoubleArrayEventAttributeValue struct {
	value *DoubleArrayEventAttributeValue
	isSet bool
}

func (v NullableDoubleArrayEventAttributeValue) Get() *DoubleArrayEventAttributeValue {
	return v.value
}

func (v *NullableDoubleArrayEventAttributeValue) Set(val *DoubleArrayEventAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDoubleArrayEventAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDoubleArrayEventAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDoubleArrayEventAttributeValue(val *DoubleArrayEventAttributeValue) *NullableDoubleArrayEventAttributeValue {
	return &NullableDoubleArrayEventAttributeValue{value: val, isSet: true}
}

func (v NullableDoubleArrayEventAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDoubleArrayEventAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


