/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AndCorrelationExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AndCorrelationExpression{}

// AndCorrelationExpression struct for AndCorrelationExpression
type AndCorrelationExpression struct {
	CorrelationExpression
	// List of correlation expressions to be evaluated with AND boolean operator.
	CorrelationExpressions []CorrelationExpression `json:"correlationExpressions"`
}

type _AndCorrelationExpression AndCorrelationExpression

// NewAndCorrelationExpression instantiates a new AndCorrelationExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAndCorrelationExpression(correlationExpressions []CorrelationExpression, correlationExpressionType string) *AndCorrelationExpression {
	this := AndCorrelationExpression{}
	this.CorrelationExpressionType = correlationExpressionType
	this.CorrelationExpressions = correlationExpressions
	return &this
}

// NewAndCorrelationExpressionWithDefaults instantiates a new AndCorrelationExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAndCorrelationExpressionWithDefaults() *AndCorrelationExpression {
	this := AndCorrelationExpression{}
	return &this
}

// GetCorrelationExpressions returns the CorrelationExpressions field value
func (o *AndCorrelationExpression) GetCorrelationExpressions() []CorrelationExpression {
	if o == nil {
		var ret []CorrelationExpression
		return ret
	}

	return o.CorrelationExpressions
}

// GetCorrelationExpressionsOk returns a tuple with the CorrelationExpressions field value
// and a boolean to check if the value has been set.
func (o *AndCorrelationExpression) GetCorrelationExpressionsOk() ([]CorrelationExpression, bool) {
	if o == nil {
		return nil, false
	}
	return o.CorrelationExpressions, true
}

// SetCorrelationExpressions sets field value
func (o *AndCorrelationExpression) SetCorrelationExpressions(v []CorrelationExpression) {
	o.CorrelationExpressions = v
}

func (o AndCorrelationExpression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AndCorrelationExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedCorrelationExpression, errCorrelationExpression := json.Marshal(o.CorrelationExpression)
	if errCorrelationExpression != nil {
		return map[string]interface{}{}, errCorrelationExpression
	}
	errCorrelationExpression = json.Unmarshal([]byte(serializedCorrelationExpression), &toSerialize)
	if errCorrelationExpression != nil {
		return map[string]interface{}{}, errCorrelationExpression
	}
	toSerialize["correlationExpressions"] = o.CorrelationExpressions
	return toSerialize, nil
}

func (o *AndCorrelationExpression) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"correlationExpressions",
		"correlationExpressionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAndCorrelationExpression := _AndCorrelationExpression{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAndCorrelationExpression)

	if err != nil {
		return err
	}

	*o = AndCorrelationExpression(varAndCorrelationExpression)

	return err
}

type NullableAndCorrelationExpression struct {
	value *AndCorrelationExpression
	isSet bool
}

func (v NullableAndCorrelationExpression) Get() *AndCorrelationExpression {
	return v.value
}

func (v *NullableAndCorrelationExpression) Set(val *AndCorrelationExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableAndCorrelationExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableAndCorrelationExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAndCorrelationExpression(val *AndCorrelationExpression) *NullableAndCorrelationExpression {
	return &NullableAndCorrelationExpression{value: val, isSet: true}
}

func (v NullableAndCorrelationExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAndCorrelationExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


