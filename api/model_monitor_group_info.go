/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the MonitorGroupInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorGroupInfo{}

// MonitorGroupInfo The monitor group key info for all monitors.
type MonitorGroupInfo struct {
	// The monitor group keys.
	Keys []string `json:"keys,omitempty"`
}

// NewMonitorGroupInfo instantiates a new MonitorGroupInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorGroupInfo() *MonitorGroupInfo {
	this := MonitorGroupInfo{}
	return &this
}

// NewMonitorGroupInfoWithDefaults instantiates a new MonitorGroupInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorGroupInfoWithDefaults() *MonitorGroupInfo {
	this := MonitorGroupInfo{}
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *MonitorGroupInfo) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorGroupInfo) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *MonitorGroupInfo) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *MonitorGroupInfo) SetKeys(v []string) {
	o.Keys = v
}

func (o MonitorGroupInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorGroupInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	return toSerialize, nil
}

type NullableMonitorGroupInfo struct {
	value *MonitorGroupInfo
	isSet bool
}

func (v NullableMonitorGroupInfo) Get() *MonitorGroupInfo {
	return v.value
}

func (v *NullableMonitorGroupInfo) Set(val *MonitorGroupInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorGroupInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorGroupInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorGroupInfo(val *MonitorGroupInfo) *NullableMonitorGroupInfo {
	return &NullableMonitorGroupInfo{value: val, isSet: true}
}

func (v NullableMonitorGroupInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorGroupInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


