/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// StaticConditionAllOf A rule that defines how the monitor should evaluate data and trigger notifications.
type StaticConditionAllOf struct {
	// The relative time range of the monitor. Valid values of time ranges are `5m`, `10m`, `15m`, `30m`, `1h`, `3h`, `6h`, `12h`, or `24h`.
	TimeRange string `json:"timeRange"`
	// The data value for the condition. This defines the threshold for when to trigger. Threshold value is not applicable for `MissingData` and `ResolvedMissingData` triggerTypes and will be ignored if specified.
	Threshold *float64 `json:"threshold,omitempty"`
	// The comparison type for the `threshold` evaluation. This defines how you want the data value compared. Valid values:   1. `LessThan`: Less than than the configured threshold.   2. `GreaterThan`: Greater than the configured threshold.   3. `LessThanOrEqual`: Less than or equal to the configured threshold.   4. `GreaterThanOrEqual`: Greater than or equal to the configured threshold. ThresholdType value is not applicable for `MissingData` and `ResolvedMissingData` triggerTypes and will be ignored if specified.
	ThresholdType *string `json:"thresholdType,omitempty"`
	// The name of the field that the trigger condition will alert on. The trigger could compare the value of specified field with the threshold. If `field` is not specified, monitor would default to result count instead.
	Field *string `json:"field,omitempty"`
	// The criteria to evaluate the threshold and thresholdType in the given time range. Valid values:   1. `AtLeastOnce`: Trigger if the threshold is met at least once. (NOTE: This is the only valid value if monitorType is `Metrics`.)   2. `Always`: Trigger if the threshold is met continuously. (NOTE: This is the only valid value if monitorType is `Metrics`.)   3. `ResultCount`: Trigger if the threshold is met against the count of results. (NOTE: This is the only valid value if monitorType is `Logs`.)   4. `MissingData`: Trigger if the data is missing. (NOTE: This is valid for both `Logs` and `Metrics` monitorTypes)
	OccurrenceType string `json:"occurrenceType"`
	// Determines which time series from queries to use for Metrics MissingData and ResolvedMissingData triggers Valid values:   1. `AllTimeSeries`: Evaluate the condition against all time series. (NOTE: This option is only valid if monitorType is `Metrics`)   2. `AnyTimeSeries`: Evaluate the condition against any time series. (NOTE: This option is only valid if monitorType is `Metrics`)   3. `AllResults`: Evaluate the condition against results from all queries. (NOTE: This option is only valid if monitorType is `Logs`)
	TriggerSource string `json:"triggerSource"`
}

// NewStaticConditionAllOf instantiates a new StaticConditionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaticConditionAllOf(timeRange string, occurrenceType string, triggerSource string) *StaticConditionAllOf {
	this := StaticConditionAllOf{}
	this.TimeRange = timeRange
	var threshold float64 = 0.0
	this.Threshold = &threshold
	var thresholdType string = "GreaterThanOrEqual"
	this.ThresholdType = &thresholdType
	this.OccurrenceType = occurrenceType
	this.TriggerSource = triggerSource
	return &this
}

// NewStaticConditionAllOfWithDefaults instantiates a new StaticConditionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaticConditionAllOfWithDefaults() *StaticConditionAllOf {
	this := StaticConditionAllOf{}
	var threshold float64 = 0.0
	this.Threshold = &threshold
	var thresholdType string = "GreaterThanOrEqual"
	this.ThresholdType = &thresholdType
	return &this
}

// GetTimeRange returns the TimeRange field value
func (o *StaticConditionAllOf) GetTimeRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *StaticConditionAllOf) GetTimeRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *StaticConditionAllOf) SetTimeRange(v string) {
	o.TimeRange = v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *StaticConditionAllOf) GetThreshold() float64 {
	if o == nil || o.Threshold == nil {
		var ret float64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticConditionAllOf) GetThresholdOk() (*float64, bool) {
	if o == nil || o.Threshold == nil {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *StaticConditionAllOf) HasThreshold() bool {
	if o != nil && o.Threshold != nil {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float64 and assigns it to the Threshold field.
func (o *StaticConditionAllOf) SetThreshold(v float64) {
	o.Threshold = &v
}

// GetThresholdType returns the ThresholdType field value if set, zero value otherwise.
func (o *StaticConditionAllOf) GetThresholdType() string {
	if o == nil || o.ThresholdType == nil {
		var ret string
		return ret
	}
	return *o.ThresholdType
}

// GetThresholdTypeOk returns a tuple with the ThresholdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticConditionAllOf) GetThresholdTypeOk() (*string, bool) {
	if o == nil || o.ThresholdType == nil {
		return nil, false
	}
	return o.ThresholdType, true
}

// HasThresholdType returns a boolean if a field has been set.
func (o *StaticConditionAllOf) HasThresholdType() bool {
	if o != nil && o.ThresholdType != nil {
		return true
	}

	return false
}

// SetThresholdType gets a reference to the given string and assigns it to the ThresholdType field.
func (o *StaticConditionAllOf) SetThresholdType(v string) {
	o.ThresholdType = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *StaticConditionAllOf) GetField() string {
	if o == nil || o.Field == nil {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticConditionAllOf) GetFieldOk() (*string, bool) {
	if o == nil || o.Field == nil {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *StaticConditionAllOf) HasField() bool {
	if o != nil && o.Field != nil {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *StaticConditionAllOf) SetField(v string) {
	o.Field = &v
}

// GetOccurrenceType returns the OccurrenceType field value
func (o *StaticConditionAllOf) GetOccurrenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OccurrenceType
}

// GetOccurrenceTypeOk returns a tuple with the OccurrenceType field value
// and a boolean to check if the value has been set.
func (o *StaticConditionAllOf) GetOccurrenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OccurrenceType, true
}

// SetOccurrenceType sets field value
func (o *StaticConditionAllOf) SetOccurrenceType(v string) {
	o.OccurrenceType = v
}

// GetTriggerSource returns the TriggerSource field value
func (o *StaticConditionAllOf) GetTriggerSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerSource
}

// GetTriggerSourceOk returns a tuple with the TriggerSource field value
// and a boolean to check if the value has been set.
func (o *StaticConditionAllOf) GetTriggerSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerSource, true
}

// SetTriggerSource sets field value
func (o *StaticConditionAllOf) SetTriggerSource(v string) {
	o.TriggerSource = v
}

func (o StaticConditionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timeRange"] = o.TimeRange
	}
	if o.Threshold != nil {
		toSerialize["threshold"] = o.Threshold
	}
	if o.ThresholdType != nil {
		toSerialize["thresholdType"] = o.ThresholdType
	}
	if o.Field != nil {
		toSerialize["field"] = o.Field
	}
	if true {
		toSerialize["occurrenceType"] = o.OccurrenceType
	}
	if true {
		toSerialize["triggerSource"] = o.TriggerSource
	}
	return json.Marshal(toSerialize)
}

type NullableStaticConditionAllOf struct {
	value *StaticConditionAllOf
	isSet bool
}

func (v NullableStaticConditionAllOf) Get() *StaticConditionAllOf {
	return v.value
}

func (v *NullableStaticConditionAllOf) Set(val *StaticConditionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStaticConditionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStaticConditionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaticConditionAllOf(val *StaticConditionAllOf) *NullableStaticConditionAllOf {
	return &NullableStaticConditionAllOf{value: val, isSet: true}
}

func (v NullableStaticConditionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaticConditionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


