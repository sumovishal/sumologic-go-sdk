/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PartitionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionsResponse{}

// PartitionsResponse struct for PartitionsResponse
type PartitionsResponse struct {
	// Array of partitions.
	Data []Partition `json:"data"`
}

// NewPartitionsResponse instantiates a new PartitionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionsResponse(data []Partition) *PartitionsResponse {
	this := PartitionsResponse{}
	this.Data = data
	return &this
}

// NewPartitionsResponseWithDefaults instantiates a new PartitionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionsResponseWithDefaults() *PartitionsResponse {
	this := PartitionsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *PartitionsResponse) GetData() []Partition {
	if o == nil {
		var ret []Partition
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PartitionsResponse) GetDataOk() ([]Partition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *PartitionsResponse) SetData(v []Partition) {
	o.Data = v
}

func (o PartitionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullablePartitionsResponse struct {
	value *PartitionsResponse
	isSet bool
}

func (v NullablePartitionsResponse) Get() *PartitionsResponse {
	return v.value
}

func (v *NullablePartitionsResponse) Set(val *PartitionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionsResponse(val *PartitionsResponse) *NullablePartitionsResponse {
	return &NullablePartitionsResponse{value: val, isSet: true}
}

func (v NullablePartitionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


