/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MonitorQueries type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorQueries{}

// MonitorQueries Queries to be validated.
type MonitorQueries struct {
	// The type of monitor. Valid values:   1. `Logs`: A logs query monitor.   2. `Metrics`: A metrics query monitor.
	MonitorType string `json:"monitorType"`
	// The relative time range of the monitor. Valid values of time ranges are `5m`, `10m`, `15m`, `30m`, `1h`, `3h`, `6h`, `12h`, or `24h`.
	TimeRange string `json:"timeRange"`
	// Queries to be validated.
	Queries []UnvalidatedMonitorQuery `json:"queries"`
}

// NewMonitorQueries instantiates a new MonitorQueries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorQueries(monitorType string, timeRange string, queries []UnvalidatedMonitorQuery) *MonitorQueries {
	this := MonitorQueries{}
	this.MonitorType = monitorType
	this.TimeRange = timeRange
	this.Queries = queries
	return &this
}

// NewMonitorQueriesWithDefaults instantiates a new MonitorQueries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorQueriesWithDefaults() *MonitorQueries {
	this := MonitorQueries{}
	return &this
}

// GetMonitorType returns the MonitorType field value
func (o *MonitorQueries) GetMonitorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MonitorType
}

// GetMonitorTypeOk returns a tuple with the MonitorType field value
// and a boolean to check if the value has been set.
func (o *MonitorQueries) GetMonitorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonitorType, true
}

// SetMonitorType sets field value
func (o *MonitorQueries) SetMonitorType(v string) {
	o.MonitorType = v
}

// GetTimeRange returns the TimeRange field value
func (o *MonitorQueries) GetTimeRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *MonitorQueries) GetTimeRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *MonitorQueries) SetTimeRange(v string) {
	o.TimeRange = v
}

// GetQueries returns the Queries field value
func (o *MonitorQueries) GetQueries() []UnvalidatedMonitorQuery {
	if o == nil {
		var ret []UnvalidatedMonitorQuery
		return ret
	}

	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value
// and a boolean to check if the value has been set.
func (o *MonitorQueries) GetQueriesOk() ([]UnvalidatedMonitorQuery, bool) {
	if o == nil {
		return nil, false
	}
	return o.Queries, true
}

// SetQueries sets field value
func (o *MonitorQueries) SetQueries(v []UnvalidatedMonitorQuery) {
	o.Queries = v
}

func (o MonitorQueries) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorQueries) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["monitorType"] = o.MonitorType
	toSerialize["timeRange"] = o.TimeRange
	toSerialize["queries"] = o.Queries
	return toSerialize, nil
}

type NullableMonitorQueries struct {
	value *MonitorQueries
	isSet bool
}

func (v NullableMonitorQueries) Get() *MonitorQueries {
	return v.value
}

func (v *NullableMonitorQueries) Set(val *MonitorQueries) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorQueries) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorQueries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorQueries(val *MonitorQueries) *NullableMonitorQueries {
	return &NullableMonitorQueries{value: val, isSet: true}
}

func (v NullableMonitorQueries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorQueries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


