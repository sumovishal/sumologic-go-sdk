/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the AsyncJobStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsyncJobStatus{}

// AsyncJobStatus struct for AsyncJobStatus
type AsyncJobStatus struct {
	// Whether or not the request is in progress (`InProgress`), has completed successfully (`Success`), or has completed with an error (`Failed`).
	Status string `json:"status"`
	// Additional status message generated if the status is not `Failed`.
	StatusMessage *string `json:"statusMessage,omitempty"`
	Error *ErrorDescription `json:"error,omitempty"`
}

// NewAsyncJobStatus instantiates a new AsyncJobStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncJobStatus(status string) *AsyncJobStatus {
	this := AsyncJobStatus{}
	this.Status = status
	return &this
}

// NewAsyncJobStatusWithDefaults instantiates a new AsyncJobStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncJobStatusWithDefaults() *AsyncJobStatus {
	this := AsyncJobStatus{}
	return &this
}

// GetStatus returns the Status field value
func (o *AsyncJobStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AsyncJobStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AsyncJobStatus) SetStatus(v string) {
	o.Status = v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *AsyncJobStatus) GetStatusMessage() string {
	if o == nil || IsNil(o.StatusMessage) {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatus) GetStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StatusMessage) {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *AsyncJobStatus) HasStatusMessage() bool {
	if o != nil && !IsNil(o.StatusMessage) {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *AsyncJobStatus) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *AsyncJobStatus) GetError() ErrorDescription {
	if o == nil || IsNil(o.Error) {
		var ret ErrorDescription
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncJobStatus) GetErrorOk() (*ErrorDescription, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *AsyncJobStatus) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorDescription and assigns it to the Error field.
func (o *AsyncJobStatus) SetError(v ErrorDescription) {
	o.Error = &v
}

func (o AsyncJobStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsyncJobStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if !IsNil(o.StatusMessage) {
		toSerialize["statusMessage"] = o.StatusMessage
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableAsyncJobStatus struct {
	value *AsyncJobStatus
	isSet bool
}

func (v NullableAsyncJobStatus) Get() *AsyncJobStatus {
	return v.value
}

func (v *NullableAsyncJobStatus) Set(val *AsyncJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncJobStatus(val *AsyncJobStatus) *NullableAsyncJobStatus {
	return &NullableAsyncJobStatus{value: val, isSet: true}
}

func (v NullableAsyncJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


