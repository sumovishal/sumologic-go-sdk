/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// VisualOutlierData struct for VisualOutlierData
type VisualOutlierData struct {
	// A measure of how anomalous the data point is.
	AnomalyScore float64 `json:"anomalyScore"`
	// The estimated value of the data point.
	Baseline float64 `json:"baseline"`
	// The variation in the estimated value of the data point.
	Unit float64 `json:"unit"`
	// The lower bound of the outlier band
	LowerBound float64 `json:"lowerBound"`
	// The upper bound of the outlier band
	UpperBound float64 `json:"upperBound"`
	// Indicates if the data point is outlier or not.
	IsOutlier bool `json:"isOutlier"`
}

// NewVisualOutlierData instantiates a new VisualOutlierData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualOutlierData(anomalyScore float64, baseline float64, unit float64, lowerBound float64, upperBound float64, isOutlier bool) *VisualOutlierData {
	this := VisualOutlierData{}
	this.AnomalyScore = anomalyScore
	this.Baseline = baseline
	this.Unit = unit
	this.LowerBound = lowerBound
	this.UpperBound = upperBound
	this.IsOutlier = isOutlier
	return &this
}

// NewVisualOutlierDataWithDefaults instantiates a new VisualOutlierData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualOutlierDataWithDefaults() *VisualOutlierData {
	this := VisualOutlierData{}
	return &this
}

// GetAnomalyScore returns the AnomalyScore field value
func (o *VisualOutlierData) GetAnomalyScore() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AnomalyScore
}

// GetAnomalyScoreOk returns a tuple with the AnomalyScore field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetAnomalyScoreOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnomalyScore, true
}

// SetAnomalyScore sets field value
func (o *VisualOutlierData) SetAnomalyScore(v float64) {
	o.AnomalyScore = v
}

// GetBaseline returns the Baseline field value
func (o *VisualOutlierData) GetBaseline() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Baseline
}

// GetBaselineOk returns a tuple with the Baseline field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetBaselineOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Baseline, true
}

// SetBaseline sets field value
func (o *VisualOutlierData) SetBaseline(v float64) {
	o.Baseline = v
}

// GetUnit returns the Unit field value
func (o *VisualOutlierData) GetUnit() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetUnitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *VisualOutlierData) SetUnit(v float64) {
	o.Unit = v
}

// GetLowerBound returns the LowerBound field value
func (o *VisualOutlierData) GetLowerBound() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.LowerBound
}

// GetLowerBoundOk returns a tuple with the LowerBound field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetLowerBoundOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowerBound, true
}

// SetLowerBound sets field value
func (o *VisualOutlierData) SetLowerBound(v float64) {
	o.LowerBound = v
}

// GetUpperBound returns the UpperBound field value
func (o *VisualOutlierData) GetUpperBound() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.UpperBound
}

// GetUpperBoundOk returns a tuple with the UpperBound field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetUpperBoundOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpperBound, true
}

// SetUpperBound sets field value
func (o *VisualOutlierData) SetUpperBound(v float64) {
	o.UpperBound = v
}

// GetIsOutlier returns the IsOutlier field value
func (o *VisualOutlierData) GetIsOutlier() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOutlier
}

// GetIsOutlierOk returns a tuple with the IsOutlier field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetIsOutlierOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOutlier, true
}

// SetIsOutlier sets field value
func (o *VisualOutlierData) SetIsOutlier(v bool) {
	o.IsOutlier = v
}

func (o VisualOutlierData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["anomalyScore"] = o.AnomalyScore
	}
	if true {
		toSerialize["baseline"] = o.Baseline
	}
	if true {
		toSerialize["unit"] = o.Unit
	}
	if true {
		toSerialize["lowerBound"] = o.LowerBound
	}
	if true {
		toSerialize["upperBound"] = o.UpperBound
	}
	if true {
		toSerialize["isOutlier"] = o.IsOutlier
	}
	return json.Marshal(toSerialize)
}

type NullableVisualOutlierData struct {
	value *VisualOutlierData
	isSet bool
}

func (v NullableVisualOutlierData) Get() *VisualOutlierData {
	return v.value
}

func (v *NullableVisualOutlierData) Set(val *VisualOutlierData) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualOutlierData) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualOutlierData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualOutlierData(val *VisualOutlierData) *NullableVisualOutlierData {
	return &NullableVisualOutlierData{value: val, isSet: true}
}

func (v NullableVisualOutlierData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualOutlierData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


