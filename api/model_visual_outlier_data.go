/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VisualOutlierData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualOutlierData{}

// VisualOutlierData struct for VisualOutlierData
type VisualOutlierData struct {
	// The estimated value of the data point.
	Baseline float64 `json:"baseline"`
	// The variation in the estimated value of the data point.
	Unit float64 `json:"unit"`
	// The lower bound of the outlier band
	LowerBound float64 `json:"lowerBound"`
	// The upper bound of the outlier band
	UpperBound float64 `json:"upperBound"`
	// Indicates if the data point is outlier or not.
	IsOutlier bool `json:"isOutlier"`
}

type _VisualOutlierData VisualOutlierData

// NewVisualOutlierData instantiates a new VisualOutlierData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualOutlierData(baseline float64, unit float64, lowerBound float64, upperBound float64, isOutlier bool) *VisualOutlierData {
	this := VisualOutlierData{}
	this.Baseline = baseline
	this.Unit = unit
	this.LowerBound = lowerBound
	this.UpperBound = upperBound
	this.IsOutlier = isOutlier
	return &this
}

// NewVisualOutlierDataWithDefaults instantiates a new VisualOutlierData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualOutlierDataWithDefaults() *VisualOutlierData {
	this := VisualOutlierData{}
	return &this
}

// GetBaseline returns the Baseline field value
func (o *VisualOutlierData) GetBaseline() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Baseline
}

// GetBaselineOk returns a tuple with the Baseline field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetBaselineOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Baseline, true
}

// SetBaseline sets field value
func (o *VisualOutlierData) SetBaseline(v float64) {
	o.Baseline = v
}

// GetUnit returns the Unit field value
func (o *VisualOutlierData) GetUnit() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetUnitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *VisualOutlierData) SetUnit(v float64) {
	o.Unit = v
}

// GetLowerBound returns the LowerBound field value
func (o *VisualOutlierData) GetLowerBound() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.LowerBound
}

// GetLowerBoundOk returns a tuple with the LowerBound field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetLowerBoundOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowerBound, true
}

// SetLowerBound sets field value
func (o *VisualOutlierData) SetLowerBound(v float64) {
	o.LowerBound = v
}

// GetUpperBound returns the UpperBound field value
func (o *VisualOutlierData) GetUpperBound() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.UpperBound
}

// GetUpperBoundOk returns a tuple with the UpperBound field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetUpperBoundOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpperBound, true
}

// SetUpperBound sets field value
func (o *VisualOutlierData) SetUpperBound(v float64) {
	o.UpperBound = v
}

// GetIsOutlier returns the IsOutlier field value
func (o *VisualOutlierData) GetIsOutlier() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOutlier
}

// GetIsOutlierOk returns a tuple with the IsOutlier field value
// and a boolean to check if the value has been set.
func (o *VisualOutlierData) GetIsOutlierOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOutlier, true
}

// SetIsOutlier sets field value
func (o *VisualOutlierData) SetIsOutlier(v bool) {
	o.IsOutlier = v
}

func (o VisualOutlierData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualOutlierData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["baseline"] = o.Baseline
	toSerialize["unit"] = o.Unit
	toSerialize["lowerBound"] = o.LowerBound
	toSerialize["upperBound"] = o.UpperBound
	toSerialize["isOutlier"] = o.IsOutlier
	return toSerialize, nil
}

func (o *VisualOutlierData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"baseline",
		"unit",
		"lowerBound",
		"upperBound",
		"isOutlier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVisualOutlierData := _VisualOutlierData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVisualOutlierData)

	if err != nil {
		return err
	}

	*o = VisualOutlierData(varVisualOutlierData)

	return err
}

type NullableVisualOutlierData struct {
	value *VisualOutlierData
	isSet bool
}

func (v NullableVisualOutlierData) Get() *VisualOutlierData {
	return v.value
}

func (v *NullableVisualOutlierData) Set(val *VisualOutlierData) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualOutlierData) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualOutlierData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualOutlierData(val *VisualOutlierData) *NullableVisualOutlierData {
	return &NullableVisualOutlierData{value: val, isSet: true}
}

func (v NullableVisualOutlierData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualOutlierData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


