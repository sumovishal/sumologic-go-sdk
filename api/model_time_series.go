/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimeSeries type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeSeries{}

// TimeSeries struct for TimeSeries
type TimeSeries struct {
	MetricDefinition MetricDefinition `json:"metricDefinition"`
	Points Points `json:"points"`
}

type _TimeSeries TimeSeries

// NewTimeSeries instantiates a new TimeSeries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSeries(metricDefinition MetricDefinition, points Points) *TimeSeries {
	this := TimeSeries{}
	this.MetricDefinition = metricDefinition
	this.Points = points
	return &this
}

// NewTimeSeriesWithDefaults instantiates a new TimeSeries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSeriesWithDefaults() *TimeSeries {
	this := TimeSeries{}
	return &this
}

// GetMetricDefinition returns the MetricDefinition field value
func (o *TimeSeries) GetMetricDefinition() MetricDefinition {
	if o == nil {
		var ret MetricDefinition
		return ret
	}

	return o.MetricDefinition
}

// GetMetricDefinitionOk returns a tuple with the MetricDefinition field value
// and a boolean to check if the value has been set.
func (o *TimeSeries) GetMetricDefinitionOk() (*MetricDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricDefinition, true
}

// SetMetricDefinition sets field value
func (o *TimeSeries) SetMetricDefinition(v MetricDefinition) {
	o.MetricDefinition = v
}

// GetPoints returns the Points field value
func (o *TimeSeries) GetPoints() Points {
	if o == nil {
		var ret Points
		return ret
	}

	return o.Points
}

// GetPointsOk returns a tuple with the Points field value
// and a boolean to check if the value has been set.
func (o *TimeSeries) GetPointsOk() (*Points, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Points, true
}

// SetPoints sets field value
func (o *TimeSeries) SetPoints(v Points) {
	o.Points = v
}

func (o TimeSeries) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeSeries) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metricDefinition"] = o.MetricDefinition
	toSerialize["points"] = o.Points
	return toSerialize, nil
}

func (o *TimeSeries) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metricDefinition",
		"points",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeSeries := _TimeSeries{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeSeries)

	if err != nil {
		return err
	}

	*o = TimeSeries(varTimeSeries)

	return err
}

type NullableTimeSeries struct {
	value *TimeSeries
	isSet bool
}

func (v NullableTimeSeries) Get() *TimeSeries {
	return v.value
}

func (v *NullableTimeSeries) Set(val *TimeSeries) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSeries(val *TimeSeries) *NullableTimeSeries {
	return &NullableTimeSeries{value: val, isSet: true}
}

func (v NullableTimeSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


