/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimeSeriesRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeSeriesRow{}

// TimeSeriesRow struct for TimeSeriesRow
type TimeSeriesRow struct {
	// Row id for the query row as specified in the request.
	RowId string `json:"rowId"`
	TimeSeriesList TimeSeriesList `json:"timeSeriesList"`
}

type _TimeSeriesRow TimeSeriesRow

// NewTimeSeriesRow instantiates a new TimeSeriesRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSeriesRow(rowId string, timeSeriesList TimeSeriesList) *TimeSeriesRow {
	this := TimeSeriesRow{}
	this.RowId = rowId
	this.TimeSeriesList = timeSeriesList
	return &this
}

// NewTimeSeriesRowWithDefaults instantiates a new TimeSeriesRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSeriesRowWithDefaults() *TimeSeriesRow {
	this := TimeSeriesRow{}
	return &this
}

// GetRowId returns the RowId field value
func (o *TimeSeriesRow) GetRowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowId
}

// GetRowIdOk returns a tuple with the RowId field value
// and a boolean to check if the value has been set.
func (o *TimeSeriesRow) GetRowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowId, true
}

// SetRowId sets field value
func (o *TimeSeriesRow) SetRowId(v string) {
	o.RowId = v
}

// GetTimeSeriesList returns the TimeSeriesList field value
func (o *TimeSeriesRow) GetTimeSeriesList() TimeSeriesList {
	if o == nil {
		var ret TimeSeriesList
		return ret
	}

	return o.TimeSeriesList
}

// GetTimeSeriesListOk returns a tuple with the TimeSeriesList field value
// and a boolean to check if the value has been set.
func (o *TimeSeriesRow) GetTimeSeriesListOk() (*TimeSeriesList, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeSeriesList, true
}

// SetTimeSeriesList sets field value
func (o *TimeSeriesRow) SetTimeSeriesList(v TimeSeriesList) {
	o.TimeSeriesList = v
}

func (o TimeSeriesRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeSeriesRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowId"] = o.RowId
	toSerialize["timeSeriesList"] = o.TimeSeriesList
	return toSerialize, nil
}

func (o *TimeSeriesRow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rowId",
		"timeSeriesList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeSeriesRow := _TimeSeriesRow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeSeriesRow)

	if err != nil {
		return err
	}

	*o = TimeSeriesRow(varTimeSeriesRow)

	return err
}

type NullableTimeSeriesRow struct {
	value *TimeSeriesRow
	isSet bool
}

func (v NullableTimeSeriesRow) Get() *TimeSeriesRow {
	return v.value
}

func (v *NullableTimeSeriesRow) Set(val *TimeSeriesRow) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSeriesRow) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSeriesRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSeriesRow(val *TimeSeriesRow) *NullableTimeSeriesRow {
	return &NullableTimeSeriesRow{value: val, isSet: true}
}

func (v NullableTimeSeriesRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSeriesRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


