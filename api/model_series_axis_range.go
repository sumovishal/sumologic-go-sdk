/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SeriesAxisRange The axis limitation for chart data.
type SeriesAxisRange struct {
	X *AxisRange `json:"x,omitempty"`
	Y *AxisRange `json:"y,omitempty"`
}

// NewSeriesAxisRange instantiates a new SeriesAxisRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeriesAxisRange() *SeriesAxisRange {
	this := SeriesAxisRange{}
	return &this
}

// NewSeriesAxisRangeWithDefaults instantiates a new SeriesAxisRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesAxisRangeWithDefaults() *SeriesAxisRange {
	this := SeriesAxisRange{}
	return &this
}

// GetX returns the X field value if set, zero value otherwise.
func (o *SeriesAxisRange) GetX() AxisRange {
	if o == nil || o.X == nil {
		var ret AxisRange
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesAxisRange) GetXOk() (*AxisRange, bool) {
	if o == nil || o.X == nil {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *SeriesAxisRange) HasX() bool {
	if o != nil && o.X != nil {
		return true
	}

	return false
}

// SetX gets a reference to the given AxisRange and assigns it to the X field.
func (o *SeriesAxisRange) SetX(v AxisRange) {
	o.X = &v
}

// GetY returns the Y field value if set, zero value otherwise.
func (o *SeriesAxisRange) GetY() AxisRange {
	if o == nil || o.Y == nil {
		var ret AxisRange
		return ret
	}
	return *o.Y
}

// GetYOk returns a tuple with the Y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesAxisRange) GetYOk() (*AxisRange, bool) {
	if o == nil || o.Y == nil {
		return nil, false
	}
	return o.Y, true
}

// HasY returns a boolean if a field has been set.
func (o *SeriesAxisRange) HasY() bool {
	if o != nil && o.Y != nil {
		return true
	}

	return false
}

// SetY gets a reference to the given AxisRange and assigns it to the Y field.
func (o *SeriesAxisRange) SetY(v AxisRange) {
	o.Y = &v
}

func (o SeriesAxisRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.X != nil {
		toSerialize["x"] = o.X
	}
	if o.Y != nil {
		toSerialize["y"] = o.Y
	}
	return json.Marshal(toSerialize)
}

type NullableSeriesAxisRange struct {
	value *SeriesAxisRange
	isSet bool
}

func (v NullableSeriesAxisRange) Get() *SeriesAxisRange {
	return v.value
}

func (v *NullableSeriesAxisRange) Set(val *SeriesAxisRange) {
	v.value = val
	v.isSet = true
}

func (v NullableSeriesAxisRange) IsSet() bool {
	return v.isSet
}

func (v *NullableSeriesAxisRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeriesAxisRange(val *SeriesAxisRange) *NullableSeriesAxisRange {
	return &NullableSeriesAxisRange{value: val, isSet: true}
}

func (v NullableSeriesAxisRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeriesAxisRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


