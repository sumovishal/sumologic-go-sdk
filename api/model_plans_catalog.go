/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlansCatalog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlansCatalog{}

// PlansCatalog Plans available for the account to update.
type PlansCatalog struct {
	// List of plans available.
	Plans []SelfServicePlan `json:"plans"`
}

type _PlansCatalog PlansCatalog

// NewPlansCatalog instantiates a new PlansCatalog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlansCatalog(plans []SelfServicePlan) *PlansCatalog {
	this := PlansCatalog{}
	this.Plans = plans
	return &this
}

// NewPlansCatalogWithDefaults instantiates a new PlansCatalog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlansCatalogWithDefaults() *PlansCatalog {
	this := PlansCatalog{}
	return &this
}

// GetPlans returns the Plans field value
func (o *PlansCatalog) GetPlans() []SelfServicePlan {
	if o == nil {
		var ret []SelfServicePlan
		return ret
	}

	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value
// and a boolean to check if the value has been set.
func (o *PlansCatalog) GetPlansOk() ([]SelfServicePlan, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plans, true
}

// SetPlans sets field value
func (o *PlansCatalog) SetPlans(v []SelfServicePlan) {
	o.Plans = v
}

func (o PlansCatalog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlansCatalog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plans"] = o.Plans
	return toSerialize, nil
}

func (o *PlansCatalog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plans",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlansCatalog := _PlansCatalog{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlansCatalog)

	if err != nil {
		return err
	}

	*o = PlansCatalog(varPlansCatalog)

	return err
}

type NullablePlansCatalog struct {
	value *PlansCatalog
	isSet bool
}

func (v NullablePlansCatalog) Get() *PlansCatalog {
	return v.value
}

func (v *NullablePlansCatalog) Set(val *PlansCatalog) {
	v.value = val
	v.isSet = true
}

func (v NullablePlansCatalog) IsSet() bool {
	return v.isSet
}

func (v *NullablePlansCatalog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlansCatalog(val *PlansCatalog) *NullablePlansCatalog {
	return &NullablePlansCatalog{value: val, isSet: true}
}

func (v NullablePlansCatalog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlansCatalog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


