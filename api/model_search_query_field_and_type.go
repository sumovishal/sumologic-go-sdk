/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the SearchQueryFieldAndType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchQueryFieldAndType{}

// SearchQueryFieldAndType A log field and its associated type
type SearchQueryFieldAndType struct {
	// Log field parsed from log search query.
	FieldName *string `json:"fieldName,omitempty"`
	// The type of the field inferred from log results and explicit configuration. Valid values:   1. `NumericValue`: A field with a numerical type.   2. `DistinctCount`: A field with a dimensional type.
	FieldType *string `json:"fieldType,omitempty"`
	// Indicates if the field is implicit or user defined.
	IsImplicitField *bool `json:"isImplicitField,omitempty"`
}

// NewSearchQueryFieldAndType instantiates a new SearchQueryFieldAndType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchQueryFieldAndType() *SearchQueryFieldAndType {
	this := SearchQueryFieldAndType{}
	return &this
}

// NewSearchQueryFieldAndTypeWithDefaults instantiates a new SearchQueryFieldAndType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchQueryFieldAndTypeWithDefaults() *SearchQueryFieldAndType {
	this := SearchQueryFieldAndType{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *SearchQueryFieldAndType) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchQueryFieldAndType) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *SearchQueryFieldAndType) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *SearchQueryFieldAndType) SetFieldName(v string) {
	o.FieldName = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *SearchQueryFieldAndType) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchQueryFieldAndType) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *SearchQueryFieldAndType) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *SearchQueryFieldAndType) SetFieldType(v string) {
	o.FieldType = &v
}

// GetIsImplicitField returns the IsImplicitField field value if set, zero value otherwise.
func (o *SearchQueryFieldAndType) GetIsImplicitField() bool {
	if o == nil || IsNil(o.IsImplicitField) {
		var ret bool
		return ret
	}
	return *o.IsImplicitField
}

// GetIsImplicitFieldOk returns a tuple with the IsImplicitField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchQueryFieldAndType) GetIsImplicitFieldOk() (*bool, bool) {
	if o == nil || IsNil(o.IsImplicitField) {
		return nil, false
	}
	return o.IsImplicitField, true
}

// HasIsImplicitField returns a boolean if a field has been set.
func (o *SearchQueryFieldAndType) HasIsImplicitField() bool {
	if o != nil && !IsNil(o.IsImplicitField) {
		return true
	}

	return false
}

// SetIsImplicitField gets a reference to the given bool and assigns it to the IsImplicitField field.
func (o *SearchQueryFieldAndType) SetIsImplicitField(v bool) {
	o.IsImplicitField = &v
}

func (o SearchQueryFieldAndType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchQueryFieldAndType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.FieldType) {
		toSerialize["fieldType"] = o.FieldType
	}
	if !IsNil(o.IsImplicitField) {
		toSerialize["isImplicitField"] = o.IsImplicitField
	}
	return toSerialize, nil
}

type NullableSearchQueryFieldAndType struct {
	value *SearchQueryFieldAndType
	isSet bool
}

func (v NullableSearchQueryFieldAndType) Get() *SearchQueryFieldAndType {
	return v.value
}

func (v *NullableSearchQueryFieldAndType) Set(val *SearchQueryFieldAndType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchQueryFieldAndType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchQueryFieldAndType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchQueryFieldAndType(val *SearchQueryFieldAndType) *NullableSearchQueryFieldAndType {
	return &NullableSearchQueryFieldAndType{value: val, isSet: true}
}

func (v NullableSearchQueryFieldAndType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchQueryFieldAndType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


