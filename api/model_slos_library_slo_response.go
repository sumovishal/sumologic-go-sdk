/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SlosLibrarySloResponse struct for SlosLibrarySloResponse
type SlosLibrarySloResponse struct {
	SlosLibraryBaseResponse
	// Type of SLI Signal (latency, error, throughput, availability or other).
	SignalType string `json:"signalType"`
	Compliance Compliance `json:"compliance"`
	Indicator Sli `json:"indicator"`
	// Name of the service.
	Service *string `json:"service,omitempty"`
	// Name of the application.
	Application *string `json:"application,omitempty"`
	// Current SLO Version. This is incremented on every change of a critical field of the SLO (i.e, SLI or Compliance period timezone), that requires a recompute of the SLI values over the compliance period.
	SloVersion *int64 `json:"sloVersion,omitempty"`
}

// NewSlosLibrarySloResponse instantiates a new SlosLibrarySloResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlosLibrarySloResponse(signalType string, compliance Compliance, indicator Sli, id string, name string, description string, version int64, createdAt time.Time, createdBy string, modifiedAt time.Time, modifiedBy string, parentId string, contentType string, type_ string, isSystem bool, isMutable bool) *SlosLibrarySloResponse {
	this := SlosLibrarySloResponse{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Version = version
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.ParentId = parentId
	this.ContentType = contentType
	this.Type = type_
	this.IsSystem = isSystem
	this.IsMutable = isMutable
	this.SignalType = signalType
	this.Compliance = compliance
	this.Indicator = indicator
	return &this
}

// NewSlosLibrarySloResponseWithDefaults instantiates a new SlosLibrarySloResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlosLibrarySloResponseWithDefaults() *SlosLibrarySloResponse {
	this := SlosLibrarySloResponse{}
	return &this
}

// GetSignalType returns the SignalType field value
func (o *SlosLibrarySloResponse) GetSignalType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignalType
}

// GetSignalTypeOk returns a tuple with the SignalType field value
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponse) GetSignalTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignalType, true
}

// SetSignalType sets field value
func (o *SlosLibrarySloResponse) SetSignalType(v string) {
	o.SignalType = v
}

// GetCompliance returns the Compliance field value
func (o *SlosLibrarySloResponse) GetCompliance() Compliance {
	if o == nil {
		var ret Compliance
		return ret
	}

	return o.Compliance
}

// GetComplianceOk returns a tuple with the Compliance field value
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponse) GetComplianceOk() (*Compliance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compliance, true
}

// SetCompliance sets field value
func (o *SlosLibrarySloResponse) SetCompliance(v Compliance) {
	o.Compliance = v
}

// GetIndicator returns the Indicator field value
func (o *SlosLibrarySloResponse) GetIndicator() Sli {
	if o == nil {
		var ret Sli
		return ret
	}

	return o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponse) GetIndicatorOk() (*Sli, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Indicator, true
}

// SetIndicator sets field value
func (o *SlosLibrarySloResponse) SetIndicator(v Sli) {
	o.Indicator = v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *SlosLibrarySloResponse) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponse) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *SlosLibrarySloResponse) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *SlosLibrarySloResponse) SetService(v string) {
	o.Service = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *SlosLibrarySloResponse) GetApplication() string {
	if o == nil || o.Application == nil {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponse) GetApplicationOk() (*string, bool) {
	if o == nil || o.Application == nil {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *SlosLibrarySloResponse) HasApplication() bool {
	if o != nil && o.Application != nil {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *SlosLibrarySloResponse) SetApplication(v string) {
	o.Application = &v
}

// GetSloVersion returns the SloVersion field value if set, zero value otherwise.
func (o *SlosLibrarySloResponse) GetSloVersion() int64 {
	if o == nil || o.SloVersion == nil {
		var ret int64
		return ret
	}
	return *o.SloVersion
}

// GetSloVersionOk returns a tuple with the SloVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponse) GetSloVersionOk() (*int64, bool) {
	if o == nil || o.SloVersion == nil {
		return nil, false
	}
	return o.SloVersion, true
}

// HasSloVersion returns a boolean if a field has been set.
func (o *SlosLibrarySloResponse) HasSloVersion() bool {
	if o != nil && o.SloVersion != nil {
		return true
	}

	return false
}

// SetSloVersion gets a reference to the given int64 and assigns it to the SloVersion field.
func (o *SlosLibrarySloResponse) SetSloVersion(v int64) {
	o.SloVersion = &v
}

func (o SlosLibrarySloResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedSlosLibraryBaseResponse, errSlosLibraryBaseResponse := json.Marshal(o.SlosLibraryBaseResponse)
	if errSlosLibraryBaseResponse != nil {
		return []byte{}, errSlosLibraryBaseResponse
	}
	errSlosLibraryBaseResponse = json.Unmarshal([]byte(serializedSlosLibraryBaseResponse), &toSerialize)
	if errSlosLibraryBaseResponse != nil {
		return []byte{}, errSlosLibraryBaseResponse
	}
	if true {
		toSerialize["signalType"] = o.SignalType
	}
	if true {
		toSerialize["compliance"] = o.Compliance
	}
	if true {
		toSerialize["indicator"] = o.Indicator
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Application != nil {
		toSerialize["application"] = o.Application
	}
	if o.SloVersion != nil {
		toSerialize["sloVersion"] = o.SloVersion
	}
	return json.Marshal(toSerialize)
}

type NullableSlosLibrarySloResponse struct {
	value *SlosLibrarySloResponse
	isSet bool
}

func (v NullableSlosLibrarySloResponse) Get() *SlosLibrarySloResponse {
	return v.value
}

func (v *NullableSlosLibrarySloResponse) Set(val *SlosLibrarySloResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSlosLibrarySloResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSlosLibrarySloResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlosLibrarySloResponse(val *SlosLibrarySloResponse) *NullableSlosLibrarySloResponse {
	return &NullableSlosLibrarySloResponse{value: val, isSet: true}
}

func (v NullableSlosLibrarySloResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlosLibrarySloResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


