/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Variable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Variable{}

// Variable struct for Variable
type Variable struct {
	// Unique identifier for the variable.
	Id *string `json:"id,omitempty"`
	// Name of the variable. The variable name is case-insensitive.
	Name string `json:"name"`
	// Display name of the variable shown in the UI. If this field is empty, the name field will be used. The display name is case-insensitive. Only numbers, and underscores are allowed in the variable name. This field is not yet supported by the UI. 
	DisplayName *string `json:"displayName,omitempty"`
	// Default value of the variable.
	DefaultValue *string `json:"defaultValue,omitempty"`
	SourceDefinition VariableSourceDefinition `json:"sourceDefinition"`
	// Allow multiple selections in the values dropdown.
	AllowMultiSelect *bool `json:"allowMultiSelect,omitempty"`
	// Include an \"All\" option at the top of the variable's values dropdown.
	IncludeAllOption *bool `json:"includeAllOption,omitempty"`
	// Hide the variable in the dashboard UI.
	HideFromUI *bool `json:"hideFromUI,omitempty"`
	// The type of value of the variable. Allowed values are `String`, Any` and `Numeric`. - `String` considers as a single phrase and will wrap in double-quotes. - `Any` is all characters. - `Numeric` consists of a numeric value for variables, it will be displayed differently in the UI. - `Integer` is a variable with an `Int` value. - `Long` is a variable with a `Long` value. - `Double` is a variable with a `Double` value. - `Boolean` is a variable with a `Boolean` value. 
	ValueType *string `json:"valueType,omitempty"`
}

type _Variable Variable

// NewVariable instantiates a new Variable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariable(name string, sourceDefinition VariableSourceDefinition) *Variable {
	this := Variable{}
	this.Name = name
	this.SourceDefinition = sourceDefinition
	var allowMultiSelect bool = false
	this.AllowMultiSelect = &allowMultiSelect
	var includeAllOption bool = true
	this.IncludeAllOption = &includeAllOption
	var hideFromUI bool = false
	this.HideFromUI = &hideFromUI
	var valueType string = "Any"
	this.ValueType = &valueType
	return &this
}

// NewVariableWithDefaults instantiates a new Variable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableWithDefaults() *Variable {
	this := Variable{}
	var allowMultiSelect bool = false
	this.AllowMultiSelect = &allowMultiSelect
	var includeAllOption bool = true
	this.IncludeAllOption = &includeAllOption
	var hideFromUI bool = false
	this.HideFromUI = &hideFromUI
	var valueType string = "Any"
	this.ValueType = &valueType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Variable) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Variable) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Variable) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Variable) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Variable) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Variable) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Variable) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Variable) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Variable) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *Variable) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *Variable) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *Variable) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetSourceDefinition returns the SourceDefinition field value
func (o *Variable) GetSourceDefinition() VariableSourceDefinition {
	if o == nil {
		var ret VariableSourceDefinition
		return ret
	}

	return o.SourceDefinition
}

// GetSourceDefinitionOk returns a tuple with the SourceDefinition field value
// and a boolean to check if the value has been set.
func (o *Variable) GetSourceDefinitionOk() (*VariableSourceDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceDefinition, true
}

// SetSourceDefinition sets field value
func (o *Variable) SetSourceDefinition(v VariableSourceDefinition) {
	o.SourceDefinition = v
}

// GetAllowMultiSelect returns the AllowMultiSelect field value if set, zero value otherwise.
func (o *Variable) GetAllowMultiSelect() bool {
	if o == nil || IsNil(o.AllowMultiSelect) {
		var ret bool
		return ret
	}
	return *o.AllowMultiSelect
}

// GetAllowMultiSelectOk returns a tuple with the AllowMultiSelect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetAllowMultiSelectOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMultiSelect) {
		return nil, false
	}
	return o.AllowMultiSelect, true
}

// HasAllowMultiSelect returns a boolean if a field has been set.
func (o *Variable) HasAllowMultiSelect() bool {
	if o != nil && !IsNil(o.AllowMultiSelect) {
		return true
	}

	return false
}

// SetAllowMultiSelect gets a reference to the given bool and assigns it to the AllowMultiSelect field.
func (o *Variable) SetAllowMultiSelect(v bool) {
	o.AllowMultiSelect = &v
}

// GetIncludeAllOption returns the IncludeAllOption field value if set, zero value otherwise.
func (o *Variable) GetIncludeAllOption() bool {
	if o == nil || IsNil(o.IncludeAllOption) {
		var ret bool
		return ret
	}
	return *o.IncludeAllOption
}

// GetIncludeAllOptionOk returns a tuple with the IncludeAllOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetIncludeAllOptionOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeAllOption) {
		return nil, false
	}
	return o.IncludeAllOption, true
}

// HasIncludeAllOption returns a boolean if a field has been set.
func (o *Variable) HasIncludeAllOption() bool {
	if o != nil && !IsNil(o.IncludeAllOption) {
		return true
	}

	return false
}

// SetIncludeAllOption gets a reference to the given bool and assigns it to the IncludeAllOption field.
func (o *Variable) SetIncludeAllOption(v bool) {
	o.IncludeAllOption = &v
}

// GetHideFromUI returns the HideFromUI field value if set, zero value otherwise.
func (o *Variable) GetHideFromUI() bool {
	if o == nil || IsNil(o.HideFromUI) {
		var ret bool
		return ret
	}
	return *o.HideFromUI
}

// GetHideFromUIOk returns a tuple with the HideFromUI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetHideFromUIOk() (*bool, bool) {
	if o == nil || IsNil(o.HideFromUI) {
		return nil, false
	}
	return o.HideFromUI, true
}

// HasHideFromUI returns a boolean if a field has been set.
func (o *Variable) HasHideFromUI() bool {
	if o != nil && !IsNil(o.HideFromUI) {
		return true
	}

	return false
}

// SetHideFromUI gets a reference to the given bool and assigns it to the HideFromUI field.
func (o *Variable) SetHideFromUI(v bool) {
	o.HideFromUI = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *Variable) GetValueType() string {
	if o == nil || IsNil(o.ValueType) {
		var ret string
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetValueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *Variable) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given string and assigns it to the ValueType field.
func (o *Variable) SetValueType(v string) {
	o.ValueType = &v
}

func (o Variable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Variable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	toSerialize["sourceDefinition"] = o.SourceDefinition
	if !IsNil(o.AllowMultiSelect) {
		toSerialize["allowMultiSelect"] = o.AllowMultiSelect
	}
	if !IsNil(o.IncludeAllOption) {
		toSerialize["includeAllOption"] = o.IncludeAllOption
	}
	if !IsNil(o.HideFromUI) {
		toSerialize["hideFromUI"] = o.HideFromUI
	}
	if !IsNil(o.ValueType) {
		toSerialize["valueType"] = o.ValueType
	}
	return toSerialize, nil
}

func (o *Variable) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"sourceDefinition",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVariable := _Variable{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVariable)

	if err != nil {
		return err
	}

	*o = Variable(varVariable)

	return err
}

type NullableVariable struct {
	value *Variable
	isSet bool
}

func (v NullableVariable) Get() *Variable {
	return v.value
}

func (v *NullableVariable) Set(val *Variable) {
	v.value = val
	v.isSet = true
}

func (v NullableVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariable(val *Variable) *NullableVariable {
	return &NullableVariable{value: val, isSet: true}
}

func (v NullableVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


