/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the App type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &App{}

// App struct for App
type App struct {
	AppDefinition AppDefinition `json:"appDefinition"`
	AppManifest AppManifest `json:"appManifest"`
}

type _App App

// NewApp instantiates a new App object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApp(appDefinition AppDefinition, appManifest AppManifest) *App {
	this := App{}
	this.AppDefinition = appDefinition
	this.AppManifest = appManifest
	return &this
}

// NewAppWithDefaults instantiates a new App object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWithDefaults() *App {
	this := App{}
	return &this
}

// GetAppDefinition returns the AppDefinition field value
func (o *App) GetAppDefinition() AppDefinition {
	if o == nil {
		var ret AppDefinition
		return ret
	}

	return o.AppDefinition
}

// GetAppDefinitionOk returns a tuple with the AppDefinition field value
// and a boolean to check if the value has been set.
func (o *App) GetAppDefinitionOk() (*AppDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppDefinition, true
}

// SetAppDefinition sets field value
func (o *App) SetAppDefinition(v AppDefinition) {
	o.AppDefinition = v
}

// GetAppManifest returns the AppManifest field value
func (o *App) GetAppManifest() AppManifest {
	if o == nil {
		var ret AppManifest
		return ret
	}

	return o.AppManifest
}

// GetAppManifestOk returns a tuple with the AppManifest field value
// and a boolean to check if the value has been set.
func (o *App) GetAppManifestOk() (*AppManifest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppManifest, true
}

// SetAppManifest sets field value
func (o *App) SetAppManifest(v AppManifest) {
	o.AppManifest = v
}

func (o App) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o App) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appDefinition"] = o.AppDefinition
	toSerialize["appManifest"] = o.AppManifest
	return toSerialize, nil
}

func (o *App) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appDefinition",
		"appManifest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApp := _App{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApp)

	if err != nil {
		return err
	}

	*o = App(varApp)

	return err
}

type NullableApp struct {
	value *App
	isSet bool
}

func (v NullableApp) Get() *App {
	return v.value
}

func (v *NullableApp) Set(val *App) {
	v.value = val
	v.isSet = true
}

func (v NullableApp) IsSet() bool {
	return v.isSet
}

func (v *NullableApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApp(val *App) *NullableApp {
	return &NullableApp{value: val, isSet: true}
}

func (v NullableApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


