/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// Points The `values` and `timestamps` are of the same length, and points are sorted by time ascending.
type Points struct {
	// Array of timestamps of datapoints in milliseconds.
	Timestamps []int64 `json:"timestamps"`
	// Array of values of datapoints corresponding to timestamp array.
	Values []float64 `json:"values"`
}

// NewPoints instantiates a new Points object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoints(timestamps []int64, values []float64) *Points {
	this := Points{}
	this.Timestamps = timestamps
	this.Values = values
	return &this
}

// NewPointsWithDefaults instantiates a new Points object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointsWithDefaults() *Points {
	this := Points{}
	return &this
}

// GetTimestamps returns the Timestamps field value
func (o *Points) GetTimestamps() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.Timestamps
}

// GetTimestampsOk returns a tuple with the Timestamps field value
// and a boolean to check if the value has been set.
func (o *Points) GetTimestampsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamps, true
}

// SetTimestamps sets field value
func (o *Points) SetTimestamps(v []int64) {
	o.Timestamps = v
}

// GetValues returns the Values field value
func (o *Points) GetValues() []float64 {
	if o == nil {
		var ret []float64
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *Points) GetValuesOk() ([]float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *Points) SetValues(v []float64) {
	o.Values = v
}

func (o Points) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timestamps"] = o.Timestamps
	}
	if true {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullablePoints struct {
	value *Points
	isSet bool
}

func (v NullablePoints) Get() *Points {
	return v.value
}

func (v *NullablePoints) Set(val *Points) {
	v.value = val
	v.isSet = true
}

func (v NullablePoints) IsSet() bool {
	return v.isSet
}

func (v *NullablePoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoints(val *Points) *NullablePoints {
	return &NullablePoints{value: val, isSet: true}
}

func (v NullablePoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


