/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BurnRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BurnRate{}

// BurnRate Object containing error budget depletion and alert time range.
type BurnRate struct {
	// The error budget depletion percentage.
	BurnRateThreshold float64 `json:"burnRateThreshold"`
	// The relative time range for measuring error budget depletion.
	TimeRange string `json:"timeRange"`
}

// NewBurnRate instantiates a new BurnRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBurnRate(burnRateThreshold float64, timeRange string) *BurnRate {
	this := BurnRate{}
	this.BurnRateThreshold = burnRateThreshold
	this.TimeRange = timeRange
	return &this
}

// NewBurnRateWithDefaults instantiates a new BurnRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBurnRateWithDefaults() *BurnRate {
	this := BurnRate{}
	return &this
}

// GetBurnRateThreshold returns the BurnRateThreshold field value
func (o *BurnRate) GetBurnRateThreshold() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.BurnRateThreshold
}

// GetBurnRateThresholdOk returns a tuple with the BurnRateThreshold field value
// and a boolean to check if the value has been set.
func (o *BurnRate) GetBurnRateThresholdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BurnRateThreshold, true
}

// SetBurnRateThreshold sets field value
func (o *BurnRate) SetBurnRateThreshold(v float64) {
	o.BurnRateThreshold = v
}

// GetTimeRange returns the TimeRange field value
func (o *BurnRate) GetTimeRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *BurnRate) GetTimeRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *BurnRate) SetTimeRange(v string) {
	o.TimeRange = v
}

func (o BurnRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BurnRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["burnRateThreshold"] = o.BurnRateThreshold
	toSerialize["timeRange"] = o.TimeRange
	return toSerialize, nil
}

type NullableBurnRate struct {
	value *BurnRate
	isSet bool
}

func (v NullableBurnRate) Get() *BurnRate {
	return v.value
}

func (v *NullableBurnRate) Set(val *BurnRate) {
	v.value = val
	v.isSet = true
}

func (v NullableBurnRate) IsSet() bool {
	return v.isSet
}

func (v *NullableBurnRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBurnRate(val *BurnRate) *NullableBurnRate {
	return &NullableBurnRate{value: val, isSet: true}
}

func (v NullableBurnRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBurnRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


