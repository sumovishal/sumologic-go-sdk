/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the MetricsQueryResultContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsQueryResultContext{}

// MetricsQueryResultContext struct for MetricsQueryResultContext
type MetricsQueryResultContext struct {
	// Quantization granularity. Size of the quantization bucket/quant in milliseconds.
	QuantizationGranularity *int64 `json:"quantizationGranularity,omitempty"`
	// We use the term rollup to refer to the aggregation function Sumo Logic uses when quantizing metrics. Can be `Avg`, `Sum`, `Min`, `Max`, `Count` or `Rate`.
	Rollup *string `json:"rollup,omitempty" validate:"regexp=^(Avg|Sum|Min|Max|Count|Rate)$|^$"`
	ActualQueryTimeRange *Iso8601TimeRange `json:"actualQueryTimeRange,omitempty"`
}

// NewMetricsQueryResultContext instantiates a new MetricsQueryResultContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsQueryResultContext() *MetricsQueryResultContext {
	this := MetricsQueryResultContext{}
	return &this
}

// NewMetricsQueryResultContextWithDefaults instantiates a new MetricsQueryResultContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsQueryResultContextWithDefaults() *MetricsQueryResultContext {
	this := MetricsQueryResultContext{}
	return &this
}

// GetQuantizationGranularity returns the QuantizationGranularity field value if set, zero value otherwise.
func (o *MetricsQueryResultContext) GetQuantizationGranularity() int64 {
	if o == nil || IsNil(o.QuantizationGranularity) {
		var ret int64
		return ret
	}
	return *o.QuantizationGranularity
}

// GetQuantizationGranularityOk returns a tuple with the QuantizationGranularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsQueryResultContext) GetQuantizationGranularityOk() (*int64, bool) {
	if o == nil || IsNil(o.QuantizationGranularity) {
		return nil, false
	}
	return o.QuantizationGranularity, true
}

// HasQuantizationGranularity returns a boolean if a field has been set.
func (o *MetricsQueryResultContext) HasQuantizationGranularity() bool {
	if o != nil && !IsNil(o.QuantizationGranularity) {
		return true
	}

	return false
}

// SetQuantizationGranularity gets a reference to the given int64 and assigns it to the QuantizationGranularity field.
func (o *MetricsQueryResultContext) SetQuantizationGranularity(v int64) {
	o.QuantizationGranularity = &v
}

// GetRollup returns the Rollup field value if set, zero value otherwise.
func (o *MetricsQueryResultContext) GetRollup() string {
	if o == nil || IsNil(o.Rollup) {
		var ret string
		return ret
	}
	return *o.Rollup
}

// GetRollupOk returns a tuple with the Rollup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsQueryResultContext) GetRollupOk() (*string, bool) {
	if o == nil || IsNil(o.Rollup) {
		return nil, false
	}
	return o.Rollup, true
}

// HasRollup returns a boolean if a field has been set.
func (o *MetricsQueryResultContext) HasRollup() bool {
	if o != nil && !IsNil(o.Rollup) {
		return true
	}

	return false
}

// SetRollup gets a reference to the given string and assigns it to the Rollup field.
func (o *MetricsQueryResultContext) SetRollup(v string) {
	o.Rollup = &v
}

// GetActualQueryTimeRange returns the ActualQueryTimeRange field value if set, zero value otherwise.
func (o *MetricsQueryResultContext) GetActualQueryTimeRange() Iso8601TimeRange {
	if o == nil || IsNil(o.ActualQueryTimeRange) {
		var ret Iso8601TimeRange
		return ret
	}
	return *o.ActualQueryTimeRange
}

// GetActualQueryTimeRangeOk returns a tuple with the ActualQueryTimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsQueryResultContext) GetActualQueryTimeRangeOk() (*Iso8601TimeRange, bool) {
	if o == nil || IsNil(o.ActualQueryTimeRange) {
		return nil, false
	}
	return o.ActualQueryTimeRange, true
}

// HasActualQueryTimeRange returns a boolean if a field has been set.
func (o *MetricsQueryResultContext) HasActualQueryTimeRange() bool {
	if o != nil && !IsNil(o.ActualQueryTimeRange) {
		return true
	}

	return false
}

// SetActualQueryTimeRange gets a reference to the given Iso8601TimeRange and assigns it to the ActualQueryTimeRange field.
func (o *MetricsQueryResultContext) SetActualQueryTimeRange(v Iso8601TimeRange) {
	o.ActualQueryTimeRange = &v
}

func (o MetricsQueryResultContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsQueryResultContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QuantizationGranularity) {
		toSerialize["quantizationGranularity"] = o.QuantizationGranularity
	}
	if !IsNil(o.Rollup) {
		toSerialize["rollup"] = o.Rollup
	}
	if !IsNil(o.ActualQueryTimeRange) {
		toSerialize["actualQueryTimeRange"] = o.ActualQueryTimeRange
	}
	return toSerialize, nil
}

type NullableMetricsQueryResultContext struct {
	value *MetricsQueryResultContext
	isSet bool
}

func (v NullableMetricsQueryResultContext) Get() *MetricsQueryResultContext {
	return v.value
}

func (v *NullableMetricsQueryResultContext) Set(val *MetricsQueryResultContext) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsQueryResultContext) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsQueryResultContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsQueryResultContext(val *MetricsQueryResultContext) *NullableMetricsQueryResultContext {
	return &NullableMetricsQueryResultContext{value: val, isSet: true}
}

func (v NullableMetricsQueryResultContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsQueryResultContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


