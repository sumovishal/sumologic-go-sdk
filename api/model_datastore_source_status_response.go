/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the DatastoreSourceStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreSourceStatusResponse{}

// DatastoreSourceStatusResponse DB sizes and indicator counts for an individual source
type DatastoreSourceStatusResponse struct {
	// The indicator source
	Source string `json:"source"`
	// Disk utilization in bytes estimate for the indicator source
	DiskSize int64 `json:"diskSize"`
	// Number of indicators for the indicator source
	IndicatorCount int64 `json:"indicatorCount"`
}

// NewDatastoreSourceStatusResponse instantiates a new DatastoreSourceStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreSourceStatusResponse(source string, diskSize int64, indicatorCount int64) *DatastoreSourceStatusResponse {
	this := DatastoreSourceStatusResponse{}
	this.Source = source
	this.DiskSize = diskSize
	this.IndicatorCount = indicatorCount
	return &this
}

// NewDatastoreSourceStatusResponseWithDefaults instantiates a new DatastoreSourceStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreSourceStatusResponseWithDefaults() *DatastoreSourceStatusResponse {
	this := DatastoreSourceStatusResponse{}
	return &this
}

// GetSource returns the Source field value
func (o *DatastoreSourceStatusResponse) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *DatastoreSourceStatusResponse) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *DatastoreSourceStatusResponse) SetSource(v string) {
	o.Source = v
}

// GetDiskSize returns the DiskSize field value
func (o *DatastoreSourceStatusResponse) GetDiskSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DiskSize
}

// GetDiskSizeOk returns a tuple with the DiskSize field value
// and a boolean to check if the value has been set.
func (o *DatastoreSourceStatusResponse) GetDiskSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSize, true
}

// SetDiskSize sets field value
func (o *DatastoreSourceStatusResponse) SetDiskSize(v int64) {
	o.DiskSize = v
}

// GetIndicatorCount returns the IndicatorCount field value
func (o *DatastoreSourceStatusResponse) GetIndicatorCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IndicatorCount
}

// GetIndicatorCountOk returns a tuple with the IndicatorCount field value
// and a boolean to check if the value has been set.
func (o *DatastoreSourceStatusResponse) GetIndicatorCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndicatorCount, true
}

// SetIndicatorCount sets field value
func (o *DatastoreSourceStatusResponse) SetIndicatorCount(v int64) {
	o.IndicatorCount = v
}

func (o DatastoreSourceStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreSourceStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["diskSize"] = o.DiskSize
	toSerialize["indicatorCount"] = o.IndicatorCount
	return toSerialize, nil
}

type NullableDatastoreSourceStatusResponse struct {
	value *DatastoreSourceStatusResponse
	isSet bool
}

func (v NullableDatastoreSourceStatusResponse) Get() *DatastoreSourceStatusResponse {
	return v.value
}

func (v *NullableDatastoreSourceStatusResponse) Set(val *DatastoreSourceStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreSourceStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreSourceStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreSourceStatusResponse(val *DatastoreSourceStatusResponse) *NullableDatastoreSourceStatusResponse {
	return &NullableDatastoreSourceStatusResponse{value: val, isSet: true}
}

func (v NullableDatastoreSourceStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreSourceStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


