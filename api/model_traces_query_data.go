/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// TracesQueryData The data format describing a basic traces query.
type TracesQueryData struct {
	// A list of filters for the traces query.
	Filters []TracesFilter `json:"filters"`
}

// NewTracesQueryData instantiates a new TracesQueryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracesQueryData(filters []TracesFilter) *TracesQueryData {
	this := TracesQueryData{}
	this.Filters = filters
	return &this
}

// NewTracesQueryDataWithDefaults instantiates a new TracesQueryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracesQueryDataWithDefaults() *TracesQueryData {
	this := TracesQueryData{}
	return &this
}

// GetFilters returns the Filters field value
func (o *TracesQueryData) GetFilters() []TracesFilter {
	if o == nil {
		var ret []TracesFilter
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *TracesQueryData) GetFiltersOk() ([]TracesFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *TracesQueryData) SetFilters(v []TracesFilter) {
	o.Filters = v
}

func (o TracesQueryData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["filters"] = o.Filters
	}
	return json.Marshal(toSerialize)
}

type NullableTracesQueryData struct {
	value *TracesQueryData
	isSet bool
}

func (v NullableTracesQueryData) Get() *TracesQueryData {
	return v.value
}

func (v *NullableTracesQueryData) Set(val *TracesQueryData) {
	v.value = val
	v.isSet = true
}

func (v NullableTracesQueryData) IsSet() bool {
	return v.isSet
}

func (v *NullableTracesQueryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracesQueryData(val *TracesQueryData) *NullableTracesQueryData {
	return &NullableTracesQueryData{value: val, isSet: true}
}

func (v NullableTracesQueryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracesQueryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


