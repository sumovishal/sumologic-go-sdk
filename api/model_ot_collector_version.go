/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OTCollectorVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OTCollectorVersion{}

// OTCollectorVersion Version information of the OT Collector.
type OTCollectorVersion struct {
	// Current version of the OT Collector.
	CurrentVersion string `json:"currentVersion"`
}

type _OTCollectorVersion OTCollectorVersion

// NewOTCollectorVersion instantiates a new OTCollectorVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOTCollectorVersion(currentVersion string) *OTCollectorVersion {
	this := OTCollectorVersion{}
	this.CurrentVersion = currentVersion
	return &this
}

// NewOTCollectorVersionWithDefaults instantiates a new OTCollectorVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOTCollectorVersionWithDefaults() *OTCollectorVersion {
	this := OTCollectorVersion{}
	return &this
}

// GetCurrentVersion returns the CurrentVersion field value
func (o *OTCollectorVersion) GetCurrentVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value
// and a boolean to check if the value has been set.
func (o *OTCollectorVersion) GetCurrentVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentVersion, true
}

// SetCurrentVersion sets field value
func (o *OTCollectorVersion) SetCurrentVersion(v string) {
	o.CurrentVersion = v
}

func (o OTCollectorVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OTCollectorVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currentVersion"] = o.CurrentVersion
	return toSerialize, nil
}

func (o *OTCollectorVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currentVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOTCollectorVersion := _OTCollectorVersion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOTCollectorVersion)

	if err != nil {
		return err
	}

	*o = OTCollectorVersion(varOTCollectorVersion)

	return err
}

type NullableOTCollectorVersion struct {
	value *OTCollectorVersion
	isSet bool
}

func (v NullableOTCollectorVersion) Get() *OTCollectorVersion {
	return v.value
}

func (v *NullableOTCollectorVersion) Set(val *OTCollectorVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableOTCollectorVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableOTCollectorVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOTCollectorVersion(val *OTCollectorVersion) *NullableOTCollectorVersion {
	return &NullableOTCollectorVersion{value: val, isSet: true}
}

func (v NullableOTCollectorVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOTCollectorVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


