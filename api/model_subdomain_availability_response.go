/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the SubdomainAvailabilityResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubdomainAvailabilityResponse{}

// SubdomainAvailabilityResponse struct for SubdomainAvailabilityResponse
type SubdomainAvailabilityResponse struct {
	// Subdomain is available for use or not.
	IsAvailable bool `json:"isAvailable"`
}

// NewSubdomainAvailabilityResponse instantiates a new SubdomainAvailabilityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubdomainAvailabilityResponse(isAvailable bool) *SubdomainAvailabilityResponse {
	this := SubdomainAvailabilityResponse{}
	this.IsAvailable = isAvailable
	return &this
}

// NewSubdomainAvailabilityResponseWithDefaults instantiates a new SubdomainAvailabilityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubdomainAvailabilityResponseWithDefaults() *SubdomainAvailabilityResponse {
	this := SubdomainAvailabilityResponse{}
	return &this
}

// GetIsAvailable returns the IsAvailable field value
func (o *SubdomainAvailabilityResponse) GetIsAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAvailable
}

// GetIsAvailableOk returns a tuple with the IsAvailable field value
// and a boolean to check if the value has been set.
func (o *SubdomainAvailabilityResponse) GetIsAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAvailable, true
}

// SetIsAvailable sets field value
func (o *SubdomainAvailabilityResponse) SetIsAvailable(v bool) {
	o.IsAvailable = v
}

func (o SubdomainAvailabilityResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubdomainAvailabilityResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isAvailable"] = o.IsAvailable
	return toSerialize, nil
}

type NullableSubdomainAvailabilityResponse struct {
	value *SubdomainAvailabilityResponse
	isSet bool
}

func (v NullableSubdomainAvailabilityResponse) Get() *SubdomainAvailabilityResponse {
	return v.value
}

func (v *NullableSubdomainAvailabilityResponse) Set(val *SubdomainAvailabilityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubdomainAvailabilityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubdomainAvailabilityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubdomainAvailabilityResponse(val *SubdomainAvailabilityResponse) *NullableSubdomainAvailabilityResponse {
	return &NullableSubdomainAvailabilityResponse{value: val, isSet: true}
}

func (v NullableSubdomainAvailabilityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubdomainAvailabilityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


