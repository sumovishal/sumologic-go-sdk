/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the ExternalReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalReference{}

// ExternalReference struct for ExternalReference
type ExternalReference struct {
	// The name of the source that the external-reference is defined within
	SourceName string `json:"source_name"`
	// A human readable description
	Description *string `json:"description,omitempty"`
	// A URL reference to an external resource
	Url *string `json:"url,omitempty"`
	// Specifies a dictionary of hashes for the contents of the url
	Hashes *map[string]string `json:"hashes,omitempty"`
	// An identifier for the external reference content
	ExternalId *string `json:"external_id,omitempty"`
}

// NewExternalReference instantiates a new ExternalReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalReference(sourceName string) *ExternalReference {
	this := ExternalReference{}
	this.SourceName = sourceName
	return &this
}

// NewExternalReferenceWithDefaults instantiates a new ExternalReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalReferenceWithDefaults() *ExternalReference {
	this := ExternalReference{}
	return &this
}

// GetSourceName returns the SourceName field value
func (o *ExternalReference) GetSourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value
// and a boolean to check if the value has been set.
func (o *ExternalReference) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceName, true
}

// SetSourceName sets field value
func (o *ExternalReference) SetSourceName(v string) {
	o.SourceName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExternalReference) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalReference) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExternalReference) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExternalReference) SetDescription(v string) {
	o.Description = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ExternalReference) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalReference) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ExternalReference) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ExternalReference) SetUrl(v string) {
	o.Url = &v
}

// GetHashes returns the Hashes field value if set, zero value otherwise.
func (o *ExternalReference) GetHashes() map[string]string {
	if o == nil || IsNil(o.Hashes) {
		var ret map[string]string
		return ret
	}
	return *o.Hashes
}

// GetHashesOk returns a tuple with the Hashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalReference) GetHashesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Hashes) {
		return nil, false
	}
	return o.Hashes, true
}

// HasHashes returns a boolean if a field has been set.
func (o *ExternalReference) HasHashes() bool {
	if o != nil && !IsNil(o.Hashes) {
		return true
	}

	return false
}

// SetHashes gets a reference to the given map[string]string and assigns it to the Hashes field.
func (o *ExternalReference) SetHashes(v map[string]string) {
	o.Hashes = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *ExternalReference) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalReference) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *ExternalReference) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *ExternalReference) SetExternalId(v string) {
	o.ExternalId = &v
}

func (o ExternalReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_name"] = o.SourceName
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Hashes) {
		toSerialize["hashes"] = o.Hashes
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	return toSerialize, nil
}

type NullableExternalReference struct {
	value *ExternalReference
	isSet bool
}

func (v NullableExternalReference) Get() *ExternalReference {
	return v.value
}

func (v *NullableExternalReference) Set(val *ExternalReference) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalReference) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalReference(val *ExternalReference) *NullableExternalReference {
	return &NullableExternalReference{value: val, isSet: true}
}

func (v NullableExternalReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


