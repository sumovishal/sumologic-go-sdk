/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// ContentList struct for ContentList
type ContentList struct {
	// A list of the content items.
	Data []Content `json:"data"`
}

// NewContentList instantiates a new ContentList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentList(data []Content) *ContentList {
	this := ContentList{}
	this.Data = data
	return &this
}

// NewContentListWithDefaults instantiates a new ContentList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentListWithDefaults() *ContentList {
	this := ContentList{}
	return &this
}

// GetData returns the Data field value
func (o *ContentList) GetData() []Content {
	if o == nil {
		var ret []Content
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ContentList) GetDataOk() ([]Content, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ContentList) SetData(v []Content) {
	o.Data = v
}

func (o ContentList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableContentList struct {
	value *ContentList
	isSet bool
}

func (v NullableContentList) Get() *ContentList {
	return v.value
}

func (v *NullableContentList) Set(val *ContentList) {
	v.value = val
	v.isSet = true
}

func (v NullableContentList) IsSet() bool {
	return v.isSet
}

func (v *NullableContentList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentList(val *ContentList) *NullableContentList {
	return &NullableContentList{value: val, isSet: true}
}

func (v NullableContentList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


