/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogSearchQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogSearchQuery{}

// LogSearchQuery Query for which to get log fields.
type LogSearchQuery struct {
	// Query string for which to get log fields.
	QueryString string `json:"queryString"`
}

type _LogSearchQuery LogSearchQuery

// NewLogSearchQuery instantiates a new LogSearchQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogSearchQuery(queryString string) *LogSearchQuery {
	this := LogSearchQuery{}
	this.QueryString = queryString
	return &this
}

// NewLogSearchQueryWithDefaults instantiates a new LogSearchQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogSearchQueryWithDefaults() *LogSearchQuery {
	this := LogSearchQuery{}
	return &this
}

// GetQueryString returns the QueryString field value
func (o *LogSearchQuery) GetQueryString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryString
}

// GetQueryStringOk returns a tuple with the QueryString field value
// and a boolean to check if the value has been set.
func (o *LogSearchQuery) GetQueryStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryString, true
}

// SetQueryString sets field value
func (o *LogSearchQuery) SetQueryString(v string) {
	o.QueryString = v
}

func (o LogSearchQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogSearchQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queryString"] = o.QueryString
	return toSerialize, nil
}

func (o *LogSearchQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queryString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogSearchQuery := _LogSearchQuery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogSearchQuery)

	if err != nil {
		return err
	}

	*o = LogSearchQuery(varLogSearchQuery)

	return err
}

type NullableLogSearchQuery struct {
	value *LogSearchQuery
	isSet bool
}

func (v NullableLogSearchQuery) Get() *LogSearchQuery {
	return v.value
}

func (v *NullableLogSearchQuery) Set(val *LogSearchQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSearchQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSearchQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSearchQuery(val *LogSearchQuery) *NullableLogSearchQuery {
	return &NullableLogSearchQuery{value: val, isSet: true}
}

func (v NullableLogSearchQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSearchQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


