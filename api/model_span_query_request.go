/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SpanQueryRequest struct for SpanQueryRequest
type SpanQueryRequest struct {
	// A list of span analytics queries.
	QueryRows []SpanQueryRow `json:"queryRows"`
	TimeRange ResolvableTimeRange `json:"timeRange"`
	// Time zone for the query time ranges. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
	TimeZone *string `json:"timeZone,omitempty"`
}

// NewSpanQueryRequest instantiates a new SpanQueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanQueryRequest(queryRows []SpanQueryRow, timeRange ResolvableTimeRange) *SpanQueryRequest {
	this := SpanQueryRequest{}
	this.QueryRows = queryRows
	this.TimeRange = timeRange
	var timeZone string = "UTC"
	this.TimeZone = &timeZone
	return &this
}

// NewSpanQueryRequestWithDefaults instantiates a new SpanQueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanQueryRequestWithDefaults() *SpanQueryRequest {
	this := SpanQueryRequest{}
	var timeZone string = "UTC"
	this.TimeZone = &timeZone
	return &this
}

// GetQueryRows returns the QueryRows field value
func (o *SpanQueryRequest) GetQueryRows() []SpanQueryRow {
	if o == nil {
		var ret []SpanQueryRow
		return ret
	}

	return o.QueryRows
}

// GetQueryRowsOk returns a tuple with the QueryRows field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRequest) GetQueryRowsOk() ([]SpanQueryRow, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueryRows, true
}

// SetQueryRows sets field value
func (o *SpanQueryRequest) SetQueryRows(v []SpanQueryRow) {
	o.QueryRows = v
}

// GetTimeRange returns the TimeRange field value
func (o *SpanQueryRequest) GetTimeRange() ResolvableTimeRange {
	if o == nil {
		var ret ResolvableTimeRange
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRequest) GetTimeRangeOk() (*ResolvableTimeRange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *SpanQueryRequest) SetTimeRange(v ResolvableTimeRange) {
	o.TimeRange = v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *SpanQueryRequest) GetTimeZone() string {
	if o == nil || o.TimeZone == nil {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryRequest) GetTimeZoneOk() (*string, bool) {
	if o == nil || o.TimeZone == nil {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *SpanQueryRequest) HasTimeZone() bool {
	if o != nil && o.TimeZone != nil {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *SpanQueryRequest) SetTimeZone(v string) {
	o.TimeZone = &v
}

func (o SpanQueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["queryRows"] = o.QueryRows
	}
	if true {
		toSerialize["timeRange"] = o.TimeRange
	}
	if o.TimeZone != nil {
		toSerialize["timeZone"] = o.TimeZone
	}
	return json.Marshal(toSerialize)
}

type NullableSpanQueryRequest struct {
	value *SpanQueryRequest
	isSet bool
}

func (v NullableSpanQueryRequest) Get() *SpanQueryRequest {
	return v.value
}

func (v *NullableSpanQueryRequest) Set(val *SpanQueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanQueryRequest(val *SpanQueryRequest) *NullableSpanQueryRequest {
	return &NullableSpanQueryRequest{value: val, isSet: true}
}

func (v NullableSpanQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


