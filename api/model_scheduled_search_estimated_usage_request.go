/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScheduledSearchEstimatedUsageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledSearchEstimatedUsageRequest{}

// ScheduledSearchEstimatedUsageRequest struct for ScheduledSearchEstimatedUsageRequest
type ScheduledSearchEstimatedUsageRequest struct {
	// The text of a logs search query.
	QueryString string `json:"queryString"`
	TimeRange ResolvableTimeRange `json:"timeRange"`
	// Cron-like expression specifying the search's schedule. Field scheduleType must be set to \"Custom\", otherwise, scheduleType takes precedence over cronSchedule.
	CronSchedule *string `json:"cronSchedule,omitempty"`
	// Run schedule of the scheduled search. Set to \"Custom\" to specify the schedule with a CRON expression. Please note that  with Custom, 1Day and 1Week schedule types you need to provide the corresponding cron expression to determine when to  actually run the search. e.g. Sample Valid Cron for 1Day is \"0 0 16 ? * 2-6 *\". Possible schedule types are:   - `RealTime`   - `15Minutes`   - `1Hour`   - `2Hours`   - `4Hours`   - `6Hours`   - `8Hours`   - `12Hours`   - `1Day`   - `1Week`   - `Custom`
	ScheduleType string `json:"scheduleType" validate:"regexp=^(RealTime|15Minutes|1Hour|2Hours|4Hours|6Hours|8Hours|12Hours|1Day|1Week|Custom)$"`
	// Set it to true to run the search using receipt time. By default, searches do not run by receipt time.
	ByReceiptTime *bool `json:"byReceiptTime,omitempty"`
	// An array of search query parameter objects.
	QueryParameters []QueryParameterSyncDefinition `json:"queryParameters,omitempty"`
	// Time zone identifier for the estimates. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
	TimeZone string `json:"timeZone"`
}

type _ScheduledSearchEstimatedUsageRequest ScheduledSearchEstimatedUsageRequest

// NewScheduledSearchEstimatedUsageRequest instantiates a new ScheduledSearchEstimatedUsageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduledSearchEstimatedUsageRequest(queryString string, timeRange ResolvableTimeRange, scheduleType string, timeZone string) *ScheduledSearchEstimatedUsageRequest {
	this := ScheduledSearchEstimatedUsageRequest{}
	this.QueryString = queryString
	this.TimeRange = timeRange
	this.ScheduleType = scheduleType
	var byReceiptTime bool = false
	this.ByReceiptTime = &byReceiptTime
	this.TimeZone = timeZone
	return &this
}

// NewScheduledSearchEstimatedUsageRequestWithDefaults instantiates a new ScheduledSearchEstimatedUsageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledSearchEstimatedUsageRequestWithDefaults() *ScheduledSearchEstimatedUsageRequest {
	this := ScheduledSearchEstimatedUsageRequest{}
	var byReceiptTime bool = false
	this.ByReceiptTime = &byReceiptTime
	return &this
}

// GetQueryString returns the QueryString field value
func (o *ScheduledSearchEstimatedUsageRequest) GetQueryString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryString
}

// GetQueryStringOk returns a tuple with the QueryString field value
// and a boolean to check if the value has been set.
func (o *ScheduledSearchEstimatedUsageRequest) GetQueryStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryString, true
}

// SetQueryString sets field value
func (o *ScheduledSearchEstimatedUsageRequest) SetQueryString(v string) {
	o.QueryString = v
}

// GetTimeRange returns the TimeRange field value
func (o *ScheduledSearchEstimatedUsageRequest) GetTimeRange() ResolvableTimeRange {
	if o == nil {
		var ret ResolvableTimeRange
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *ScheduledSearchEstimatedUsageRequest) GetTimeRangeOk() (*ResolvableTimeRange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *ScheduledSearchEstimatedUsageRequest) SetTimeRange(v ResolvableTimeRange) {
	o.TimeRange = v
}

// GetCronSchedule returns the CronSchedule field value if set, zero value otherwise.
func (o *ScheduledSearchEstimatedUsageRequest) GetCronSchedule() string {
	if o == nil || IsNil(o.CronSchedule) {
		var ret string
		return ret
	}
	return *o.CronSchedule
}

// GetCronScheduleOk returns a tuple with the CronSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledSearchEstimatedUsageRequest) GetCronScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.CronSchedule) {
		return nil, false
	}
	return o.CronSchedule, true
}

// HasCronSchedule returns a boolean if a field has been set.
func (o *ScheduledSearchEstimatedUsageRequest) HasCronSchedule() bool {
	if o != nil && !IsNil(o.CronSchedule) {
		return true
	}

	return false
}

// SetCronSchedule gets a reference to the given string and assigns it to the CronSchedule field.
func (o *ScheduledSearchEstimatedUsageRequest) SetCronSchedule(v string) {
	o.CronSchedule = &v
}

// GetScheduleType returns the ScheduleType field value
func (o *ScheduledSearchEstimatedUsageRequest) GetScheduleType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value
// and a boolean to check if the value has been set.
func (o *ScheduledSearchEstimatedUsageRequest) GetScheduleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleType, true
}

// SetScheduleType sets field value
func (o *ScheduledSearchEstimatedUsageRequest) SetScheduleType(v string) {
	o.ScheduleType = v
}

// GetByReceiptTime returns the ByReceiptTime field value if set, zero value otherwise.
func (o *ScheduledSearchEstimatedUsageRequest) GetByReceiptTime() bool {
	if o == nil || IsNil(o.ByReceiptTime) {
		var ret bool
		return ret
	}
	return *o.ByReceiptTime
}

// GetByReceiptTimeOk returns a tuple with the ByReceiptTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledSearchEstimatedUsageRequest) GetByReceiptTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.ByReceiptTime) {
		return nil, false
	}
	return o.ByReceiptTime, true
}

// HasByReceiptTime returns a boolean if a field has been set.
func (o *ScheduledSearchEstimatedUsageRequest) HasByReceiptTime() bool {
	if o != nil && !IsNil(o.ByReceiptTime) {
		return true
	}

	return false
}

// SetByReceiptTime gets a reference to the given bool and assigns it to the ByReceiptTime field.
func (o *ScheduledSearchEstimatedUsageRequest) SetByReceiptTime(v bool) {
	o.ByReceiptTime = &v
}

// GetQueryParameters returns the QueryParameters field value if set, zero value otherwise.
func (o *ScheduledSearchEstimatedUsageRequest) GetQueryParameters() []QueryParameterSyncDefinition {
	if o == nil || IsNil(o.QueryParameters) {
		var ret []QueryParameterSyncDefinition
		return ret
	}
	return o.QueryParameters
}

// GetQueryParametersOk returns a tuple with the QueryParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledSearchEstimatedUsageRequest) GetQueryParametersOk() ([]QueryParameterSyncDefinition, bool) {
	if o == nil || IsNil(o.QueryParameters) {
		return nil, false
	}
	return o.QueryParameters, true
}

// HasQueryParameters returns a boolean if a field has been set.
func (o *ScheduledSearchEstimatedUsageRequest) HasQueryParameters() bool {
	if o != nil && !IsNil(o.QueryParameters) {
		return true
	}

	return false
}

// SetQueryParameters gets a reference to the given []QueryParameterSyncDefinition and assigns it to the QueryParameters field.
func (o *ScheduledSearchEstimatedUsageRequest) SetQueryParameters(v []QueryParameterSyncDefinition) {
	o.QueryParameters = v
}

// GetTimeZone returns the TimeZone field value
func (o *ScheduledSearchEstimatedUsageRequest) GetTimeZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value
// and a boolean to check if the value has been set.
func (o *ScheduledSearchEstimatedUsageRequest) GetTimeZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeZone, true
}

// SetTimeZone sets field value
func (o *ScheduledSearchEstimatedUsageRequest) SetTimeZone(v string) {
	o.TimeZone = v
}

func (o ScheduledSearchEstimatedUsageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledSearchEstimatedUsageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queryString"] = o.QueryString
	toSerialize["timeRange"] = o.TimeRange
	if !IsNil(o.CronSchedule) {
		toSerialize["cronSchedule"] = o.CronSchedule
	}
	toSerialize["scheduleType"] = o.ScheduleType
	if !IsNil(o.ByReceiptTime) {
		toSerialize["byReceiptTime"] = o.ByReceiptTime
	}
	if !IsNil(o.QueryParameters) {
		toSerialize["queryParameters"] = o.QueryParameters
	}
	toSerialize["timeZone"] = o.TimeZone
	return toSerialize, nil
}

func (o *ScheduledSearchEstimatedUsageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queryString",
		"timeRange",
		"scheduleType",
		"timeZone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduledSearchEstimatedUsageRequest := _ScheduledSearchEstimatedUsageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduledSearchEstimatedUsageRequest)

	if err != nil {
		return err
	}

	*o = ScheduledSearchEstimatedUsageRequest(varScheduledSearchEstimatedUsageRequest)

	return err
}

type NullableScheduledSearchEstimatedUsageRequest struct {
	value *ScheduledSearchEstimatedUsageRequest
	isSet bool
}

func (v NullableScheduledSearchEstimatedUsageRequest) Get() *ScheduledSearchEstimatedUsageRequest {
	return v.value
}

func (v *NullableScheduledSearchEstimatedUsageRequest) Set(val *ScheduledSearchEstimatedUsageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledSearchEstimatedUsageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledSearchEstimatedUsageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledSearchEstimatedUsageRequest(val *ScheduledSearchEstimatedUsageRequest) *NullableScheduledSearchEstimatedUsageRequest {
	return &NullableScheduledSearchEstimatedUsageRequest{value: val, isSet: true}
}

func (v NullableScheduledSearchEstimatedUsageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledSearchEstimatedUsageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


