/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// CollectionAwsMetadataTagsFetchDeniedTracker struct for CollectionAwsMetadataTagsFetchDeniedTracker
type CollectionAwsMetadataTagsFetchDeniedTracker struct {
	TrackerIdentity
}

// NewCollectionAwsMetadataTagsFetchDeniedTracker instantiates a new CollectionAwsMetadataTagsFetchDeniedTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionAwsMetadataTagsFetchDeniedTracker(trackerId string, error_ string, description string) *CollectionAwsMetadataTagsFetchDeniedTracker {
	this := CollectionAwsMetadataTagsFetchDeniedTracker{}
	this.TrackerId = trackerId
	this.Error = error_
	this.Description = description
	return &this
}

// NewCollectionAwsMetadataTagsFetchDeniedTrackerWithDefaults instantiates a new CollectionAwsMetadataTagsFetchDeniedTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionAwsMetadataTagsFetchDeniedTrackerWithDefaults() *CollectionAwsMetadataTagsFetchDeniedTracker {
	this := CollectionAwsMetadataTagsFetchDeniedTracker{}
	return &this
}

func (o CollectionAwsMetadataTagsFetchDeniedTracker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTrackerIdentity, errTrackerIdentity := json.Marshal(o.TrackerIdentity)
	if errTrackerIdentity != nil {
		return []byte{}, errTrackerIdentity
	}
	errTrackerIdentity = json.Unmarshal([]byte(serializedTrackerIdentity), &toSerialize)
	if errTrackerIdentity != nil {
		return []byte{}, errTrackerIdentity
	}
	return json.Marshal(toSerialize)
}

type NullableCollectionAwsMetadataTagsFetchDeniedTracker struct {
	value *CollectionAwsMetadataTagsFetchDeniedTracker
	isSet bool
}

func (v NullableCollectionAwsMetadataTagsFetchDeniedTracker) Get() *CollectionAwsMetadataTagsFetchDeniedTracker {
	return v.value
}

func (v *NullableCollectionAwsMetadataTagsFetchDeniedTracker) Set(val *CollectionAwsMetadataTagsFetchDeniedTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionAwsMetadataTagsFetchDeniedTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionAwsMetadataTagsFetchDeniedTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionAwsMetadataTagsFetchDeniedTracker(val *CollectionAwsMetadataTagsFetchDeniedTracker) *NullableCollectionAwsMetadataTagsFetchDeniedTracker {
	return &NullableCollectionAwsMetadataTagsFetchDeniedTracker{value: val, isSet: true}
}

func (v NullableCollectionAwsMetadataTagsFetchDeniedTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionAwsMetadataTagsFetchDeniedTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


