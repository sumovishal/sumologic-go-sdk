/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SeriesData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SeriesData{}

// SeriesData The data for visualizing monitor chart.
type SeriesData struct {
	// Name of the series.
	Name string `json:"name"`
	// Data points of the series.
	DataPoints []DataPoint `json:"dataPoints"`
	SeriesAxisRange SeriesAxisRange `json:"seriesAxisRange"`
	AggregateInfo *VisualAggregateData `json:"aggregateInfo,omitempty"`
	SeriesMetadata *SeriesMetadata `json:"seriesMetadata,omitempty"`
}

type _SeriesData SeriesData

// NewSeriesData instantiates a new SeriesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeriesData(name string, dataPoints []DataPoint, seriesAxisRange SeriesAxisRange) *SeriesData {
	this := SeriesData{}
	this.Name = name
	this.DataPoints = dataPoints
	this.SeriesAxisRange = seriesAxisRange
	return &this
}

// NewSeriesDataWithDefaults instantiates a new SeriesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesDataWithDefaults() *SeriesData {
	this := SeriesData{}
	return &this
}

// GetName returns the Name field value
func (o *SeriesData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SeriesData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SeriesData) SetName(v string) {
	o.Name = v
}

// GetDataPoints returns the DataPoints field value
func (o *SeriesData) GetDataPoints() []DataPoint {
	if o == nil {
		var ret []DataPoint
		return ret
	}

	return o.DataPoints
}

// GetDataPointsOk returns a tuple with the DataPoints field value
// and a boolean to check if the value has been set.
func (o *SeriesData) GetDataPointsOk() ([]DataPoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataPoints, true
}

// SetDataPoints sets field value
func (o *SeriesData) SetDataPoints(v []DataPoint) {
	o.DataPoints = v
}

// GetSeriesAxisRange returns the SeriesAxisRange field value
func (o *SeriesData) GetSeriesAxisRange() SeriesAxisRange {
	if o == nil {
		var ret SeriesAxisRange
		return ret
	}

	return o.SeriesAxisRange
}

// GetSeriesAxisRangeOk returns a tuple with the SeriesAxisRange field value
// and a boolean to check if the value has been set.
func (o *SeriesData) GetSeriesAxisRangeOk() (*SeriesAxisRange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeriesAxisRange, true
}

// SetSeriesAxisRange sets field value
func (o *SeriesData) SetSeriesAxisRange(v SeriesAxisRange) {
	o.SeriesAxisRange = v
}

// GetAggregateInfo returns the AggregateInfo field value if set, zero value otherwise.
func (o *SeriesData) GetAggregateInfo() VisualAggregateData {
	if o == nil || IsNil(o.AggregateInfo) {
		var ret VisualAggregateData
		return ret
	}
	return *o.AggregateInfo
}

// GetAggregateInfoOk returns a tuple with the AggregateInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesData) GetAggregateInfoOk() (*VisualAggregateData, bool) {
	if o == nil || IsNil(o.AggregateInfo) {
		return nil, false
	}
	return o.AggregateInfo, true
}

// HasAggregateInfo returns a boolean if a field has been set.
func (o *SeriesData) HasAggregateInfo() bool {
	if o != nil && !IsNil(o.AggregateInfo) {
		return true
	}

	return false
}

// SetAggregateInfo gets a reference to the given VisualAggregateData and assigns it to the AggregateInfo field.
func (o *SeriesData) SetAggregateInfo(v VisualAggregateData) {
	o.AggregateInfo = &v
}

// GetSeriesMetadata returns the SeriesMetadata field value if set, zero value otherwise.
func (o *SeriesData) GetSeriesMetadata() SeriesMetadata {
	if o == nil || IsNil(o.SeriesMetadata) {
		var ret SeriesMetadata
		return ret
	}
	return *o.SeriesMetadata
}

// GetSeriesMetadataOk returns a tuple with the SeriesMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesData) GetSeriesMetadataOk() (*SeriesMetadata, bool) {
	if o == nil || IsNil(o.SeriesMetadata) {
		return nil, false
	}
	return o.SeriesMetadata, true
}

// HasSeriesMetadata returns a boolean if a field has been set.
func (o *SeriesData) HasSeriesMetadata() bool {
	if o != nil && !IsNil(o.SeriesMetadata) {
		return true
	}

	return false
}

// SetSeriesMetadata gets a reference to the given SeriesMetadata and assigns it to the SeriesMetadata field.
func (o *SeriesData) SetSeriesMetadata(v SeriesMetadata) {
	o.SeriesMetadata = &v
}

func (o SeriesData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SeriesData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["dataPoints"] = o.DataPoints
	toSerialize["seriesAxisRange"] = o.SeriesAxisRange
	if !IsNil(o.AggregateInfo) {
		toSerialize["aggregateInfo"] = o.AggregateInfo
	}
	if !IsNil(o.SeriesMetadata) {
		toSerialize["seriesMetadata"] = o.SeriesMetadata
	}
	return toSerialize, nil
}

func (o *SeriesData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"dataPoints",
		"seriesAxisRange",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSeriesData := _SeriesData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSeriesData)

	if err != nil {
		return err
	}

	*o = SeriesData(varSeriesData)

	return err
}

type NullableSeriesData struct {
	value *SeriesData
	isSet bool
}

func (v NullableSeriesData) Get() *SeriesData {
	return v.value
}

func (v *NullableSeriesData) Set(val *SeriesData) {
	v.value = val
	v.isSet = true
}

func (v NullableSeriesData) IsSet() bool {
	return v.isSet
}

func (v *NullableSeriesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeriesData(val *SeriesData) *NullableSeriesData {
	return &NullableSeriesData{value: val, isSet: true}
}

func (v NullableSeriesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeriesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


