/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Consumable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Consumable{}

// Consumable Details of consumable and its quantity.
type Consumable struct {
	// Unique identifier of the consumable. Valid values are: 1. `Storage` 2. `Metrics` 3. `Continuous` 4. `Credits` 
	ConsumableId string `json:"consumableId"`
	Quantity Quantity `json:"quantity"`
}

// NewConsumable instantiates a new Consumable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumable(consumableId string, quantity Quantity) *Consumable {
	this := Consumable{}
	this.ConsumableId = consumableId
	this.Quantity = quantity
	return &this
}

// NewConsumableWithDefaults instantiates a new Consumable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumableWithDefaults() *Consumable {
	this := Consumable{}
	return &this
}

// GetConsumableId returns the ConsumableId field value
func (o *Consumable) GetConsumableId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsumableId
}

// GetConsumableIdOk returns a tuple with the ConsumableId field value
// and a boolean to check if the value has been set.
func (o *Consumable) GetConsumableIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumableId, true
}

// SetConsumableId sets field value
func (o *Consumable) SetConsumableId(v string) {
	o.ConsumableId = v
}

// GetQuantity returns the Quantity field value
func (o *Consumable) GetQuantity() Quantity {
	if o == nil {
		var ret Quantity
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *Consumable) GetQuantityOk() (*Quantity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *Consumable) SetQuantity(v Quantity) {
	o.Quantity = v
}

func (o Consumable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Consumable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["consumableId"] = o.ConsumableId
	toSerialize["quantity"] = o.Quantity
	return toSerialize, nil
}

type NullableConsumable struct {
	value *Consumable
	isSet bool
}

func (v NullableConsumable) Get() *Consumable {
	return v.value
}

func (v *NullableConsumable) Set(val *Consumable) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumable) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumable(val *Consumable) *NullableConsumable {
	return &NullableConsumable{value: val, isSet: true}
}

func (v NullableConsumable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


