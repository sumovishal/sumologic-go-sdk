/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// MonitorsLibraryFolderUpdate struct for MonitorsLibraryFolderUpdate
type MonitorsLibraryFolderUpdate struct {
	MonitorsLibraryBaseUpdate
}

// NewMonitorsLibraryFolderUpdate instantiates a new MonitorsLibraryFolderUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorsLibraryFolderUpdate(name string, version int64, type_ string) *MonitorsLibraryFolderUpdate {
	this := MonitorsLibraryFolderUpdate{}
	this.Name = name
	var description string = ""
	this.Description = &description
	this.Version = version
	this.Type = type_
	return &this
}

// NewMonitorsLibraryFolderUpdateWithDefaults instantiates a new MonitorsLibraryFolderUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorsLibraryFolderUpdateWithDefaults() *MonitorsLibraryFolderUpdate {
	this := MonitorsLibraryFolderUpdate{}
	return &this
}

func (o MonitorsLibraryFolderUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMonitorsLibraryBaseUpdate, errMonitorsLibraryBaseUpdate := json.Marshal(o.MonitorsLibraryBaseUpdate)
	if errMonitorsLibraryBaseUpdate != nil {
		return []byte{}, errMonitorsLibraryBaseUpdate
	}
	errMonitorsLibraryBaseUpdate = json.Unmarshal([]byte(serializedMonitorsLibraryBaseUpdate), &toSerialize)
	if errMonitorsLibraryBaseUpdate != nil {
		return []byte{}, errMonitorsLibraryBaseUpdate
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorsLibraryFolderUpdate struct {
	value *MonitorsLibraryFolderUpdate
	isSet bool
}

func (v NullableMonitorsLibraryFolderUpdate) Get() *MonitorsLibraryFolderUpdate {
	return v.value
}

func (v *NullableMonitorsLibraryFolderUpdate) Set(val *MonitorsLibraryFolderUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorsLibraryFolderUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorsLibraryFolderUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorsLibraryFolderUpdate(val *MonitorsLibraryFolderUpdate) *NullableMonitorsLibraryFolderUpdate {
	return &NullableMonitorsLibraryFolderUpdate{value: val, isSet: true}
}

func (v NullableMonitorsLibraryFolderUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorsLibraryFolderUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


