/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SpanQueryRowError struct for SpanQueryRowError
type SpanQueryRowError struct {
	// The error code.
	Code string `json:"code"`
	// Short description of the occured error.
	Message string `json:"message"`
	// Details about the occured error.
	Details *string `json:"details,omitempty"`
}

// NewSpanQueryRowError instantiates a new SpanQueryRowError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanQueryRowError(code string, message string) *SpanQueryRowError {
	this := SpanQueryRowError{}
	this.Code = code
	this.Message = message
	return &this
}

// NewSpanQueryRowErrorWithDefaults instantiates a new SpanQueryRowError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanQueryRowErrorWithDefaults() *SpanQueryRowError {
	this := SpanQueryRowError{}
	return &this
}

// GetCode returns the Code field value
func (o *SpanQueryRowError) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRowError) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *SpanQueryRowError) SetCode(v string) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *SpanQueryRowError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRowError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SpanQueryRowError) SetMessage(v string) {
	o.Message = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *SpanQueryRowError) GetDetails() string {
	if o == nil || o.Details == nil {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryRowError) GetDetailsOk() (*string, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *SpanQueryRowError) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *SpanQueryRowError) SetDetails(v string) {
	o.Details = &v
}

func (o SpanQueryRowError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	return json.Marshal(toSerialize)
}

type NullableSpanQueryRowError struct {
	value *SpanQueryRowError
	isSet bool
}

func (v NullableSpanQueryRowError) Get() *SpanQueryRowError {
	return v.value
}

func (v *NullableSpanQueryRowError) Set(val *SpanQueryRowError) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanQueryRowError) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanQueryRowError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanQueryRowError(val *SpanQueryRowError) *NullableSpanQueryRowError {
	return &NullableSpanQueryRowError{value: val, isSet: true}
}

func (v NullableSpanQueryRowError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanQueryRowError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


