/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
	"time"
)

// checks if the ParsersLibraryFolderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParsersLibraryFolderResponse{}

// ParsersLibraryFolderResponse struct for ParsersLibraryFolderResponse
type ParsersLibraryFolderResponse struct {
	ParsersLibraryBaseResponse
	// Children of the folder.
	Children []ParsersLibraryBaseResponse `json:"children"`
}

type _ParsersLibraryFolderResponse ParsersLibraryFolderResponse

// NewParsersLibraryFolderResponse instantiates a new ParsersLibraryFolderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParsersLibraryFolderResponse(children []ParsersLibraryBaseResponse, id string, name string, description string, version int64, createdAt time.Time, createdBy string, modifiedAt time.Time, modifiedBy string, parentId string, contentType string, type_ string, isLocked bool, isSystem bool, isMutable bool) *ParsersLibraryFolderResponse {
	this := ParsersLibraryFolderResponse{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Version = version
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.ParentId = parentId
	this.ContentType = contentType
	this.Type = type_
	this.IsLocked = isLocked
	this.IsSystem = isSystem
	this.IsMutable = isMutable
	this.Children = children
	return &this
}

// NewParsersLibraryFolderResponseWithDefaults instantiates a new ParsersLibraryFolderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParsersLibraryFolderResponseWithDefaults() *ParsersLibraryFolderResponse {
	this := ParsersLibraryFolderResponse{}
	return &this
}

// GetChildren returns the Children field value
func (o *ParsersLibraryFolderResponse) GetChildren() []ParsersLibraryBaseResponse {
	if o == nil {
		var ret []ParsersLibraryBaseResponse
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *ParsersLibraryFolderResponse) GetChildrenOk() ([]ParsersLibraryBaseResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Children, true
}

// SetChildren sets field value
func (o *ParsersLibraryFolderResponse) SetChildren(v []ParsersLibraryBaseResponse) {
	o.Children = v
}

func (o ParsersLibraryFolderResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParsersLibraryFolderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedParsersLibraryBaseResponse, errParsersLibraryBaseResponse := json.Marshal(o.ParsersLibraryBaseResponse)
	if errParsersLibraryBaseResponse != nil {
		return map[string]interface{}{}, errParsersLibraryBaseResponse
	}
	errParsersLibraryBaseResponse = json.Unmarshal([]byte(serializedParsersLibraryBaseResponse), &toSerialize)
	if errParsersLibraryBaseResponse != nil {
		return map[string]interface{}{}, errParsersLibraryBaseResponse
	}
	toSerialize["children"] = o.Children
	return toSerialize, nil
}

func (o *ParsersLibraryFolderResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"children",
		"id",
		"name",
		"description",
		"version",
		"createdAt",
		"createdBy",
		"modifiedAt",
		"modifiedBy",
		"parentId",
		"contentType",
		"type",
		"isLocked",
		"isSystem",
		"isMutable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParsersLibraryFolderResponse := _ParsersLibraryFolderResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParsersLibraryFolderResponse)

	if err != nil {
		return err
	}

	*o = ParsersLibraryFolderResponse(varParsersLibraryFolderResponse)

	return err
}

type NullableParsersLibraryFolderResponse struct {
	value *ParsersLibraryFolderResponse
	isSet bool
}

func (v NullableParsersLibraryFolderResponse) Get() *ParsersLibraryFolderResponse {
	return v.value
}

func (v *NullableParsersLibraryFolderResponse) Set(val *ParsersLibraryFolderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableParsersLibraryFolderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableParsersLibraryFolderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParsersLibraryFolderResponse(val *ParsersLibraryFolderResponse) *NullableParsersLibraryFolderResponse {
	return &NullableParsersLibraryFolderResponse{value: val, isSet: true}
}

func (v NullableParsersLibraryFolderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParsersLibraryFolderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


