/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SpanQueryAggregateDataSeries struct for SpanQueryAggregateDataSeries
type SpanQueryAggregateDataSeries struct {
	// The id of the query.
	QueryId string `json:"queryId"`
	// The meaning of 'name' depends on the series type.   - For results of type 'timeseries', it is the value of the x axis 'field' key.   - For results of type 'nontimeseries', it is the name of one of the fields that is not part of 'xAxisKeys'.   - For results of type 'table', it is the comma-separated string of names of all fields. 
	Name string `json:"name"`
	// A list of data points in the series.
	DataPoints []SpanQueryAggregatePointData `json:"dataPoints"`
	AggregateInfo *SpanQueryAggregateAggregateData `json:"aggregateInfo,omitempty"`
	MetaData *SpanQueryAggregateMetaData `json:"metaData,omitempty"`
	// Type of the visual series.
	SeriesType *string `json:"seriesType,omitempty"`
	// Keys that will be plotted as a point on the x axis.
	XAxisKeys []string `json:"xAxisKeys,omitempty"`
	// Type of the values in the series.
	ValueType *string `json:"valueType,omitempty"`
}

// NewSpanQueryAggregateDataSeries instantiates a new SpanQueryAggregateDataSeries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanQueryAggregateDataSeries(queryId string, name string, dataPoints []SpanQueryAggregatePointData) *SpanQueryAggregateDataSeries {
	this := SpanQueryAggregateDataSeries{}
	this.QueryId = queryId
	this.Name = name
	this.DataPoints = dataPoints
	return &this
}

// NewSpanQueryAggregateDataSeriesWithDefaults instantiates a new SpanQueryAggregateDataSeries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanQueryAggregateDataSeriesWithDefaults() *SpanQueryAggregateDataSeries {
	this := SpanQueryAggregateDataSeries{}
	return &this
}

// GetQueryId returns the QueryId field value
func (o *SpanQueryAggregateDataSeries) GetQueryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryId
}

// GetQueryIdOk returns a tuple with the QueryId field value
// and a boolean to check if the value has been set.
func (o *SpanQueryAggregateDataSeries) GetQueryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryId, true
}

// SetQueryId sets field value
func (o *SpanQueryAggregateDataSeries) SetQueryId(v string) {
	o.QueryId = v
}

// GetName returns the Name field value
func (o *SpanQueryAggregateDataSeries) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpanQueryAggregateDataSeries) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpanQueryAggregateDataSeries) SetName(v string) {
	o.Name = v
}

// GetDataPoints returns the DataPoints field value
func (o *SpanQueryAggregateDataSeries) GetDataPoints() []SpanQueryAggregatePointData {
	if o == nil {
		var ret []SpanQueryAggregatePointData
		return ret
	}

	return o.DataPoints
}

// GetDataPointsOk returns a tuple with the DataPoints field value
// and a boolean to check if the value has been set.
func (o *SpanQueryAggregateDataSeries) GetDataPointsOk() ([]SpanQueryAggregatePointData, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataPoints, true
}

// SetDataPoints sets field value
func (o *SpanQueryAggregateDataSeries) SetDataPoints(v []SpanQueryAggregatePointData) {
	o.DataPoints = v
}

// GetAggregateInfo returns the AggregateInfo field value if set, zero value otherwise.
func (o *SpanQueryAggregateDataSeries) GetAggregateInfo() SpanQueryAggregateAggregateData {
	if o == nil || o.AggregateInfo == nil {
		var ret SpanQueryAggregateAggregateData
		return ret
	}
	return *o.AggregateInfo
}

// GetAggregateInfoOk returns a tuple with the AggregateInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryAggregateDataSeries) GetAggregateInfoOk() (*SpanQueryAggregateAggregateData, bool) {
	if o == nil || o.AggregateInfo == nil {
		return nil, false
	}
	return o.AggregateInfo, true
}

// HasAggregateInfo returns a boolean if a field has been set.
func (o *SpanQueryAggregateDataSeries) HasAggregateInfo() bool {
	if o != nil && o.AggregateInfo != nil {
		return true
	}

	return false
}

// SetAggregateInfo gets a reference to the given SpanQueryAggregateAggregateData and assigns it to the AggregateInfo field.
func (o *SpanQueryAggregateDataSeries) SetAggregateInfo(v SpanQueryAggregateAggregateData) {
	o.AggregateInfo = &v
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *SpanQueryAggregateDataSeries) GetMetaData() SpanQueryAggregateMetaData {
	if o == nil || o.MetaData == nil {
		var ret SpanQueryAggregateMetaData
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryAggregateDataSeries) GetMetaDataOk() (*SpanQueryAggregateMetaData, bool) {
	if o == nil || o.MetaData == nil {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *SpanQueryAggregateDataSeries) HasMetaData() bool {
	if o != nil && o.MetaData != nil {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given SpanQueryAggregateMetaData and assigns it to the MetaData field.
func (o *SpanQueryAggregateDataSeries) SetMetaData(v SpanQueryAggregateMetaData) {
	o.MetaData = &v
}

// GetSeriesType returns the SeriesType field value if set, zero value otherwise.
func (o *SpanQueryAggregateDataSeries) GetSeriesType() string {
	if o == nil || o.SeriesType == nil {
		var ret string
		return ret
	}
	return *o.SeriesType
}

// GetSeriesTypeOk returns a tuple with the SeriesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryAggregateDataSeries) GetSeriesTypeOk() (*string, bool) {
	if o == nil || o.SeriesType == nil {
		return nil, false
	}
	return o.SeriesType, true
}

// HasSeriesType returns a boolean if a field has been set.
func (o *SpanQueryAggregateDataSeries) HasSeriesType() bool {
	if o != nil && o.SeriesType != nil {
		return true
	}

	return false
}

// SetSeriesType gets a reference to the given string and assigns it to the SeriesType field.
func (o *SpanQueryAggregateDataSeries) SetSeriesType(v string) {
	o.SeriesType = &v
}

// GetXAxisKeys returns the XAxisKeys field value if set, zero value otherwise.
func (o *SpanQueryAggregateDataSeries) GetXAxisKeys() []string {
	if o == nil || o.XAxisKeys == nil {
		var ret []string
		return ret
	}
	return o.XAxisKeys
}

// GetXAxisKeysOk returns a tuple with the XAxisKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryAggregateDataSeries) GetXAxisKeysOk() ([]string, bool) {
	if o == nil || o.XAxisKeys == nil {
		return nil, false
	}
	return o.XAxisKeys, true
}

// HasXAxisKeys returns a boolean if a field has been set.
func (o *SpanQueryAggregateDataSeries) HasXAxisKeys() bool {
	if o != nil && o.XAxisKeys != nil {
		return true
	}

	return false
}

// SetXAxisKeys gets a reference to the given []string and assigns it to the XAxisKeys field.
func (o *SpanQueryAggregateDataSeries) SetXAxisKeys(v []string) {
	o.XAxisKeys = v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *SpanQueryAggregateDataSeries) GetValueType() string {
	if o == nil || o.ValueType == nil {
		var ret string
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryAggregateDataSeries) GetValueTypeOk() (*string, bool) {
	if o == nil || o.ValueType == nil {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *SpanQueryAggregateDataSeries) HasValueType() bool {
	if o != nil && o.ValueType != nil {
		return true
	}

	return false
}

// SetValueType gets a reference to the given string and assigns it to the ValueType field.
func (o *SpanQueryAggregateDataSeries) SetValueType(v string) {
	o.ValueType = &v
}

func (o SpanQueryAggregateDataSeries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["queryId"] = o.QueryId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["dataPoints"] = o.DataPoints
	}
	if o.AggregateInfo != nil {
		toSerialize["aggregateInfo"] = o.AggregateInfo
	}
	if o.MetaData != nil {
		toSerialize["metaData"] = o.MetaData
	}
	if o.SeriesType != nil {
		toSerialize["seriesType"] = o.SeriesType
	}
	if o.XAxisKeys != nil {
		toSerialize["xAxisKeys"] = o.XAxisKeys
	}
	if o.ValueType != nil {
		toSerialize["valueType"] = o.ValueType
	}
	return json.Marshal(toSerialize)
}

type NullableSpanQueryAggregateDataSeries struct {
	value *SpanQueryAggregateDataSeries
	isSet bool
}

func (v NullableSpanQueryAggregateDataSeries) Get() *SpanQueryAggregateDataSeries {
	return v.value
}

func (v *NullableSpanQueryAggregateDataSeries) Set(val *SpanQueryAggregateDataSeries) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanQueryAggregateDataSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanQueryAggregateDataSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanQueryAggregateDataSeries(val *SpanQueryAggregateDataSeries) *NullableSpanQueryAggregateDataSeries {
	return &NullableSpanQueryAggregateDataSeries{value: val, isSet: true}
}

func (v NullableSpanQueryAggregateDataSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanQueryAggregateDataSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


