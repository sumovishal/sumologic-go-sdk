/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Capacity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Capacity{}

// Capacity Amount of entitlement provided by Sumo Logic for the entitlement type of the account.
type Capacity struct {
	// The value of the entitlement in units.
	Value float64 `json:"value"`
	// The unit of the entitlement. Units are provided in `GB` or `DPM`(data points per minute).
	Unit string `json:"unit"`
	// Type of capacity. Valid values are: 1) `Paid` : This means that the capacity is chargeable. 2) `Free` : This means that this capacity is not chargeable.
	CapacityType *string `json:"capacityType,omitempty" validate:"regexp=^(Paid|Free)$"`
}

type _Capacity Capacity

// NewCapacity instantiates a new Capacity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapacity(value float64, unit string) *Capacity {
	this := Capacity{}
	this.Value = value
	this.Unit = unit
	return &this
}

// NewCapacityWithDefaults instantiates a new Capacity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapacityWithDefaults() *Capacity {
	this := Capacity{}
	return &this
}

// GetValue returns the Value field value
func (o *Capacity) GetValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Capacity) GetValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Capacity) SetValue(v float64) {
	o.Value = v
}

// GetUnit returns the Unit field value
func (o *Capacity) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *Capacity) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *Capacity) SetUnit(v string) {
	o.Unit = v
}

// GetCapacityType returns the CapacityType field value if set, zero value otherwise.
func (o *Capacity) GetCapacityType() string {
	if o == nil || IsNil(o.CapacityType) {
		var ret string
		return ret
	}
	return *o.CapacityType
}

// GetCapacityTypeOk returns a tuple with the CapacityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Capacity) GetCapacityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CapacityType) {
		return nil, false
	}
	return o.CapacityType, true
}

// HasCapacityType returns a boolean if a field has been set.
func (o *Capacity) HasCapacityType() bool {
	if o != nil && !IsNil(o.CapacityType) {
		return true
	}

	return false
}

// SetCapacityType gets a reference to the given string and assigns it to the CapacityType field.
func (o *Capacity) SetCapacityType(v string) {
	o.CapacityType = &v
}

func (o Capacity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Capacity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["unit"] = o.Unit
	if !IsNil(o.CapacityType) {
		toSerialize["capacityType"] = o.CapacityType
	}
	return toSerialize, nil
}

func (o *Capacity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCapacity := _Capacity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCapacity)

	if err != nil {
		return err
	}

	*o = Capacity(varCapacity)

	return err
}

type NullableCapacity struct {
	value *Capacity
	isSet bool
}

func (v NullableCapacity) Get() *Capacity {
	return v.value
}

func (v *NullableCapacity) Set(val *Capacity) {
	v.value = val
	v.isSet = true
}

func (v NullableCapacity) IsSet() bool {
	return v.isSet
}

func (v *NullableCapacity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapacity(val *Capacity) *NullableCapacity {
	return &NullableCapacity{value: val, isSet: true}
}

func (v NullableCapacity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapacity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


