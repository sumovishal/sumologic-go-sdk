/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SlosLibrarySloResponseAllOf struct for SlosLibrarySloResponseAllOf
type SlosLibrarySloResponseAllOf struct {
	// Type of SLI Signal (latency, error, throughput, availability or other).
	SignalType string `json:"signalType"`
	Compliance Compliance `json:"compliance"`
	Indicator Sli `json:"indicator"`
	// Name of the service.
	Service *string `json:"service,omitempty"`
	// Name of the application.
	Application *string `json:"application,omitempty"`
	// Current SLO Version. This is incremented on every change of a critical field of the SLO (i.e, SLI or Compliance period timezone), that requires a recompute of the SLI values over the compliance period.
	SloVersion *int64 `json:"sloVersion,omitempty"`
}

// NewSlosLibrarySloResponseAllOf instantiates a new SlosLibrarySloResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlosLibrarySloResponseAllOf(signalType string, compliance Compliance, indicator Sli) *SlosLibrarySloResponseAllOf {
	this := SlosLibrarySloResponseAllOf{}
	this.SignalType = signalType
	this.Compliance = compliance
	this.Indicator = indicator
	return &this
}

// NewSlosLibrarySloResponseAllOfWithDefaults instantiates a new SlosLibrarySloResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlosLibrarySloResponseAllOfWithDefaults() *SlosLibrarySloResponseAllOf {
	this := SlosLibrarySloResponseAllOf{}
	return &this
}

// GetSignalType returns the SignalType field value
func (o *SlosLibrarySloResponseAllOf) GetSignalType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignalType
}

// GetSignalTypeOk returns a tuple with the SignalType field value
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponseAllOf) GetSignalTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignalType, true
}

// SetSignalType sets field value
func (o *SlosLibrarySloResponseAllOf) SetSignalType(v string) {
	o.SignalType = v
}

// GetCompliance returns the Compliance field value
func (o *SlosLibrarySloResponseAllOf) GetCompliance() Compliance {
	if o == nil {
		var ret Compliance
		return ret
	}

	return o.Compliance
}

// GetComplianceOk returns a tuple with the Compliance field value
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponseAllOf) GetComplianceOk() (*Compliance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compliance, true
}

// SetCompliance sets field value
func (o *SlosLibrarySloResponseAllOf) SetCompliance(v Compliance) {
	o.Compliance = v
}

// GetIndicator returns the Indicator field value
func (o *SlosLibrarySloResponseAllOf) GetIndicator() Sli {
	if o == nil {
		var ret Sli
		return ret
	}

	return o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponseAllOf) GetIndicatorOk() (*Sli, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Indicator, true
}

// SetIndicator sets field value
func (o *SlosLibrarySloResponseAllOf) SetIndicator(v Sli) {
	o.Indicator = v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *SlosLibrarySloResponseAllOf) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponseAllOf) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *SlosLibrarySloResponseAllOf) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *SlosLibrarySloResponseAllOf) SetService(v string) {
	o.Service = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *SlosLibrarySloResponseAllOf) GetApplication() string {
	if o == nil || o.Application == nil {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponseAllOf) GetApplicationOk() (*string, bool) {
	if o == nil || o.Application == nil {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *SlosLibrarySloResponseAllOf) HasApplication() bool {
	if o != nil && o.Application != nil {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *SlosLibrarySloResponseAllOf) SetApplication(v string) {
	o.Application = &v
}

// GetSloVersion returns the SloVersion field value if set, zero value otherwise.
func (o *SlosLibrarySloResponseAllOf) GetSloVersion() int64 {
	if o == nil || o.SloVersion == nil {
		var ret int64
		return ret
	}
	return *o.SloVersion
}

// GetSloVersionOk returns a tuple with the SloVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlosLibrarySloResponseAllOf) GetSloVersionOk() (*int64, bool) {
	if o == nil || o.SloVersion == nil {
		return nil, false
	}
	return o.SloVersion, true
}

// HasSloVersion returns a boolean if a field has been set.
func (o *SlosLibrarySloResponseAllOf) HasSloVersion() bool {
	if o != nil && o.SloVersion != nil {
		return true
	}

	return false
}

// SetSloVersion gets a reference to the given int64 and assigns it to the SloVersion field.
func (o *SlosLibrarySloResponseAllOf) SetSloVersion(v int64) {
	o.SloVersion = &v
}

func (o SlosLibrarySloResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["signalType"] = o.SignalType
	}
	if true {
		toSerialize["compliance"] = o.Compliance
	}
	if true {
		toSerialize["indicator"] = o.Indicator
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Application != nil {
		toSerialize["application"] = o.Application
	}
	if o.SloVersion != nil {
		toSerialize["sloVersion"] = o.SloVersion
	}
	return json.Marshal(toSerialize)
}

type NullableSlosLibrarySloResponseAllOf struct {
	value *SlosLibrarySloResponseAllOf
	isSet bool
}

func (v NullableSlosLibrarySloResponseAllOf) Get() *SlosLibrarySloResponseAllOf {
	return v.value
}

func (v *NullableSlosLibrarySloResponseAllOf) Set(val *SlosLibrarySloResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSlosLibrarySloResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSlosLibrarySloResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlosLibrarySloResponseAllOf(val *SlosLibrarySloResponseAllOf) *NullableSlosLibrarySloResponseAllOf {
	return &NullableSlosLibrarySloResponseAllOf{value: val, isSet: true}
}

func (v NullableSlosLibrarySloResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlosLibrarySloResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


