/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricsQueryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsQueryRequest{}

// MetricsQueryRequest A list of metrics queries to run along with the time range for the query.
type MetricsQueryRequest struct {
	// A list of metrics queries.
	Queries []MetricsQueryRow `json:"queries"`
	TimeRange ResolvableTimeRange `json:"timeRange"`
}

type _MetricsQueryRequest MetricsQueryRequest

// NewMetricsQueryRequest instantiates a new MetricsQueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsQueryRequest(queries []MetricsQueryRow, timeRange ResolvableTimeRange) *MetricsQueryRequest {
	this := MetricsQueryRequest{}
	this.Queries = queries
	this.TimeRange = timeRange
	return &this
}

// NewMetricsQueryRequestWithDefaults instantiates a new MetricsQueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsQueryRequestWithDefaults() *MetricsQueryRequest {
	this := MetricsQueryRequest{}
	return &this
}

// GetQueries returns the Queries field value
func (o *MetricsQueryRequest) GetQueries() []MetricsQueryRow {
	if o == nil {
		var ret []MetricsQueryRow
		return ret
	}

	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value
// and a boolean to check if the value has been set.
func (o *MetricsQueryRequest) GetQueriesOk() ([]MetricsQueryRow, bool) {
	if o == nil {
		return nil, false
	}
	return o.Queries, true
}

// SetQueries sets field value
func (o *MetricsQueryRequest) SetQueries(v []MetricsQueryRow) {
	o.Queries = v
}

// GetTimeRange returns the TimeRange field value
func (o *MetricsQueryRequest) GetTimeRange() ResolvableTimeRange {
	if o == nil {
		var ret ResolvableTimeRange
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *MetricsQueryRequest) GetTimeRangeOk() (*ResolvableTimeRange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *MetricsQueryRequest) SetTimeRange(v ResolvableTimeRange) {
	o.TimeRange = v
}

func (o MetricsQueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsQueryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queries"] = o.Queries
	toSerialize["timeRange"] = o.TimeRange
	return toSerialize, nil
}

func (o *MetricsQueryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queries",
		"timeRange",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricsQueryRequest := _MetricsQueryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricsQueryRequest)

	if err != nil {
		return err
	}

	*o = MetricsQueryRequest(varMetricsQueryRequest)

	return err
}

type NullableMetricsQueryRequest struct {
	value *MetricsQueryRequest
	isSet bool
}

func (v NullableMetricsQueryRequest) Get() *MetricsQueryRequest {
	return v.value
}

func (v *NullableMetricsQueryRequest) Set(val *MetricsQueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsQueryRequest(val *MetricsQueryRequest) *NullableMetricsQueryRequest {
	return &NullableMetricsQueryRequest{value: val, isSet: true}
}

func (v NullableMetricsQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


