/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the SpanQueryAggregateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanQueryAggregateResponse{}

// SpanQueryAggregateResponse struct for SpanQueryAggregateResponse
type SpanQueryAggregateResponse struct {
	Result SpanQueryAggregateResult `json:"result"`
}

// NewSpanQueryAggregateResponse instantiates a new SpanQueryAggregateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanQueryAggregateResponse(result SpanQueryAggregateResult) *SpanQueryAggregateResponse {
	this := SpanQueryAggregateResponse{}
	this.Result = result
	return &this
}

// NewSpanQueryAggregateResponseWithDefaults instantiates a new SpanQueryAggregateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanQueryAggregateResponseWithDefaults() *SpanQueryAggregateResponse {
	this := SpanQueryAggregateResponse{}
	return &this
}

// GetResult returns the Result field value
func (o *SpanQueryAggregateResponse) GetResult() SpanQueryAggregateResult {
	if o == nil {
		var ret SpanQueryAggregateResult
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *SpanQueryAggregateResponse) GetResultOk() (*SpanQueryAggregateResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *SpanQueryAggregateResponse) SetResult(v SpanQueryAggregateResult) {
	o.Result = v
}

func (o SpanQueryAggregateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanQueryAggregateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

type NullableSpanQueryAggregateResponse struct {
	value *SpanQueryAggregateResponse
	isSet bool
}

func (v NullableSpanQueryAggregateResponse) Get() *SpanQueryAggregateResponse {
	return v.value
}

func (v *NullableSpanQueryAggregateResponse) Set(val *SpanQueryAggregateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanQueryAggregateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanQueryAggregateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanQueryAggregateResponse(val *SpanQueryAggregateResponse) *NullableSpanQueryAggregateResponse {
	return &NullableSpanQueryAggregateResponse{value: val, isSet: true}
}

func (v NullableSpanQueryAggregateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanQueryAggregateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


