/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SloBurnRateCondition struct for SloBurnRateCondition
type SloBurnRateCondition struct {
	TriggerCondition
	// The burn rate percentage.
	BurnRateThreshold float64 `json:"burnRateThreshold"`
	// The relative time range for the burn rate percentage evaluation.
	TimeRange string `json:"timeRange"`
}

// NewSloBurnRateCondition instantiates a new SloBurnRateCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloBurnRateCondition(burnRateThreshold float64, timeRange string, triggerType string) *SloBurnRateCondition {
	this := SloBurnRateCondition{}
	var detectionMethod string = "StaticCondition"
	this.DetectionMethod = &detectionMethod
	this.TriggerType = triggerType
	this.BurnRateThreshold = burnRateThreshold
	this.TimeRange = timeRange
	return &this
}

// NewSloBurnRateConditionWithDefaults instantiates a new SloBurnRateCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloBurnRateConditionWithDefaults() *SloBurnRateCondition {
	this := SloBurnRateCondition{}
	return &this
}

// GetBurnRateThreshold returns the BurnRateThreshold field value
func (o *SloBurnRateCondition) GetBurnRateThreshold() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.BurnRateThreshold
}

// GetBurnRateThresholdOk returns a tuple with the BurnRateThreshold field value
// and a boolean to check if the value has been set.
func (o *SloBurnRateCondition) GetBurnRateThresholdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BurnRateThreshold, true
}

// SetBurnRateThreshold sets field value
func (o *SloBurnRateCondition) SetBurnRateThreshold(v float64) {
	o.BurnRateThreshold = v
}

// GetTimeRange returns the TimeRange field value
func (o *SloBurnRateCondition) GetTimeRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *SloBurnRateCondition) GetTimeRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *SloBurnRateCondition) SetTimeRange(v string) {
	o.TimeRange = v
}

func (o SloBurnRateCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTriggerCondition, errTriggerCondition := json.Marshal(o.TriggerCondition)
	if errTriggerCondition != nil {
		return []byte{}, errTriggerCondition
	}
	errTriggerCondition = json.Unmarshal([]byte(serializedTriggerCondition), &toSerialize)
	if errTriggerCondition != nil {
		return []byte{}, errTriggerCondition
	}
	if true {
		toSerialize["burnRateThreshold"] = o.BurnRateThreshold
	}
	if true {
		toSerialize["timeRange"] = o.TimeRange
	}
	return json.Marshal(toSerialize)
}

type NullableSloBurnRateCondition struct {
	value *SloBurnRateCondition
	isSet bool
}

func (v NullableSloBurnRateCondition) Get() *SloBurnRateCondition {
	return v.value
}

func (v *NullableSloBurnRateCondition) Set(val *SloBurnRateCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableSloBurnRateCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableSloBurnRateCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloBurnRateCondition(val *SloBurnRateCondition) *NullableSloBurnRateCondition {
	return &NullableSloBurnRateCondition{value: val, isSet: true}
}

func (v NullableSloBurnRateCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloBurnRateCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


