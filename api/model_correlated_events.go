/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CorrelatedEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorrelatedEvents{}

// CorrelatedEvents struct for CorrelatedEvents
type CorrelatedEvents struct {
	// Flag indicating correlation completion.
	CorrelationFinished bool `json:"correlationFinished"`
	// List of events.
	Events []CorrelatedEvent `json:"events"`
}

type _CorrelatedEvents CorrelatedEvents

// NewCorrelatedEvents instantiates a new CorrelatedEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorrelatedEvents(correlationFinished bool, events []CorrelatedEvent) *CorrelatedEvents {
	this := CorrelatedEvents{}
	this.CorrelationFinished = correlationFinished
	this.Events = events
	return &this
}

// NewCorrelatedEventsWithDefaults instantiates a new CorrelatedEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorrelatedEventsWithDefaults() *CorrelatedEvents {
	this := CorrelatedEvents{}
	return &this
}

// GetCorrelationFinished returns the CorrelationFinished field value
func (o *CorrelatedEvents) GetCorrelationFinished() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CorrelationFinished
}

// GetCorrelationFinishedOk returns a tuple with the CorrelationFinished field value
// and a boolean to check if the value has been set.
func (o *CorrelatedEvents) GetCorrelationFinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CorrelationFinished, true
}

// SetCorrelationFinished sets field value
func (o *CorrelatedEvents) SetCorrelationFinished(v bool) {
	o.CorrelationFinished = v
}

// GetEvents returns the Events field value
func (o *CorrelatedEvents) GetEvents() []CorrelatedEvent {
	if o == nil {
		var ret []CorrelatedEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *CorrelatedEvents) GetEventsOk() ([]CorrelatedEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *CorrelatedEvents) SetEvents(v []CorrelatedEvent) {
	o.Events = v
}

func (o CorrelatedEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorrelatedEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["correlationFinished"] = o.CorrelationFinished
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

func (o *CorrelatedEvents) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"correlationFinished",
		"events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCorrelatedEvents := _CorrelatedEvents{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCorrelatedEvents)

	if err != nil {
		return err
	}

	*o = CorrelatedEvents(varCorrelatedEvents)

	return err
}

type NullableCorrelatedEvents struct {
	value *CorrelatedEvents
	isSet bool
}

func (v NullableCorrelatedEvents) Get() *CorrelatedEvents {
	return v.value
}

func (v *NullableCorrelatedEvents) Set(val *CorrelatedEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableCorrelatedEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableCorrelatedEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorrelatedEvents(val *CorrelatedEvents) *NullableCorrelatedEvents {
	return &NullableCorrelatedEvents{value: val, isSet: true}
}

func (v NullableCorrelatedEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorrelatedEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


