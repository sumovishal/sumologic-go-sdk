/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
)

// DateTimeTracingValue struct for DateTimeTracingValue
type DateTimeTracingValue struct {
	TracingValue
	// Timestamp in UTC in the [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.
	Value time.Time `json:"value"`
}

// NewDateTimeTracingValue instantiates a new DateTimeTracingValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateTimeTracingValue(value time.Time, type_ string) *DateTimeTracingValue {
	this := DateTimeTracingValue{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewDateTimeTracingValueWithDefaults instantiates a new DateTimeTracingValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateTimeTracingValueWithDefaults() *DateTimeTracingValue {
	this := DateTimeTracingValue{}
	return &this
}

// GetValue returns the Value field value
func (o *DateTimeTracingValue) GetValue() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DateTimeTracingValue) GetValueOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DateTimeTracingValue) SetValue(v time.Time) {
	o.Value = v
}

func (o DateTimeTracingValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTracingValue, errTracingValue := json.Marshal(o.TracingValue)
	if errTracingValue != nil {
		return []byte{}, errTracingValue
	}
	errTracingValue = json.Unmarshal([]byte(serializedTracingValue), &toSerialize)
	if errTracingValue != nil {
		return []byte{}, errTracingValue
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableDateTimeTracingValue struct {
	value *DateTimeTracingValue
	isSet bool
}

func (v NullableDateTimeTracingValue) Get() *DateTimeTracingValue {
	return v.value
}

func (v *NullableDateTimeTracingValue) Set(val *DateTimeTracingValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTimeTracingValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTimeTracingValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTimeTracingValue(val *DateTimeTracingValue) *NullableDateTimeTracingValue {
	return &NullableDateTimeTracingValue{value: val, isSet: true}
}

func (v NullableDateTimeTracingValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTimeTracingValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


