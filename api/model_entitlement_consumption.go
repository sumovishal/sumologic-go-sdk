/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the EntitlementConsumption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntitlementConsumption{}

// EntitlementConsumption struct for EntitlementConsumption
type EntitlementConsumption struct {
	// String value denoting the type of entitlement. - `continuous` for Continuous Analytics, - `frequent` for Frequent Analytics, - `storage` for Total Storage, - `metrics` for Metrics.
	EntitlementType string `json:"entitlementType"`
	// Array of data points of the entitlement with their respective date range.
	Datapoints []DataPoints `json:"datapoints,omitempty"`
	// Operators used on the data. Available operators are `sum`, `average`, `usagePercentage`, `forecastValue`, `forecastPercentage`, and `forecastRemainingDays`. sum - Returns the sum of the usages. average - Returns the average of the usages. usagePercentage - Returns percentage of total capacity used for the startDate and endDate. forecastValue - Returns expected usage value assuming current usage behavior continues. forecastPercentage - Returns expected percentage usage by the endDate assuming current usage behavior continues. forecastRemainingDays- Returns the number of expected days, from today, that consumption will last assuming current usage behavior continues.
	Operators []Operator `json:"operators"`
	// Consumption model of the entitlements, available values are `DailyAverage`, `AnnualBucket`, and `Credits`.
	ContractType string `json:"contractType"`
}

// NewEntitlementConsumption instantiates a new EntitlementConsumption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlementConsumption(entitlementType string, operators []Operator, contractType string) *EntitlementConsumption {
	this := EntitlementConsumption{}
	this.EntitlementType = entitlementType
	this.Operators = operators
	this.ContractType = contractType
	return &this
}

// NewEntitlementConsumptionWithDefaults instantiates a new EntitlementConsumption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementConsumptionWithDefaults() *EntitlementConsumption {
	this := EntitlementConsumption{}
	return &this
}

// GetEntitlementType returns the EntitlementType field value
func (o *EntitlementConsumption) GetEntitlementType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntitlementType
}

// GetEntitlementTypeOk returns a tuple with the EntitlementType field value
// and a boolean to check if the value has been set.
func (o *EntitlementConsumption) GetEntitlementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntitlementType, true
}

// SetEntitlementType sets field value
func (o *EntitlementConsumption) SetEntitlementType(v string) {
	o.EntitlementType = v
}

// GetDatapoints returns the Datapoints field value if set, zero value otherwise.
func (o *EntitlementConsumption) GetDatapoints() []DataPoints {
	if o == nil || IsNil(o.Datapoints) {
		var ret []DataPoints
		return ret
	}
	return o.Datapoints
}

// GetDatapointsOk returns a tuple with the Datapoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementConsumption) GetDatapointsOk() ([]DataPoints, bool) {
	if o == nil || IsNil(o.Datapoints) {
		return nil, false
	}
	return o.Datapoints, true
}

// HasDatapoints returns a boolean if a field has been set.
func (o *EntitlementConsumption) HasDatapoints() bool {
	if o != nil && !IsNil(o.Datapoints) {
		return true
	}

	return false
}

// SetDatapoints gets a reference to the given []DataPoints and assigns it to the Datapoints field.
func (o *EntitlementConsumption) SetDatapoints(v []DataPoints) {
	o.Datapoints = v
}

// GetOperators returns the Operators field value
func (o *EntitlementConsumption) GetOperators() []Operator {
	if o == nil {
		var ret []Operator
		return ret
	}

	return o.Operators
}

// GetOperatorsOk returns a tuple with the Operators field value
// and a boolean to check if the value has been set.
func (o *EntitlementConsumption) GetOperatorsOk() ([]Operator, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operators, true
}

// SetOperators sets field value
func (o *EntitlementConsumption) SetOperators(v []Operator) {
	o.Operators = v
}

// GetContractType returns the ContractType field value
func (o *EntitlementConsumption) GetContractType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value
// and a boolean to check if the value has been set.
func (o *EntitlementConsumption) GetContractTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractType, true
}

// SetContractType sets field value
func (o *EntitlementConsumption) SetContractType(v string) {
	o.ContractType = v
}

func (o EntitlementConsumption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntitlementConsumption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entitlementType"] = o.EntitlementType
	if !IsNil(o.Datapoints) {
		toSerialize["datapoints"] = o.Datapoints
	}
	toSerialize["operators"] = o.Operators
	toSerialize["contractType"] = o.ContractType
	return toSerialize, nil
}

type NullableEntitlementConsumption struct {
	value *EntitlementConsumption
	isSet bool
}

func (v NullableEntitlementConsumption) Get() *EntitlementConsumption {
	return v.value
}

func (v *NullableEntitlementConsumption) Set(val *EntitlementConsumption) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementConsumption) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementConsumption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementConsumption(val *EntitlementConsumption) *NullableEntitlementConsumption {
	return &NullableEntitlementConsumption{value: val, isSet: true}
}

func (v NullableEntitlementConsumption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementConsumption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


