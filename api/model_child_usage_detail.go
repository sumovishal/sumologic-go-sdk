/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the ChildUsageDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChildUsageDetail{}

// ChildUsageDetail struct for ChildUsageDetail
type ChildUsageDetail struct {
	// Status of the child org.
	Status string `json:"status"`
	// Name of the child org.
	OrgName *string `json:"orgName,omitempty"`
	// The unique identifier of an organization. It consists of the deployment ID and the hexadecimal account ID separated by a dash `-` character.
	OrgId string `json:"orgId"`
	// Denotes the total number of credits provisioned for the child organization to use.
	AllocatedCredits *float64 `json:"allocatedCredits,omitempty"`
	Usages ChildUsage `json:"usages"`
}

// NewChildUsageDetail instantiates a new ChildUsageDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChildUsageDetail(status string, orgId string, usages ChildUsage) *ChildUsageDetail {
	this := ChildUsageDetail{}
	this.Status = status
	this.OrgId = orgId
	this.Usages = usages
	return &this
}

// NewChildUsageDetailWithDefaults instantiates a new ChildUsageDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChildUsageDetailWithDefaults() *ChildUsageDetail {
	this := ChildUsageDetail{}
	return &this
}

// GetStatus returns the Status field value
func (o *ChildUsageDetail) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ChildUsageDetail) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ChildUsageDetail) SetStatus(v string) {
	o.Status = v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *ChildUsageDetail) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildUsageDetail) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *ChildUsageDetail) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *ChildUsageDetail) SetOrgName(v string) {
	o.OrgName = &v
}

// GetOrgId returns the OrgId field value
func (o *ChildUsageDetail) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *ChildUsageDetail) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *ChildUsageDetail) SetOrgId(v string) {
	o.OrgId = v
}

// GetAllocatedCredits returns the AllocatedCredits field value if set, zero value otherwise.
func (o *ChildUsageDetail) GetAllocatedCredits() float64 {
	if o == nil || IsNil(o.AllocatedCredits) {
		var ret float64
		return ret
	}
	return *o.AllocatedCredits
}

// GetAllocatedCreditsOk returns a tuple with the AllocatedCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildUsageDetail) GetAllocatedCreditsOk() (*float64, bool) {
	if o == nil || IsNil(o.AllocatedCredits) {
		return nil, false
	}
	return o.AllocatedCredits, true
}

// HasAllocatedCredits returns a boolean if a field has been set.
func (o *ChildUsageDetail) HasAllocatedCredits() bool {
	if o != nil && !IsNil(o.AllocatedCredits) {
		return true
	}

	return false
}

// SetAllocatedCredits gets a reference to the given float64 and assigns it to the AllocatedCredits field.
func (o *ChildUsageDetail) SetAllocatedCredits(v float64) {
	o.AllocatedCredits = &v
}

// GetUsages returns the Usages field value
func (o *ChildUsageDetail) GetUsages() ChildUsage {
	if o == nil {
		var ret ChildUsage
		return ret
	}

	return o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value
// and a boolean to check if the value has been set.
func (o *ChildUsageDetail) GetUsagesOk() (*ChildUsage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usages, true
}

// SetUsages sets field value
func (o *ChildUsageDetail) SetUsages(v ChildUsage) {
	o.Usages = v
}

func (o ChildUsageDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChildUsageDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if !IsNil(o.OrgName) {
		toSerialize["orgName"] = o.OrgName
	}
	toSerialize["orgId"] = o.OrgId
	if !IsNil(o.AllocatedCredits) {
		toSerialize["allocatedCredits"] = o.AllocatedCredits
	}
	toSerialize["usages"] = o.Usages
	return toSerialize, nil
}

type NullableChildUsageDetail struct {
	value *ChildUsageDetail
	isSet bool
}

func (v NullableChildUsageDetail) Get() *ChildUsageDetail {
	return v.value
}

func (v *NullableChildUsageDetail) Set(val *ChildUsageDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableChildUsageDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableChildUsageDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChildUsageDetail(val *ChildUsageDetail) *NullableChildUsageDetail {
	return &NullableChildUsageDetail{value: val, isSet: true}
}

func (v NullableChildUsageDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChildUsageDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


