/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the SloBurnRateConditionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloBurnRateConditionAllOf{}

// SloBurnRateConditionAllOf A rule that defines parameters for burn rate based monitor evaluation and trigger notifications.
type SloBurnRateConditionAllOf struct {
	// The error budget depletion percentage.
	BurnRateThreshold *float64 `json:"burnRateThreshold,omitempty"`
	// The relative time range for measuring error budget depletion.
	TimeRange *string `json:"timeRange,omitempty"`
}

// NewSloBurnRateConditionAllOf instantiates a new SloBurnRateConditionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloBurnRateConditionAllOf() *SloBurnRateConditionAllOf {
	this := SloBurnRateConditionAllOf{}
	return &this
}

// NewSloBurnRateConditionAllOfWithDefaults instantiates a new SloBurnRateConditionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloBurnRateConditionAllOfWithDefaults() *SloBurnRateConditionAllOf {
	this := SloBurnRateConditionAllOf{}
	return &this
}

// GetBurnRateThreshold returns the BurnRateThreshold field value if set, zero value otherwise.
func (o *SloBurnRateConditionAllOf) GetBurnRateThreshold() float64 {
	if o == nil || IsNil(o.BurnRateThreshold) {
		var ret float64
		return ret
	}
	return *o.BurnRateThreshold
}

// GetBurnRateThresholdOk returns a tuple with the BurnRateThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloBurnRateConditionAllOf) GetBurnRateThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.BurnRateThreshold) {
		return nil, false
	}
	return o.BurnRateThreshold, true
}

// HasBurnRateThreshold returns a boolean if a field has been set.
func (o *SloBurnRateConditionAllOf) HasBurnRateThreshold() bool {
	if o != nil && !IsNil(o.BurnRateThreshold) {
		return true
	}

	return false
}

// SetBurnRateThreshold gets a reference to the given float64 and assigns it to the BurnRateThreshold field.
func (o *SloBurnRateConditionAllOf) SetBurnRateThreshold(v float64) {
	o.BurnRateThreshold = &v
}

// GetTimeRange returns the TimeRange field value if set, zero value otherwise.
func (o *SloBurnRateConditionAllOf) GetTimeRange() string {
	if o == nil || IsNil(o.TimeRange) {
		var ret string
		return ret
	}
	return *o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloBurnRateConditionAllOf) GetTimeRangeOk() (*string, bool) {
	if o == nil || IsNil(o.TimeRange) {
		return nil, false
	}
	return o.TimeRange, true
}

// HasTimeRange returns a boolean if a field has been set.
func (o *SloBurnRateConditionAllOf) HasTimeRange() bool {
	if o != nil && !IsNil(o.TimeRange) {
		return true
	}

	return false
}

// SetTimeRange gets a reference to the given string and assigns it to the TimeRange field.
func (o *SloBurnRateConditionAllOf) SetTimeRange(v string) {
	o.TimeRange = &v
}

func (o SloBurnRateConditionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloBurnRateConditionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BurnRateThreshold) {
		toSerialize["burnRateThreshold"] = o.BurnRateThreshold
	}
	if !IsNil(o.TimeRange) {
		toSerialize["timeRange"] = o.TimeRange
	}
	return toSerialize, nil
}

type NullableSloBurnRateConditionAllOf struct {
	value *SloBurnRateConditionAllOf
	isSet bool
}

func (v NullableSloBurnRateConditionAllOf) Get() *SloBurnRateConditionAllOf {
	return v.value
}

func (v *NullableSloBurnRateConditionAllOf) Set(val *SloBurnRateConditionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSloBurnRateConditionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSloBurnRateConditionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloBurnRateConditionAllOf(val *SloBurnRateConditionAllOf) *NullableSloBurnRateConditionAllOf {
	return &NullableSloBurnRateConditionAllOf{value: val, isSet: true}
}

func (v NullableSloBurnRateConditionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloBurnRateConditionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


