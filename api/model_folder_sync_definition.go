/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FolderSyncDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderSyncDefinition{}

// FolderSyncDefinition struct for FolderSyncDefinition
type FolderSyncDefinition struct {
	ContentSyncDefinition
	// An optional description for the folder.
	Description *string `json:"description,omitempty"`
	// The items in the folder, a list of Dashboard and/or Folder items.
	Children []ContentSyncDefinition `json:"children"`
}

type _FolderSyncDefinition FolderSyncDefinition

// NewFolderSyncDefinition instantiates a new FolderSyncDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderSyncDefinition(children []ContentSyncDefinition, type_ string, name string) *FolderSyncDefinition {
	this := FolderSyncDefinition{}
	this.Type = type_
	this.Name = name
	this.Children = children
	return &this
}

// NewFolderSyncDefinitionWithDefaults instantiates a new FolderSyncDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderSyncDefinitionWithDefaults() *FolderSyncDefinition {
	this := FolderSyncDefinition{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FolderSyncDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderSyncDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FolderSyncDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FolderSyncDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetChildren returns the Children field value
func (o *FolderSyncDefinition) GetChildren() []ContentSyncDefinition {
	if o == nil {
		var ret []ContentSyncDefinition
		return ret
	}

	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value
// and a boolean to check if the value has been set.
func (o *FolderSyncDefinition) GetChildrenOk() ([]ContentSyncDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Children, true
}

// SetChildren sets field value
func (o *FolderSyncDefinition) SetChildren(v []ContentSyncDefinition) {
	o.Children = v
}

func (o FolderSyncDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderSyncDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedContentSyncDefinition, errContentSyncDefinition := json.Marshal(o.ContentSyncDefinition)
	if errContentSyncDefinition != nil {
		return map[string]interface{}{}, errContentSyncDefinition
	}
	errContentSyncDefinition = json.Unmarshal([]byte(serializedContentSyncDefinition), &toSerialize)
	if errContentSyncDefinition != nil {
		return map[string]interface{}{}, errContentSyncDefinition
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["children"] = o.Children
	return toSerialize, nil
}

func (o *FolderSyncDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"children",
		"type",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFolderSyncDefinition := _FolderSyncDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFolderSyncDefinition)

	if err != nil {
		return err
	}

	*o = FolderSyncDefinition(varFolderSyncDefinition)

	return err
}

type NullableFolderSyncDefinition struct {
	value *FolderSyncDefinition
	isSet bool
}

func (v NullableFolderSyncDefinition) Get() *FolderSyncDefinition {
	return v.value
}

func (v *NullableFolderSyncDefinition) Set(val *FolderSyncDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderSyncDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderSyncDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderSyncDefinition(val *FolderSyncDefinition) *NullableFolderSyncDefinition {
	return &NullableFolderSyncDefinition{value: val, isSet: true}
}

func (v NullableFolderSyncDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderSyncDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


