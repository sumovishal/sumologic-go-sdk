/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// DataValue struct for DataValue
type DataValue struct {
	// The value of the data point in units.
	Value float64 `json:"value"`
	// The unit of the entitlement, possible values are `GB`, `DPM`, or `Credits`.
	Unit string `json:"unit"`
}

// NewDataValue instantiates a new DataValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataValue(value float64, unit string) *DataValue {
	this := DataValue{}
	this.Value = value
	this.Unit = unit
	return &this
}

// NewDataValueWithDefaults instantiates a new DataValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataValueWithDefaults() *DataValue {
	this := DataValue{}
	return &this
}

// GetValue returns the Value field value
func (o *DataValue) GetValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DataValue) GetValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DataValue) SetValue(v float64) {
	o.Value = v
}

// GetUnit returns the Unit field value
func (o *DataValue) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *DataValue) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *DataValue) SetUnit(v string) {
	o.Unit = v
}

func (o DataValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableDataValue struct {
	value *DataValue
	isSet bool
}

func (v NullableDataValue) Get() *DataValue {
	return v.value
}

func (v *NullableDataValue) Set(val *DataValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDataValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDataValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataValue(val *DataValue) *NullableDataValue {
	return &NullableDataValue{value: val, isSet: true}
}

func (v NullableDataValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


