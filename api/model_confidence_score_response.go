/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfidenceScoreResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfidenceScoreResponse{}

// ConfidenceScoreResponse CSE insight confidence score.
type ConfidenceScoreResponse struct {
	// List of confidence scores to the CSE Insights.
	ConfidenceScore string `json:"confidenceScore"`
}

type _ConfidenceScoreResponse ConfidenceScoreResponse

// NewConfidenceScoreResponse instantiates a new ConfidenceScoreResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfidenceScoreResponse(confidenceScore string) *ConfidenceScoreResponse {
	this := ConfidenceScoreResponse{}
	this.ConfidenceScore = confidenceScore
	return &this
}

// NewConfidenceScoreResponseWithDefaults instantiates a new ConfidenceScoreResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfidenceScoreResponseWithDefaults() *ConfidenceScoreResponse {
	this := ConfidenceScoreResponse{}
	return &this
}

// GetConfidenceScore returns the ConfidenceScore field value
func (o *ConfidenceScoreResponse) GetConfidenceScore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfidenceScore
}

// GetConfidenceScoreOk returns a tuple with the ConfidenceScore field value
// and a boolean to check if the value has been set.
func (o *ConfidenceScoreResponse) GetConfidenceScoreOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfidenceScore, true
}

// SetConfidenceScore sets field value
func (o *ConfidenceScoreResponse) SetConfidenceScore(v string) {
	o.ConfidenceScore = v
}

func (o ConfidenceScoreResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfidenceScoreResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["confidenceScore"] = o.ConfidenceScore
	return toSerialize, nil
}

func (o *ConfidenceScoreResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"confidenceScore",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfidenceScoreResponse := _ConfidenceScoreResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfidenceScoreResponse)

	if err != nil {
		return err
	}

	*o = ConfidenceScoreResponse(varConfidenceScoreResponse)

	return err
}

type NullableConfidenceScoreResponse struct {
	value *ConfidenceScoreResponse
	isSet bool
}

func (v NullableConfidenceScoreResponse) Get() *ConfidenceScoreResponse {
	return v.value
}

func (v *NullableConfidenceScoreResponse) Set(val *ConfidenceScoreResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConfidenceScoreResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConfidenceScoreResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfidenceScoreResponse(val *ConfidenceScoreResponse) *NullableConfidenceScoreResponse {
	return &NullableConfidenceScoreResponse{value: val, isSet: true}
}

func (v NullableConfidenceScoreResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfidenceScoreResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


