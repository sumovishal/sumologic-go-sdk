/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SignalContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignalContext{}

// SignalContext struct for SignalContext
type SignalContext struct {
	// Type of context of the request object.
	ContextType string `json:"contextType"`
}

// NewSignalContext instantiates a new SignalContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalContext(contextType string) *SignalContext {
	this := SignalContext{}
	this.ContextType = contextType
	return &this
}

// NewSignalContextWithDefaults instantiates a new SignalContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalContextWithDefaults() *SignalContext {
	this := SignalContext{}
	return &this
}

// GetContextType returns the ContextType field value
func (o *SignalContext) GetContextType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContextType
}

// GetContextTypeOk returns a tuple with the ContextType field value
// and a boolean to check if the value has been set.
func (o *SignalContext) GetContextTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContextType, true
}

// SetContextType sets field value
func (o *SignalContext) SetContextType(v string) {
	o.ContextType = v
}

func (o SignalContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignalContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contextType"] = o.ContextType
	return toSerialize, nil
}

type NullableSignalContext struct {
	value *SignalContext
	isSet bool
}

func (v NullableSignalContext) Get() *SignalContext {
	return v.value
}

func (v *NullableSignalContext) Set(val *SignalContext) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalContext) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalContext(val *SignalContext) *NullableSignalContext {
	return &NullableSignalContext{value: val, isSet: true}
}

func (v NullableSignalContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


