/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// AccessKeyCreateRequest struct for AccessKeyCreateRequest
type AccessKeyCreateRequest struct {
	// A name for the access key to be created.
	Label string `json:"label"`
	// An array of domains for which the access key is valid. Whether Sumo Logic accepts or rejects an API request depends on whether it contains an ORIGIN header and the entries in the allowlist. Sumo Logic will reject:   1. Requests with an ORIGIN header but the allowlist is empty.   2. Requests with an ORIGIN header that don't match any entry in the allowlist.
	CorsHeaders []string `json:"corsHeaders,omitempty"`
}

// NewAccessKeyCreateRequest instantiates a new AccessKeyCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessKeyCreateRequest(label string) *AccessKeyCreateRequest {
	this := AccessKeyCreateRequest{}
	this.Label = label
	return &this
}

// NewAccessKeyCreateRequestWithDefaults instantiates a new AccessKeyCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessKeyCreateRequestWithDefaults() *AccessKeyCreateRequest {
	this := AccessKeyCreateRequest{}
	return &this
}

// GetLabel returns the Label field value
func (o *AccessKeyCreateRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *AccessKeyCreateRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *AccessKeyCreateRequest) SetLabel(v string) {
	o.Label = v
}

// GetCorsHeaders returns the CorsHeaders field value if set, zero value otherwise.
func (o *AccessKeyCreateRequest) GetCorsHeaders() []string {
	if o == nil || o.CorsHeaders == nil {
		var ret []string
		return ret
	}
	return o.CorsHeaders
}

// GetCorsHeadersOk returns a tuple with the CorsHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKeyCreateRequest) GetCorsHeadersOk() ([]string, bool) {
	if o == nil || o.CorsHeaders == nil {
		return nil, false
	}
	return o.CorsHeaders, true
}

// HasCorsHeaders returns a boolean if a field has been set.
func (o *AccessKeyCreateRequest) HasCorsHeaders() bool {
	if o != nil && o.CorsHeaders != nil {
		return true
	}

	return false
}

// SetCorsHeaders gets a reference to the given []string and assigns it to the CorsHeaders field.
func (o *AccessKeyCreateRequest) SetCorsHeaders(v []string) {
	o.CorsHeaders = v
}

func (o AccessKeyCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if o.CorsHeaders != nil {
		toSerialize["corsHeaders"] = o.CorsHeaders
	}
	return json.Marshal(toSerialize)
}

type NullableAccessKeyCreateRequest struct {
	value *AccessKeyCreateRequest
	isSet bool
}

func (v NullableAccessKeyCreateRequest) Get() *AccessKeyCreateRequest {
	return v.value
}

func (v *NullableAccessKeyCreateRequest) Set(val *AccessKeyCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessKeyCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessKeyCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessKeyCreateRequest(val *AccessKeyCreateRequest) *NullableAccessKeyCreateRequest {
	return &NullableAccessKeyCreateRequest{value: val, isSet: true}
}

func (v NullableAccessKeyCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessKeyCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


