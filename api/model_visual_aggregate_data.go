/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VisualAggregateData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualAggregateData{}

// VisualAggregateData struct for VisualAggregateData
type VisualAggregateData struct {
	// The maximum value in the series.
	Max float64 `json:"max"`
	// The minimum value in the series.
	Min float64 `json:"min"`
	// The average value in the series.
	Avg float64 `json:"avg"`
	// The sum of all the values in the series.
	Sum float64 `json:"sum"`
	// The last value in the series.
	Latest float64 `json:"latest"`
	// The number of values in the series.
	Count *float64 `json:"count,omitempty"`
}

type _VisualAggregateData VisualAggregateData

// NewVisualAggregateData instantiates a new VisualAggregateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualAggregateData(max float64, min float64, avg float64, sum float64, latest float64) *VisualAggregateData {
	this := VisualAggregateData{}
	this.Max = max
	this.Min = min
	this.Avg = avg
	this.Sum = sum
	this.Latest = latest
	return &this
}

// NewVisualAggregateDataWithDefaults instantiates a new VisualAggregateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualAggregateDataWithDefaults() *VisualAggregateData {
	this := VisualAggregateData{}
	return &this
}

// GetMax returns the Max field value
func (o *VisualAggregateData) GetMax() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Max
}

// GetMaxOk returns a tuple with the Max field value
// and a boolean to check if the value has been set.
func (o *VisualAggregateData) GetMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Max, true
}

// SetMax sets field value
func (o *VisualAggregateData) SetMax(v float64) {
	o.Max = v
}

// GetMin returns the Min field value
func (o *VisualAggregateData) GetMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Min
}

// GetMinOk returns a tuple with the Min field value
// and a boolean to check if the value has been set.
func (o *VisualAggregateData) GetMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Min, true
}

// SetMin sets field value
func (o *VisualAggregateData) SetMin(v float64) {
	o.Min = v
}

// GetAvg returns the Avg field value
func (o *VisualAggregateData) GetAvg() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Avg
}

// GetAvgOk returns a tuple with the Avg field value
// and a boolean to check if the value has been set.
func (o *VisualAggregateData) GetAvgOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Avg, true
}

// SetAvg sets field value
func (o *VisualAggregateData) SetAvg(v float64) {
	o.Avg = v
}

// GetSum returns the Sum field value
func (o *VisualAggregateData) GetSum() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Sum
}

// GetSumOk returns a tuple with the Sum field value
// and a boolean to check if the value has been set.
func (o *VisualAggregateData) GetSumOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sum, true
}

// SetSum sets field value
func (o *VisualAggregateData) SetSum(v float64) {
	o.Sum = v
}

// GetLatest returns the Latest field value
func (o *VisualAggregateData) GetLatest() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latest
}

// GetLatestOk returns a tuple with the Latest field value
// and a boolean to check if the value has been set.
func (o *VisualAggregateData) GetLatestOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latest, true
}

// SetLatest sets field value
func (o *VisualAggregateData) SetLatest(v float64) {
	o.Latest = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *VisualAggregateData) GetCount() float64 {
	if o == nil || IsNil(o.Count) {
		var ret float64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualAggregateData) GetCountOk() (*float64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *VisualAggregateData) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given float64 and assigns it to the Count field.
func (o *VisualAggregateData) SetCount(v float64) {
	o.Count = &v
}

func (o VisualAggregateData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualAggregateData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["max"] = o.Max
	toSerialize["min"] = o.Min
	toSerialize["avg"] = o.Avg
	toSerialize["sum"] = o.Sum
	toSerialize["latest"] = o.Latest
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

func (o *VisualAggregateData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"max",
		"min",
		"avg",
		"sum",
		"latest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVisualAggregateData := _VisualAggregateData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVisualAggregateData)

	if err != nil {
		return err
	}

	*o = VisualAggregateData(varVisualAggregateData)

	return err
}

type NullableVisualAggregateData struct {
	value *VisualAggregateData
	isSet bool
}

func (v NullableVisualAggregateData) Get() *VisualAggregateData {
	return v.value
}

func (v *NullableVisualAggregateData) Set(val *VisualAggregateData) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualAggregateData) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualAggregateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualAggregateData(val *VisualAggregateData) *NullableVisualAggregateData {
	return &NullableVisualAggregateData{value: val, isSet: true}
}

func (v NullableVisualAggregateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualAggregateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


