/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VisualPointData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VisualPointData{}

// VisualPointData struct for VisualPointData
type VisualPointData struct {
	// Value that represents a point on the x axis.
	X *float64 `json:"x,omitempty"`
	// Value that represents a point on the y axis.
	Y string `json:"y"`
	// Whether the field is interpolated or extrapolated - not derived from underlying data.
	IsFilled *bool `json:"isFilled,omitempty"`
	// Values that represents a point on the x axis.
	XAxisValues *map[string]string `json:"xAxisValues,omitempty"`
	OutlierData *VisualOutlierData `json:"outlierData,omitempty"`
}

// NewVisualPointData instantiates a new VisualPointData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualPointData(y string) *VisualPointData {
	this := VisualPointData{}
	this.Y = y
	var isFilled bool = false
	this.IsFilled = &isFilled
	return &this
}

// NewVisualPointDataWithDefaults instantiates a new VisualPointData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualPointDataWithDefaults() *VisualPointData {
	this := VisualPointData{}
	var isFilled bool = false
	this.IsFilled = &isFilled
	return &this
}

// GetX returns the X field value if set, zero value otherwise.
func (o *VisualPointData) GetX() float64 {
	if o == nil || IsNil(o.X) {
		var ret float64
		return ret
	}
	return *o.X
}

// GetXOk returns a tuple with the X field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualPointData) GetXOk() (*float64, bool) {
	if o == nil || IsNil(o.X) {
		return nil, false
	}
	return o.X, true
}

// HasX returns a boolean if a field has been set.
func (o *VisualPointData) HasX() bool {
	if o != nil && !IsNil(o.X) {
		return true
	}

	return false
}

// SetX gets a reference to the given float64 and assigns it to the X field.
func (o *VisualPointData) SetX(v float64) {
	o.X = &v
}

// GetY returns the Y field value
func (o *VisualPointData) GetY() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *VisualPointData) GetYOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *VisualPointData) SetY(v string) {
	o.Y = v
}

// GetIsFilled returns the IsFilled field value if set, zero value otherwise.
func (o *VisualPointData) GetIsFilled() bool {
	if o == nil || IsNil(o.IsFilled) {
		var ret bool
		return ret
	}
	return *o.IsFilled
}

// GetIsFilledOk returns a tuple with the IsFilled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualPointData) GetIsFilledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFilled) {
		return nil, false
	}
	return o.IsFilled, true
}

// HasIsFilled returns a boolean if a field has been set.
func (o *VisualPointData) HasIsFilled() bool {
	if o != nil && !IsNil(o.IsFilled) {
		return true
	}

	return false
}

// SetIsFilled gets a reference to the given bool and assigns it to the IsFilled field.
func (o *VisualPointData) SetIsFilled(v bool) {
	o.IsFilled = &v
}

// GetXAxisValues returns the XAxisValues field value if set, zero value otherwise.
func (o *VisualPointData) GetXAxisValues() map[string]string {
	if o == nil || IsNil(o.XAxisValues) {
		var ret map[string]string
		return ret
	}
	return *o.XAxisValues
}

// GetXAxisValuesOk returns a tuple with the XAxisValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualPointData) GetXAxisValuesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.XAxisValues) {
		return nil, false
	}
	return o.XAxisValues, true
}

// HasXAxisValues returns a boolean if a field has been set.
func (o *VisualPointData) HasXAxisValues() bool {
	if o != nil && !IsNil(o.XAxisValues) {
		return true
	}

	return false
}

// SetXAxisValues gets a reference to the given map[string]string and assigns it to the XAxisValues field.
func (o *VisualPointData) SetXAxisValues(v map[string]string) {
	o.XAxisValues = &v
}

// GetOutlierData returns the OutlierData field value if set, zero value otherwise.
func (o *VisualPointData) GetOutlierData() VisualOutlierData {
	if o == nil || IsNil(o.OutlierData) {
		var ret VisualOutlierData
		return ret
	}
	return *o.OutlierData
}

// GetOutlierDataOk returns a tuple with the OutlierData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualPointData) GetOutlierDataOk() (*VisualOutlierData, bool) {
	if o == nil || IsNil(o.OutlierData) {
		return nil, false
	}
	return o.OutlierData, true
}

// HasOutlierData returns a boolean if a field has been set.
func (o *VisualPointData) HasOutlierData() bool {
	if o != nil && !IsNil(o.OutlierData) {
		return true
	}

	return false
}

// SetOutlierData gets a reference to the given VisualOutlierData and assigns it to the OutlierData field.
func (o *VisualPointData) SetOutlierData(v VisualOutlierData) {
	o.OutlierData = &v
}

func (o VisualPointData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VisualPointData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.X) {
		toSerialize["x"] = o.X
	}
	toSerialize["y"] = o.Y
	if !IsNil(o.IsFilled) {
		toSerialize["isFilled"] = o.IsFilled
	}
	if !IsNil(o.XAxisValues) {
		toSerialize["xAxisValues"] = o.XAxisValues
	}
	if !IsNil(o.OutlierData) {
		toSerialize["outlierData"] = o.OutlierData
	}
	return toSerialize, nil
}

type NullableVisualPointData struct {
	value *VisualPointData
	isSet bool
}

func (v NullableVisualPointData) Get() *VisualPointData {
	return v.value
}

func (v *NullableVisualPointData) Set(val *VisualPointData) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualPointData) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualPointData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualPointData(val *VisualPointData) *NullableVisualPointData {
	return &NullableVisualPointData{value: val, isSet: true}
}

func (v NullableVisualPointData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualPointData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


