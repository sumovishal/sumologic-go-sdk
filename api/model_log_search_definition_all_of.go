/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LogSearchDefinitionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogSearchDefinitionAllOf{}

// LogSearchDefinitionAllOf struct for LogSearchDefinitionAllOf
type LogSearchDefinitionAllOf struct {
	// Name of the item in the content library.
	Name string `json:"name"`
	// Item description in the content library.
	Description *string `json:"description,omitempty"`
	Schedule *LogSearchScheduleSyncDefinition `json:"schedule,omitempty"`
	// Aggregate Results Settings and View configurations, Legends settings, and different visualisation settings overrides. Leave this field empty to use the defaults. This property contains JSON object encoded as a string. 
	Properties *string `json:"properties,omitempty"`
}

// NewLogSearchDefinitionAllOf instantiates a new LogSearchDefinitionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogSearchDefinitionAllOf(name string) *LogSearchDefinitionAllOf {
	this := LogSearchDefinitionAllOf{}
	this.Name = name
	return &this
}

// NewLogSearchDefinitionAllOfWithDefaults instantiates a new LogSearchDefinitionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogSearchDefinitionAllOfWithDefaults() *LogSearchDefinitionAllOf {
	this := LogSearchDefinitionAllOf{}
	return &this
}

// GetName returns the Name field value
func (o *LogSearchDefinitionAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LogSearchDefinitionAllOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogSearchDefinitionAllOf) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LogSearchDefinitionAllOf) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSearchDefinitionAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LogSearchDefinitionAllOf) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LogSearchDefinitionAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *LogSearchDefinitionAllOf) GetSchedule() LogSearchScheduleSyncDefinition {
	if o == nil || IsNil(o.Schedule) {
		var ret LogSearchScheduleSyncDefinition
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSearchDefinitionAllOf) GetScheduleOk() (*LogSearchScheduleSyncDefinition, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *LogSearchDefinitionAllOf) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given LogSearchScheduleSyncDefinition and assigns it to the Schedule field.
func (o *LogSearchDefinitionAllOf) SetSchedule(v LogSearchScheduleSyncDefinition) {
	o.Schedule = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *LogSearchDefinitionAllOf) GetProperties() string {
	if o == nil || IsNil(o.Properties) {
		var ret string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSearchDefinitionAllOf) GetPropertiesOk() (*string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *LogSearchDefinitionAllOf) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given string and assigns it to the Properties field.
func (o *LogSearchDefinitionAllOf) SetProperties(v string) {
	o.Properties = &v
}

func (o LogSearchDefinitionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogSearchDefinitionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableLogSearchDefinitionAllOf struct {
	value *LogSearchDefinitionAllOf
	isSet bool
}

func (v NullableLogSearchDefinitionAllOf) Get() *LogSearchDefinitionAllOf {
	return v.value
}

func (v *NullableLogSearchDefinitionAllOf) Set(val *LogSearchDefinitionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSearchDefinitionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSearchDefinitionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSearchDefinitionAllOf(val *LogSearchDefinitionAllOf) *NullableLogSearchDefinitionAllOf {
	return &NullableLogSearchDefinitionAllOf{value: val, isSet: true}
}

func (v NullableLogSearchDefinitionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSearchDefinitionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


