/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BulkAsyncStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkAsyncStatusResponse{}

// BulkAsyncStatusResponse struct for BulkAsyncStatusResponse
type BulkAsyncStatusResponse struct {
	// Map of job identifiers to job statuses.
	JobStatuses map[string]AsyncJobStatus `json:"jobStatuses"`
	// Map of content identifiers to error messages for all failed job requests
	Errors map[string]BulkErrorResponse `json:"errors"`
}

type _BulkAsyncStatusResponse BulkAsyncStatusResponse

// NewBulkAsyncStatusResponse instantiates a new BulkAsyncStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkAsyncStatusResponse(jobStatuses map[string]AsyncJobStatus, errors map[string]BulkErrorResponse) *BulkAsyncStatusResponse {
	this := BulkAsyncStatusResponse{}
	this.JobStatuses = jobStatuses
	this.Errors = errors
	return &this
}

// NewBulkAsyncStatusResponseWithDefaults instantiates a new BulkAsyncStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkAsyncStatusResponseWithDefaults() *BulkAsyncStatusResponse {
	this := BulkAsyncStatusResponse{}
	return &this
}

// GetJobStatuses returns the JobStatuses field value
func (o *BulkAsyncStatusResponse) GetJobStatuses() map[string]AsyncJobStatus {
	if o == nil {
		var ret map[string]AsyncJobStatus
		return ret
	}

	return o.JobStatuses
}

// GetJobStatusesOk returns a tuple with the JobStatuses field value
// and a boolean to check if the value has been set.
func (o *BulkAsyncStatusResponse) GetJobStatusesOk() (*map[string]AsyncJobStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobStatuses, true
}

// SetJobStatuses sets field value
func (o *BulkAsyncStatusResponse) SetJobStatuses(v map[string]AsyncJobStatus) {
	o.JobStatuses = v
}

// GetErrors returns the Errors field value
func (o *BulkAsyncStatusResponse) GetErrors() map[string]BulkErrorResponse {
	if o == nil {
		var ret map[string]BulkErrorResponse
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *BulkAsyncStatusResponse) GetErrorsOk() (*map[string]BulkErrorResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Errors, true
}

// SetErrors sets field value
func (o *BulkAsyncStatusResponse) SetErrors(v map[string]BulkErrorResponse) {
	o.Errors = v
}

func (o BulkAsyncStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkAsyncStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jobStatuses"] = o.JobStatuses
	toSerialize["errors"] = o.Errors
	return toSerialize, nil
}

func (o *BulkAsyncStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jobStatuses",
		"errors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBulkAsyncStatusResponse := _BulkAsyncStatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBulkAsyncStatusResponse)

	if err != nil {
		return err
	}

	*o = BulkAsyncStatusResponse(varBulkAsyncStatusResponse)

	return err
}

type NullableBulkAsyncStatusResponse struct {
	value *BulkAsyncStatusResponse
	isSet bool
}

func (v NullableBulkAsyncStatusResponse) Get() *BulkAsyncStatusResponse {
	return v.value
}

func (v *NullableBulkAsyncStatusResponse) Set(val *BulkAsyncStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkAsyncStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkAsyncStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkAsyncStatusResponse(val *BulkAsyncStatusResponse) *NullableBulkAsyncStatusResponse {
	return &NullableBulkAsyncStatusResponse{value: val, isSet: true}
}

func (v NullableBulkAsyncStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkAsyncStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


