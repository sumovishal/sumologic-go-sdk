/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BeginBoundedTimeRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BeginBoundedTimeRange{}

// BeginBoundedTimeRange struct for BeginBoundedTimeRange
type BeginBoundedTimeRange struct {
	ResolvableTimeRange
	From TimeRangeBoundary `json:"from"`
	To *TimeRangeBoundary `json:"to,omitempty"`
}

type _BeginBoundedTimeRange BeginBoundedTimeRange

// NewBeginBoundedTimeRange instantiates a new BeginBoundedTimeRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeginBoundedTimeRange(from TimeRangeBoundary, type_ string) *BeginBoundedTimeRange {
	this := BeginBoundedTimeRange{}
	this.Type = type_
	this.From = from
	return &this
}

// NewBeginBoundedTimeRangeWithDefaults instantiates a new BeginBoundedTimeRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeginBoundedTimeRangeWithDefaults() *BeginBoundedTimeRange {
	this := BeginBoundedTimeRange{}
	return &this
}

// GetFrom returns the From field value
func (o *BeginBoundedTimeRange) GetFrom() TimeRangeBoundary {
	if o == nil {
		var ret TimeRangeBoundary
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *BeginBoundedTimeRange) GetFromOk() (*TimeRangeBoundary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *BeginBoundedTimeRange) SetFrom(v TimeRangeBoundary) {
	o.From = v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *BeginBoundedTimeRange) GetTo() TimeRangeBoundary {
	if o == nil || IsNil(o.To) {
		var ret TimeRangeBoundary
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeginBoundedTimeRange) GetToOk() (*TimeRangeBoundary, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *BeginBoundedTimeRange) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given TimeRangeBoundary and assigns it to the To field.
func (o *BeginBoundedTimeRange) SetTo(v TimeRangeBoundary) {
	o.To = &v
}

func (o BeginBoundedTimeRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BeginBoundedTimeRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedResolvableTimeRange, errResolvableTimeRange := json.Marshal(o.ResolvableTimeRange)
	if errResolvableTimeRange != nil {
		return map[string]interface{}{}, errResolvableTimeRange
	}
	errResolvableTimeRange = json.Unmarshal([]byte(serializedResolvableTimeRange), &toSerialize)
	if errResolvableTimeRange != nil {
		return map[string]interface{}{}, errResolvableTimeRange
	}
	toSerialize["from"] = o.From
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

func (o *BeginBoundedTimeRange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBeginBoundedTimeRange := _BeginBoundedTimeRange{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBeginBoundedTimeRange)

	if err != nil {
		return err
	}

	*o = BeginBoundedTimeRange(varBeginBoundedTimeRange)

	return err
}

type NullableBeginBoundedTimeRange struct {
	value *BeginBoundedTimeRange
	isSet bool
}

func (v NullableBeginBoundedTimeRange) Get() *BeginBoundedTimeRange {
	return v.value
}

func (v *NullableBeginBoundedTimeRange) Set(val *BeginBoundedTimeRange) {
	v.value = val
	v.isSet = true
}

func (v NullableBeginBoundedTimeRange) IsSet() bool {
	return v.isSet
}

func (v *NullableBeginBoundedTimeRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeginBoundedTimeRange(val *BeginBoundedTimeRange) *NullableBeginBoundedTimeRange {
	return &NullableBeginBoundedTimeRange{value: val, isSet: true}
}

func (v NullableBeginBoundedTimeRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeginBoundedTimeRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


