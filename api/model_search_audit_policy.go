/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SearchAuditPolicy Search Audit policy.
type SearchAuditPolicy struct {
	// Whether the Search Audit policy is enabled.
	Enabled bool `json:"enabled"`
}

// NewSearchAuditPolicy instantiates a new SearchAuditPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchAuditPolicy(enabled bool) *SearchAuditPolicy {
	this := SearchAuditPolicy{}
	this.Enabled = enabled
	return &this
}

// NewSearchAuditPolicyWithDefaults instantiates a new SearchAuditPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchAuditPolicyWithDefaults() *SearchAuditPolicy {
	this := SearchAuditPolicy{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *SearchAuditPolicy) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SearchAuditPolicy) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SearchAuditPolicy) SetEnabled(v bool) {
	o.Enabled = v
}

func (o SearchAuditPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableSearchAuditPolicy struct {
	value *SearchAuditPolicy
	isSet bool
}

func (v NullableSearchAuditPolicy) Get() *SearchAuditPolicy {
	return v.value
}

func (v *NullableSearchAuditPolicy) Set(val *SearchAuditPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchAuditPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchAuditPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchAuditPolicy(val *SearchAuditPolicy) *NullableSearchAuditPolicy {
	return &NullableSearchAuditPolicy{value: val, isSet: true}
}

func (v NullableSearchAuditPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchAuditPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


