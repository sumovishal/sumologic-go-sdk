/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
)

// RuleAndBucketDetail struct for RuleAndBucketDetail
type RuleAndBucketDetail struct {
	// The `id` of the Partition or Scheduled View the rule applies to.
	IndexId string `json:"indexId"`
	// The data forwarding destination id.
	DestinationId string `json:"destinationId"`
	// True when the data forwarding rule is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Specify the path prefix to a directory in the S3 bucket and how to format the file name.
	FileFormat *string `json:"fileFormat,omitempty"`
	// Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
	CreatedAt time.Time `json:"createdAt"`
	// Identifier of the user who created the resource.
	CreatedBy string `json:"createdBy"`
	// Last modification timestamp in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// Identifier of the user who last modified the resource.
	ModifiedBy string `json:"modifiedBy"`
	// The unique identifier of the data forwarding rule.
	Id *string `json:"id,omitempty"`
	Bucket map[string]interface{} `json:"bucket,omitempty"`
}

// NewRuleAndBucketDetail instantiates a new RuleAndBucketDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleAndBucketDetail(indexId string, destinationId string, createdAt time.Time, createdBy string, modifiedAt time.Time, modifiedBy string) *RuleAndBucketDetail {
	this := RuleAndBucketDetail{}
	this.IndexId = indexId
	this.DestinationId = destinationId
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	return &this
}

// NewRuleAndBucketDetailWithDefaults instantiates a new RuleAndBucketDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleAndBucketDetailWithDefaults() *RuleAndBucketDetail {
	this := RuleAndBucketDetail{}
	return &this
}

// GetIndexId returns the IndexId field value
func (o *RuleAndBucketDetail) GetIndexId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexId
}

// GetIndexIdOk returns a tuple with the IndexId field value
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetail) GetIndexIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexId, true
}

// SetIndexId sets field value
func (o *RuleAndBucketDetail) SetIndexId(v string) {
	o.IndexId = v
}

// GetDestinationId returns the DestinationId field value
func (o *RuleAndBucketDetail) GetDestinationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetail) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationId, true
}

// SetDestinationId sets field value
func (o *RuleAndBucketDetail) SetDestinationId(v string) {
	o.DestinationId = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RuleAndBucketDetail) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetail) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RuleAndBucketDetail) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RuleAndBucketDetail) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFileFormat returns the FileFormat field value if set, zero value otherwise.
func (o *RuleAndBucketDetail) GetFileFormat() string {
	if o == nil || o.FileFormat == nil {
		var ret string
		return ret
	}
	return *o.FileFormat
}

// GetFileFormatOk returns a tuple with the FileFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetail) GetFileFormatOk() (*string, bool) {
	if o == nil || o.FileFormat == nil {
		return nil, false
	}
	return o.FileFormat, true
}

// HasFileFormat returns a boolean if a field has been set.
func (o *RuleAndBucketDetail) HasFileFormat() bool {
	if o != nil && o.FileFormat != nil {
		return true
	}

	return false
}

// SetFileFormat gets a reference to the given string and assigns it to the FileFormat field.
func (o *RuleAndBucketDetail) SetFileFormat(v string) {
	o.FileFormat = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *RuleAndBucketDetail) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetail) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RuleAndBucketDetail) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *RuleAndBucketDetail) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetail) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *RuleAndBucketDetail) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *RuleAndBucketDetail) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetail) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *RuleAndBucketDetail) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *RuleAndBucketDetail) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetail) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *RuleAndBucketDetail) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RuleAndBucketDetail) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetail) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RuleAndBucketDetail) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RuleAndBucketDetail) SetId(v string) {
	o.Id = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *RuleAndBucketDetail) GetBucket() map[string]interface{} {
	if o == nil || o.Bucket == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetail) GetBucketOk() (map[string]interface{}, bool) {
	if o == nil || o.Bucket == nil {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *RuleAndBucketDetail) HasBucket() bool {
	if o != nil && o.Bucket != nil {
		return true
	}

	return false
}

// SetBucket gets a reference to the given map[string]interface{} and assigns it to the Bucket field.
func (o *RuleAndBucketDetail) SetBucket(v map[string]interface{}) {
	o.Bucket = v
}

func (o RuleAndBucketDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["indexId"] = o.IndexId
	}
	if true {
		toSerialize["destinationId"] = o.DestinationId
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.FileFormat != nil {
		toSerialize["fileFormat"] = o.FileFormat
	}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if true {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if true {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Bucket != nil {
		toSerialize["bucket"] = o.Bucket
	}
	return json.Marshal(toSerialize)
}

type NullableRuleAndBucketDetail struct {
	value *RuleAndBucketDetail
	isSet bool
}

func (v NullableRuleAndBucketDetail) Get() *RuleAndBucketDetail {
	return v.value
}

func (v *NullableRuleAndBucketDetail) Set(val *RuleAndBucketDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleAndBucketDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleAndBucketDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleAndBucketDetail(val *RuleAndBucketDetail) *NullableRuleAndBucketDetail {
	return &NullableRuleAndBucketDetail{value: val, isSet: true}
}

func (v NullableRuleAndBucketDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleAndBucketDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


