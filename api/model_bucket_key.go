/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BucketKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketKey{}

// BucketKey Base bucket key object.
type BucketKey struct {
	// Bucket value type of the object model.
	BucketKeyType string `json:"bucketKeyType"`
}

// NewBucketKey instantiates a new BucketKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketKey(bucketKeyType string) *BucketKey {
	this := BucketKey{}
	this.BucketKeyType = bucketKeyType
	return &this
}

// NewBucketKeyWithDefaults instantiates a new BucketKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketKeyWithDefaults() *BucketKey {
	this := BucketKey{}
	return &this
}

// GetBucketKeyType returns the BucketKeyType field value
func (o *BucketKey) GetBucketKeyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketKeyType
}

// GetBucketKeyTypeOk returns a tuple with the BucketKeyType field value
// and a boolean to check if the value has been set.
func (o *BucketKey) GetBucketKeyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketKeyType, true
}

// SetBucketKeyType sets field value
func (o *BucketKey) SetBucketKeyType(v string) {
	o.BucketKeyType = v
}

func (o BucketKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BucketKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucketKeyType"] = o.BucketKeyType
	return toSerialize, nil
}

type NullableBucketKey struct {
	value *BucketKey
	isSet bool
}

func (v NullableBucketKey) Get() *BucketKey {
	return v.value
}

func (v *NullableBucketKey) Set(val *BucketKey) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketKey) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketKey(val *BucketKey) *NullableBucketKey {
	return &NullableBucketKey{value: val, isSet: true}
}

func (v NullableBucketKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


