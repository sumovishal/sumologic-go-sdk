/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// MetricsQueryData The data format describing a basic metrics query.
type MetricsQueryData struct {
	// The metric of the query.
	Metric string `json:"metric"`
	// The type of aggregation. Can be `Count`, `Minimum`, `Maximum`, `Sum`, `Average` or `None`.
	AggregationType *string `json:"aggregationType,omitempty"`
	// The field to group the results by.
	GroupBy *string `json:"groupBy,omitempty"`
	// A list of filters for the metrics query.
	Filters []MetricsFilter `json:"filters"`
	// A list of operator data for the metrics query.
	Operators []OperatorData `json:"operators,omitempty"`
}

// NewMetricsQueryData instantiates a new MetricsQueryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsQueryData(metric string, filters []MetricsFilter) *MetricsQueryData {
	this := MetricsQueryData{}
	this.Metric = metric
	this.Filters = filters
	return &this
}

// NewMetricsQueryDataWithDefaults instantiates a new MetricsQueryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsQueryDataWithDefaults() *MetricsQueryData {
	this := MetricsQueryData{}
	return &this
}

// GetMetric returns the Metric field value
func (o *MetricsQueryData) GetMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *MetricsQueryData) GetMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *MetricsQueryData) SetMetric(v string) {
	o.Metric = v
}

// GetAggregationType returns the AggregationType field value if set, zero value otherwise.
func (o *MetricsQueryData) GetAggregationType() string {
	if o == nil || o.AggregationType == nil {
		var ret string
		return ret
	}
	return *o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsQueryData) GetAggregationTypeOk() (*string, bool) {
	if o == nil || o.AggregationType == nil {
		return nil, false
	}
	return o.AggregationType, true
}

// HasAggregationType returns a boolean if a field has been set.
func (o *MetricsQueryData) HasAggregationType() bool {
	if o != nil && o.AggregationType != nil {
		return true
	}

	return false
}

// SetAggregationType gets a reference to the given string and assigns it to the AggregationType field.
func (o *MetricsQueryData) SetAggregationType(v string) {
	o.AggregationType = &v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *MetricsQueryData) GetGroupBy() string {
	if o == nil || o.GroupBy == nil {
		var ret string
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsQueryData) GetGroupByOk() (*string, bool) {
	if o == nil || o.GroupBy == nil {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *MetricsQueryData) HasGroupBy() bool {
	if o != nil && o.GroupBy != nil {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given string and assigns it to the GroupBy field.
func (o *MetricsQueryData) SetGroupBy(v string) {
	o.GroupBy = &v
}

// GetFilters returns the Filters field value
func (o *MetricsQueryData) GetFilters() []MetricsFilter {
	if o == nil {
		var ret []MetricsFilter
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *MetricsQueryData) GetFiltersOk() ([]MetricsFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *MetricsQueryData) SetFilters(v []MetricsFilter) {
	o.Filters = v
}

// GetOperators returns the Operators field value if set, zero value otherwise.
func (o *MetricsQueryData) GetOperators() []OperatorData {
	if o == nil || o.Operators == nil {
		var ret []OperatorData
		return ret
	}
	return o.Operators
}

// GetOperatorsOk returns a tuple with the Operators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsQueryData) GetOperatorsOk() ([]OperatorData, bool) {
	if o == nil || o.Operators == nil {
		return nil, false
	}
	return o.Operators, true
}

// HasOperators returns a boolean if a field has been set.
func (o *MetricsQueryData) HasOperators() bool {
	if o != nil && o.Operators != nil {
		return true
	}

	return false
}

// SetOperators gets a reference to the given []OperatorData and assigns it to the Operators field.
func (o *MetricsQueryData) SetOperators(v []OperatorData) {
	o.Operators = v
}

func (o MetricsQueryData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["metric"] = o.Metric
	}
	if o.AggregationType != nil {
		toSerialize["aggregationType"] = o.AggregationType
	}
	if o.GroupBy != nil {
		toSerialize["groupBy"] = o.GroupBy
	}
	if true {
		toSerialize["filters"] = o.Filters
	}
	if o.Operators != nil {
		toSerialize["operators"] = o.Operators
	}
	return json.Marshal(toSerialize)
}

type NullableMetricsQueryData struct {
	value *MetricsQueryData
	isSet bool
}

func (v NullableMetricsQueryData) Get() *MetricsQueryData {
	return v.value
}

func (v *NullableMetricsQueryData) Set(val *MetricsQueryData) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsQueryData) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsQueryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsQueryData(val *MetricsQueryData) *NullableMetricsQueryData {
	return &NullableMetricsQueryData{value: val, isSet: true}
}

func (v NullableMetricsQueryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsQueryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


