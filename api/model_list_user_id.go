/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the ListUserId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListUserId{}

// ListUserId struct for ListUserId
type ListUserId struct {
	// List of users.
	Data []string `json:"data"`
}

// NewListUserId instantiates a new ListUserId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUserId(data []string) *ListUserId {
	this := ListUserId{}
	this.Data = data
	return &this
}

// NewListUserIdWithDefaults instantiates a new ListUserId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUserIdWithDefaults() *ListUserId {
	this := ListUserId{}
	return &this
}

// GetData returns the Data field value
func (o *ListUserId) GetData() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListUserId) GetDataOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListUserId) SetData(v []string) {
	o.Data = v
}

func (o ListUserId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListUserId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableListUserId struct {
	value *ListUserId
	isSet bool
}

func (v NullableListUserId) Get() *ListUserId {
	return v.value
}

func (v *NullableListUserId) Set(val *ListUserId) {
	v.value = val
	v.isSet = true
}

func (v NullableListUserId) IsSet() bool {
	return v.isSet
}

func (v *NullableListUserId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUserId(val *ListUserId) *NullableListUserId {
	return &NullableListUserId{value: val, isSet: true}
}

func (v NullableListUserId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUserId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


