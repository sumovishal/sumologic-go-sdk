/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AzureEventHubConnectionErrorTracker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureEventHubConnectionErrorTracker{}

// AzureEventHubConnectionErrorTracker struct for AzureEventHubConnectionErrorTracker
type AzureEventHubConnectionErrorTracker struct {
	TrackerIdentity
	// The namespace of the associated source.
	FullyQualifiedNamespace *string `json:"fullyQualifiedNamespace,omitempty"`
	// The event hub name of the associated source.
	EventHub *string `json:"eventHub,omitempty"`
}

// NewAzureEventHubConnectionErrorTracker instantiates a new AzureEventHubConnectionErrorTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureEventHubConnectionErrorTracker(trackerId string, error_ string, description string) *AzureEventHubConnectionErrorTracker {
	this := AzureEventHubConnectionErrorTracker{}
	this.TrackerId = trackerId
	this.Error = error_
	this.Description = description
	return &this
}

// NewAzureEventHubConnectionErrorTrackerWithDefaults instantiates a new AzureEventHubConnectionErrorTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureEventHubConnectionErrorTrackerWithDefaults() *AzureEventHubConnectionErrorTracker {
	this := AzureEventHubConnectionErrorTracker{}
	return &this
}

// GetFullyQualifiedNamespace returns the FullyQualifiedNamespace field value if set, zero value otherwise.
func (o *AzureEventHubConnectionErrorTracker) GetFullyQualifiedNamespace() string {
	if o == nil || IsNil(o.FullyQualifiedNamespace) {
		var ret string
		return ret
	}
	return *o.FullyQualifiedNamespace
}

// GetFullyQualifiedNamespaceOk returns a tuple with the FullyQualifiedNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureEventHubConnectionErrorTracker) GetFullyQualifiedNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.FullyQualifiedNamespace) {
		return nil, false
	}
	return o.FullyQualifiedNamespace, true
}

// HasFullyQualifiedNamespace returns a boolean if a field has been set.
func (o *AzureEventHubConnectionErrorTracker) HasFullyQualifiedNamespace() bool {
	if o != nil && !IsNil(o.FullyQualifiedNamespace) {
		return true
	}

	return false
}

// SetFullyQualifiedNamespace gets a reference to the given string and assigns it to the FullyQualifiedNamespace field.
func (o *AzureEventHubConnectionErrorTracker) SetFullyQualifiedNamespace(v string) {
	o.FullyQualifiedNamespace = &v
}

// GetEventHub returns the EventHub field value if set, zero value otherwise.
func (o *AzureEventHubConnectionErrorTracker) GetEventHub() string {
	if o == nil || IsNil(o.EventHub) {
		var ret string
		return ret
	}
	return *o.EventHub
}

// GetEventHubOk returns a tuple with the EventHub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureEventHubConnectionErrorTracker) GetEventHubOk() (*string, bool) {
	if o == nil || IsNil(o.EventHub) {
		return nil, false
	}
	return o.EventHub, true
}

// HasEventHub returns a boolean if a field has been set.
func (o *AzureEventHubConnectionErrorTracker) HasEventHub() bool {
	if o != nil && !IsNil(o.EventHub) {
		return true
	}

	return false
}

// SetEventHub gets a reference to the given string and assigns it to the EventHub field.
func (o *AzureEventHubConnectionErrorTracker) SetEventHub(v string) {
	o.EventHub = &v
}

func (o AzureEventHubConnectionErrorTracker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureEventHubConnectionErrorTracker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTrackerIdentity, errTrackerIdentity := json.Marshal(o.TrackerIdentity)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	errTrackerIdentity = json.Unmarshal([]byte(serializedTrackerIdentity), &toSerialize)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	if !IsNil(o.FullyQualifiedNamespace) {
		toSerialize["fullyQualifiedNamespace"] = o.FullyQualifiedNamespace
	}
	if !IsNil(o.EventHub) {
		toSerialize["eventHub"] = o.EventHub
	}
	return toSerialize, nil
}

type NullableAzureEventHubConnectionErrorTracker struct {
	value *AzureEventHubConnectionErrorTracker
	isSet bool
}

func (v NullableAzureEventHubConnectionErrorTracker) Get() *AzureEventHubConnectionErrorTracker {
	return v.value
}

func (v *NullableAzureEventHubConnectionErrorTracker) Set(val *AzureEventHubConnectionErrorTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureEventHubConnectionErrorTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureEventHubConnectionErrorTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureEventHubConnectionErrorTracker(val *AzureEventHubConnectionErrorTracker) *NullableAzureEventHubConnectionErrorTracker {
	return &NullableAzureEventHubConnectionErrorTracker{value: val, isSet: true}
}

func (v NullableAzureEventHubConnectionErrorTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureEventHubConnectionErrorTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


