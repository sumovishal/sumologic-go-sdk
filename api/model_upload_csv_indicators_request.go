/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UploadCsvIndicatorsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadCsvIndicatorsRequest{}

// UploadCsvIndicatorsRequest struct for UploadCsvIndicatorsRequest
type UploadCsvIndicatorsRequest struct {
	// The CSV data containing indicators.
	Csv string `json:"csv"`
}

// NewUploadCsvIndicatorsRequest instantiates a new UploadCsvIndicatorsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadCsvIndicatorsRequest(csv string) *UploadCsvIndicatorsRequest {
	this := UploadCsvIndicatorsRequest{}
	this.Csv = csv
	return &this
}

// NewUploadCsvIndicatorsRequestWithDefaults instantiates a new UploadCsvIndicatorsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadCsvIndicatorsRequestWithDefaults() *UploadCsvIndicatorsRequest {
	this := UploadCsvIndicatorsRequest{}
	return &this
}

// GetCsv returns the Csv field value
func (o *UploadCsvIndicatorsRequest) GetCsv() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Csv
}

// GetCsvOk returns a tuple with the Csv field value
// and a boolean to check if the value has been set.
func (o *UploadCsvIndicatorsRequest) GetCsvOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Csv, true
}

// SetCsv sets field value
func (o *UploadCsvIndicatorsRequest) SetCsv(v string) {
	o.Csv = v
}

func (o UploadCsvIndicatorsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadCsvIndicatorsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["csv"] = o.Csv
	return toSerialize, nil
}

type NullableUploadCsvIndicatorsRequest struct {
	value *UploadCsvIndicatorsRequest
	isSet bool
}

func (v NullableUploadCsvIndicatorsRequest) Get() *UploadCsvIndicatorsRequest {
	return v.value
}

func (v *NullableUploadCsvIndicatorsRequest) Set(val *UploadCsvIndicatorsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadCsvIndicatorsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadCsvIndicatorsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadCsvIndicatorsRequest(val *UploadCsvIndicatorsRequest) *NullableUploadCsvIndicatorsRequest {
	return &NullableUploadCsvIndicatorsRequest{value: val, isSet: true}
}

func (v NullableUploadCsvIndicatorsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadCsvIndicatorsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


