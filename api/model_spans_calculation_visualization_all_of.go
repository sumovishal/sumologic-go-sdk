/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SpansCalculationVisualizationAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpansCalculationVisualizationAllOf{}

// SpansCalculationVisualizationAllOf Represents the visualization type where a specific aggregation by a particular field is  applied to all spans / all grouped spans. 
type SpansCalculationVisualizationAllOf struct {
	// A field by which the spans are aggregated.
	Field string `json:"field"`
	Aggregator SpanCalculationAggregator `json:"aggregator"`
}

// NewSpansCalculationVisualizationAllOf instantiates a new SpansCalculationVisualizationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpansCalculationVisualizationAllOf(field string, aggregator SpanCalculationAggregator) *SpansCalculationVisualizationAllOf {
	this := SpansCalculationVisualizationAllOf{}
	this.Field = field
	this.Aggregator = aggregator
	return &this
}

// NewSpansCalculationVisualizationAllOfWithDefaults instantiates a new SpansCalculationVisualizationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpansCalculationVisualizationAllOfWithDefaults() *SpansCalculationVisualizationAllOf {
	this := SpansCalculationVisualizationAllOf{}
	return &this
}

// GetField returns the Field field value
func (o *SpansCalculationVisualizationAllOf) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *SpansCalculationVisualizationAllOf) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *SpansCalculationVisualizationAllOf) SetField(v string) {
	o.Field = v
}

// GetAggregator returns the Aggregator field value
func (o *SpansCalculationVisualizationAllOf) GetAggregator() SpanCalculationAggregator {
	if o == nil {
		var ret SpanCalculationAggregator
		return ret
	}

	return o.Aggregator
}

// GetAggregatorOk returns a tuple with the Aggregator field value
// and a boolean to check if the value has been set.
func (o *SpansCalculationVisualizationAllOf) GetAggregatorOk() (*SpanCalculationAggregator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregator, true
}

// SetAggregator sets field value
func (o *SpansCalculationVisualizationAllOf) SetAggregator(v SpanCalculationAggregator) {
	o.Aggregator = v
}

func (o SpansCalculationVisualizationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpansCalculationVisualizationAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["aggregator"] = o.Aggregator
	return toSerialize, nil
}

type NullableSpansCalculationVisualizationAllOf struct {
	value *SpansCalculationVisualizationAllOf
	isSet bool
}

func (v NullableSpansCalculationVisualizationAllOf) Get() *SpansCalculationVisualizationAllOf {
	return v.value
}

func (v *NullableSpansCalculationVisualizationAllOf) Set(val *SpansCalculationVisualizationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSpansCalculationVisualizationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSpansCalculationVisualizationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpansCalculationVisualizationAllOf(val *SpansCalculationVisualizationAllOf) *NullableSpansCalculationVisualizationAllOf {
	return &NullableSpansCalculationVisualizationAllOf{value: val, isSet: true}
}

func (v NullableSpansCalculationVisualizationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpansCalculationVisualizationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


