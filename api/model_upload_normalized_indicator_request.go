/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the UploadNormalizedIndicatorRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadNormalizedIndicatorRequest{}

// UploadNormalizedIndicatorRequest struct for UploadNormalizedIndicatorRequest
type UploadNormalizedIndicatorRequest struct {
	// The list of normalized threat intel indicators to upload.
	Indicators []NormalizedIndicator `json:"indicators"`
}

// NewUploadNormalizedIndicatorRequest instantiates a new UploadNormalizedIndicatorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadNormalizedIndicatorRequest(indicators []NormalizedIndicator) *UploadNormalizedIndicatorRequest {
	this := UploadNormalizedIndicatorRequest{}
	this.Indicators = indicators
	return &this
}

// NewUploadNormalizedIndicatorRequestWithDefaults instantiates a new UploadNormalizedIndicatorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadNormalizedIndicatorRequestWithDefaults() *UploadNormalizedIndicatorRequest {
	this := UploadNormalizedIndicatorRequest{}
	return &this
}

// GetIndicators returns the Indicators field value
func (o *UploadNormalizedIndicatorRequest) GetIndicators() []NormalizedIndicator {
	if o == nil {
		var ret []NormalizedIndicator
		return ret
	}

	return o.Indicators
}

// GetIndicatorsOk returns a tuple with the Indicators field value
// and a boolean to check if the value has been set.
func (o *UploadNormalizedIndicatorRequest) GetIndicatorsOk() ([]NormalizedIndicator, bool) {
	if o == nil {
		return nil, false
	}
	return o.Indicators, true
}

// SetIndicators sets field value
func (o *UploadNormalizedIndicatorRequest) SetIndicators(v []NormalizedIndicator) {
	o.Indicators = v
}

func (o UploadNormalizedIndicatorRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadNormalizedIndicatorRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["indicators"] = o.Indicators
	return toSerialize, nil
}

type NullableUploadNormalizedIndicatorRequest struct {
	value *UploadNormalizedIndicatorRequest
	isSet bool
}

func (v NullableUploadNormalizedIndicatorRequest) Get() *UploadNormalizedIndicatorRequest {
	return v.value
}

func (v *NullableUploadNormalizedIndicatorRequest) Set(val *UploadNormalizedIndicatorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadNormalizedIndicatorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadNormalizedIndicatorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadNormalizedIndicatorRequest(val *UploadNormalizedIndicatorRequest) *NullableUploadNormalizedIndicatorRequest {
	return &NullableUploadNormalizedIndicatorRequest{value: val, isSet: true}
}

func (v NullableUploadNormalizedIndicatorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadNormalizedIndicatorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


