/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// OutlierDataValue Data value and bounds of outlier data point.
type OutlierDataValue struct {
	Baseline *OutlierBound `json:"baseline,omitempty"`
	Critical *OutlierBound `json:"critical,omitempty"`
	Warning *OutlierBound `json:"warning,omitempty"`
	// The value of outlier data point.
	Value *float64 `json:"value,omitempty"`
	// The type of violation.
	Violation *string `json:"violation,omitempty"`
}

// NewOutlierDataValue instantiates a new OutlierDataValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutlierDataValue() *OutlierDataValue {
	this := OutlierDataValue{}
	return &this
}

// NewOutlierDataValueWithDefaults instantiates a new OutlierDataValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutlierDataValueWithDefaults() *OutlierDataValue {
	this := OutlierDataValue{}
	return &this
}

// GetBaseline returns the Baseline field value if set, zero value otherwise.
func (o *OutlierDataValue) GetBaseline() OutlierBound {
	if o == nil || o.Baseline == nil {
		var ret OutlierBound
		return ret
	}
	return *o.Baseline
}

// GetBaselineOk returns a tuple with the Baseline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierDataValue) GetBaselineOk() (*OutlierBound, bool) {
	if o == nil || o.Baseline == nil {
		return nil, false
	}
	return o.Baseline, true
}

// HasBaseline returns a boolean if a field has been set.
func (o *OutlierDataValue) HasBaseline() bool {
	if o != nil && o.Baseline != nil {
		return true
	}

	return false
}

// SetBaseline gets a reference to the given OutlierBound and assigns it to the Baseline field.
func (o *OutlierDataValue) SetBaseline(v OutlierBound) {
	o.Baseline = &v
}

// GetCritical returns the Critical field value if set, zero value otherwise.
func (o *OutlierDataValue) GetCritical() OutlierBound {
	if o == nil || o.Critical == nil {
		var ret OutlierBound
		return ret
	}
	return *o.Critical
}

// GetCriticalOk returns a tuple with the Critical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierDataValue) GetCriticalOk() (*OutlierBound, bool) {
	if o == nil || o.Critical == nil {
		return nil, false
	}
	return o.Critical, true
}

// HasCritical returns a boolean if a field has been set.
func (o *OutlierDataValue) HasCritical() bool {
	if o != nil && o.Critical != nil {
		return true
	}

	return false
}

// SetCritical gets a reference to the given OutlierBound and assigns it to the Critical field.
func (o *OutlierDataValue) SetCritical(v OutlierBound) {
	o.Critical = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *OutlierDataValue) GetWarning() OutlierBound {
	if o == nil || o.Warning == nil {
		var ret OutlierBound
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierDataValue) GetWarningOk() (*OutlierBound, bool) {
	if o == nil || o.Warning == nil {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *OutlierDataValue) HasWarning() bool {
	if o != nil && o.Warning != nil {
		return true
	}

	return false
}

// SetWarning gets a reference to the given OutlierBound and assigns it to the Warning field.
func (o *OutlierDataValue) SetWarning(v OutlierBound) {
	o.Warning = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OutlierDataValue) GetValue() float64 {
	if o == nil || o.Value == nil {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierDataValue) GetValueOk() (*float64, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OutlierDataValue) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *OutlierDataValue) SetValue(v float64) {
	o.Value = &v
}

// GetViolation returns the Violation field value if set, zero value otherwise.
func (o *OutlierDataValue) GetViolation() string {
	if o == nil || o.Violation == nil {
		var ret string
		return ret
	}
	return *o.Violation
}

// GetViolationOk returns a tuple with the Violation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlierDataValue) GetViolationOk() (*string, bool) {
	if o == nil || o.Violation == nil {
		return nil, false
	}
	return o.Violation, true
}

// HasViolation returns a boolean if a field has been set.
func (o *OutlierDataValue) HasViolation() bool {
	if o != nil && o.Violation != nil {
		return true
	}

	return false
}

// SetViolation gets a reference to the given string and assigns it to the Violation field.
func (o *OutlierDataValue) SetViolation(v string) {
	o.Violation = &v
}

func (o OutlierDataValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Baseline != nil {
		toSerialize["baseline"] = o.Baseline
	}
	if o.Critical != nil {
		toSerialize["critical"] = o.Critical
	}
	if o.Warning != nil {
		toSerialize["warning"] = o.Warning
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Violation != nil {
		toSerialize["violation"] = o.Violation
	}
	return json.Marshal(toSerialize)
}

type NullableOutlierDataValue struct {
	value *OutlierDataValue
	isSet bool
}

func (v NullableOutlierDataValue) Get() *OutlierDataValue {
	return v.value
}

func (v *NullableOutlierDataValue) Set(val *OutlierDataValue) {
	v.value = val
	v.isSet = true
}

func (v NullableOutlierDataValue) IsSet() bool {
	return v.isSet
}

func (v *NullableOutlierDataValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutlierDataValue(val *OutlierDataValue) *NullableOutlierDataValue {
	return &NullableOutlierDataValue{value: val, isSet: true}
}

func (v NullableOutlierDataValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutlierDataValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


