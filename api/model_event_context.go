/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EventContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventContext{}

// EventContext struct for EventContext
type EventContext struct {
	// Context for which correlated events are to be fetched.
	EventContextType string `json:"eventContextType"`
}

// NewEventContext instantiates a new EventContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventContext(eventContextType string) *EventContext {
	this := EventContext{}
	this.EventContextType = eventContextType
	return &this
}

// NewEventContextWithDefaults instantiates a new EventContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventContextWithDefaults() *EventContext {
	this := EventContext{}
	return &this
}

// GetEventContextType returns the EventContextType field value
func (o *EventContext) GetEventContextType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventContextType
}

// GetEventContextTypeOk returns a tuple with the EventContextType field value
// and a boolean to check if the value has been set.
func (o *EventContext) GetEventContextTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventContextType, true
}

// SetEventContextType sets field value
func (o *EventContext) SetEventContextType(v string) {
	o.EventContextType = v
}

func (o EventContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventContextType"] = o.EventContextType
	return toSerialize, nil
}

type NullableEventContext struct {
	value *EventContext
	isSet bool
}

func (v NullableEventContext) Get() *EventContext {
	return v.value
}

func (v *NullableEventContext) Set(val *EventContext) {
	v.value = val
	v.isSet = true
}

func (v NullableEventContext) IsSet() bool {
	return v.isSet
}

func (v *NullableEventContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventContext(val *EventContext) *NullableEventContext {
	return &NullableEventContext{value: val, isSet: true}
}

func (v NullableEventContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


