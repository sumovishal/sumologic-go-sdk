/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// PlanUpdateEmail details of the plan for updating with contact information
type PlanUpdateEmail struct {
	// email id on which support team will contact on
	EmailId string `json:"emailId"`
	// contact number on which support team can call user
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// The frequency with with the customer needs to be billed at. The current supported values are Monthly and Annually
	BillingFrequency *string `json:"billingFrequency,omitempty"`
	Baselines SelfServiceCreditsBaselines `json:"baselines"`
	// option details the user might want to inform
	Details *string `json:"details,omitempty"`
}

// NewPlanUpdateEmail instantiates a new PlanUpdateEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanUpdateEmail(emailId string, baselines SelfServiceCreditsBaselines) *PlanUpdateEmail {
	this := PlanUpdateEmail{}
	this.EmailId = emailId
	this.Baselines = baselines
	return &this
}

// NewPlanUpdateEmailWithDefaults instantiates a new PlanUpdateEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanUpdateEmailWithDefaults() *PlanUpdateEmail {
	this := PlanUpdateEmail{}
	return &this
}

// GetEmailId returns the EmailId field value
func (o *PlanUpdateEmail) GetEmailId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailId
}

// GetEmailIdOk returns a tuple with the EmailId field value
// and a boolean to check if the value has been set.
func (o *PlanUpdateEmail) GetEmailIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailId, true
}

// SetEmailId sets field value
func (o *PlanUpdateEmail) SetEmailId(v string) {
	o.EmailId = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *PlanUpdateEmail) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateEmail) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *PlanUpdateEmail) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *PlanUpdateEmail) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetBillingFrequency returns the BillingFrequency field value if set, zero value otherwise.
func (o *PlanUpdateEmail) GetBillingFrequency() string {
	if o == nil || o.BillingFrequency == nil {
		var ret string
		return ret
	}
	return *o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateEmail) GetBillingFrequencyOk() (*string, bool) {
	if o == nil || o.BillingFrequency == nil {
		return nil, false
	}
	return o.BillingFrequency, true
}

// HasBillingFrequency returns a boolean if a field has been set.
func (o *PlanUpdateEmail) HasBillingFrequency() bool {
	if o != nil && o.BillingFrequency != nil {
		return true
	}

	return false
}

// SetBillingFrequency gets a reference to the given string and assigns it to the BillingFrequency field.
func (o *PlanUpdateEmail) SetBillingFrequency(v string) {
	o.BillingFrequency = &v
}

// GetBaselines returns the Baselines field value
func (o *PlanUpdateEmail) GetBaselines() SelfServiceCreditsBaselines {
	if o == nil {
		var ret SelfServiceCreditsBaselines
		return ret
	}

	return o.Baselines
}

// GetBaselinesOk returns a tuple with the Baselines field value
// and a boolean to check if the value has been set.
func (o *PlanUpdateEmail) GetBaselinesOk() (*SelfServiceCreditsBaselines, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Baselines, true
}

// SetBaselines sets field value
func (o *PlanUpdateEmail) SetBaselines(v SelfServiceCreditsBaselines) {
	o.Baselines = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *PlanUpdateEmail) GetDetails() string {
	if o == nil || o.Details == nil {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanUpdateEmail) GetDetailsOk() (*string, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *PlanUpdateEmail) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *PlanUpdateEmail) SetDetails(v string) {
	o.Details = &v
}

func (o PlanUpdateEmail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["emailId"] = o.EmailId
	}
	if o.PhoneNumber != nil {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if o.BillingFrequency != nil {
		toSerialize["billingFrequency"] = o.BillingFrequency
	}
	if true {
		toSerialize["baselines"] = o.Baselines
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	return json.Marshal(toSerialize)
}

type NullablePlanUpdateEmail struct {
	value *PlanUpdateEmail
	isSet bool
}

func (v NullablePlanUpdateEmail) Get() *PlanUpdateEmail {
	return v.value
}

func (v *NullablePlanUpdateEmail) Set(val *PlanUpdateEmail) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanUpdateEmail) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanUpdateEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanUpdateEmail(val *PlanUpdateEmail) *NullablePlanUpdateEmail {
	return &NullablePlanUpdateEmail{value: val, isSet: true}
}

func (v NullablePlanUpdateEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanUpdateEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


