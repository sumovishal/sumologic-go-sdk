/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// CollectionAffectedDueToIngestBudgetTrackerAllOf struct for CollectionAffectedDueToIngestBudgetTrackerAllOf
type CollectionAffectedDueToIngestBudgetTrackerAllOf struct {
	// The list of budget names.
	AssociatedBudgetNames *string `json:"associatedBudgetNames,omitempty"`
}

// NewCollectionAffectedDueToIngestBudgetTrackerAllOf instantiates a new CollectionAffectedDueToIngestBudgetTrackerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionAffectedDueToIngestBudgetTrackerAllOf() *CollectionAffectedDueToIngestBudgetTrackerAllOf {
	this := CollectionAffectedDueToIngestBudgetTrackerAllOf{}
	return &this
}

// NewCollectionAffectedDueToIngestBudgetTrackerAllOfWithDefaults instantiates a new CollectionAffectedDueToIngestBudgetTrackerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionAffectedDueToIngestBudgetTrackerAllOfWithDefaults() *CollectionAffectedDueToIngestBudgetTrackerAllOf {
	this := CollectionAffectedDueToIngestBudgetTrackerAllOf{}
	return &this
}

// GetAssociatedBudgetNames returns the AssociatedBudgetNames field value if set, zero value otherwise.
func (o *CollectionAffectedDueToIngestBudgetTrackerAllOf) GetAssociatedBudgetNames() string {
	if o == nil || o.AssociatedBudgetNames == nil {
		var ret string
		return ret
	}
	return *o.AssociatedBudgetNames
}

// GetAssociatedBudgetNamesOk returns a tuple with the AssociatedBudgetNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAffectedDueToIngestBudgetTrackerAllOf) GetAssociatedBudgetNamesOk() (*string, bool) {
	if o == nil || o.AssociatedBudgetNames == nil {
		return nil, false
	}
	return o.AssociatedBudgetNames, true
}

// HasAssociatedBudgetNames returns a boolean if a field has been set.
func (o *CollectionAffectedDueToIngestBudgetTrackerAllOf) HasAssociatedBudgetNames() bool {
	if o != nil && o.AssociatedBudgetNames != nil {
		return true
	}

	return false
}

// SetAssociatedBudgetNames gets a reference to the given string and assigns it to the AssociatedBudgetNames field.
func (o *CollectionAffectedDueToIngestBudgetTrackerAllOf) SetAssociatedBudgetNames(v string) {
	o.AssociatedBudgetNames = &v
}

func (o CollectionAffectedDueToIngestBudgetTrackerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssociatedBudgetNames != nil {
		toSerialize["associatedBudgetNames"] = o.AssociatedBudgetNames
	}
	return json.Marshal(toSerialize)
}

type NullableCollectionAffectedDueToIngestBudgetTrackerAllOf struct {
	value *CollectionAffectedDueToIngestBudgetTrackerAllOf
	isSet bool
}

func (v NullableCollectionAffectedDueToIngestBudgetTrackerAllOf) Get() *CollectionAffectedDueToIngestBudgetTrackerAllOf {
	return v.value
}

func (v *NullableCollectionAffectedDueToIngestBudgetTrackerAllOf) Set(val *CollectionAffectedDueToIngestBudgetTrackerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionAffectedDueToIngestBudgetTrackerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionAffectedDueToIngestBudgetTrackerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionAffectedDueToIngestBudgetTrackerAllOf(val *CollectionAffectedDueToIngestBudgetTrackerAllOf) *NullableCollectionAffectedDueToIngestBudgetTrackerAllOf {
	return &NullableCollectionAffectedDueToIngestBudgetTrackerAllOf{value: val, isSet: true}
}

func (v NullableCollectionAffectedDueToIngestBudgetTrackerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionAffectedDueToIngestBudgetTrackerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


