/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VariableValuesData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableValuesData{}

// VariableValuesData Variable values, status, type and errors for the variable values search.
type VariableValuesData struct {
	// Values for the variable.
	VariableValues []string `json:"variableValues"`
	Status *DashboardSearchStatus `json:"status,omitempty"`
	// The type of the variable.
	VariableType *string `json:"variableType,omitempty"`
	// The type of value of the variable. Allowed values are `String`, Any`, `Numeric`, `Integer`, `Long`, `Double`, `Boolean`. - `String` considers as a single phrase and will wrap in double-quotes. - `Any` is all characters. - `Numeric` consists of a numeric value for variables, it will be displayed differently in the UI. - `Integer` is a variable with an `Int` value. - `Long` is a variable with a `Long` value. - `Double` is a variable with a `Double` value. - `Boolean` is a variable with a `Boolean` value. 
	ValueType *string `json:"valueType,omitempty"`
	// Allow multiple selections in the values dropdown.
	AllowMultiSelect *bool `json:"allowMultiSelect,omitempty"`
	// Generic errors returned by backend from downstream assemblies. More specific errors will be thrown in the future.
	Errors []ErrorDescription `json:"errors,omitempty"`
}

// NewVariableValuesData instantiates a new VariableValuesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableValuesData(variableValues []string) *VariableValuesData {
	this := VariableValuesData{}
	this.VariableValues = variableValues
	var valueType string = "Any"
	this.ValueType = &valueType
	var allowMultiSelect bool = false
	this.AllowMultiSelect = &allowMultiSelect
	return &this
}

// NewVariableValuesDataWithDefaults instantiates a new VariableValuesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableValuesDataWithDefaults() *VariableValuesData {
	this := VariableValuesData{}
	var valueType string = "Any"
	this.ValueType = &valueType
	var allowMultiSelect bool = false
	this.AllowMultiSelect = &allowMultiSelect
	return &this
}

// GetVariableValues returns the VariableValues field value
func (o *VariableValuesData) GetVariableValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.VariableValues
}

// GetVariableValuesOk returns a tuple with the VariableValues field value
// and a boolean to check if the value has been set.
func (o *VariableValuesData) GetVariableValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VariableValues, true
}

// SetVariableValues sets field value
func (o *VariableValuesData) SetVariableValues(v []string) {
	o.VariableValues = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VariableValuesData) GetStatus() DashboardSearchStatus {
	if o == nil || IsNil(o.Status) {
		var ret DashboardSearchStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableValuesData) GetStatusOk() (*DashboardSearchStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VariableValuesData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DashboardSearchStatus and assigns it to the Status field.
func (o *VariableValuesData) SetStatus(v DashboardSearchStatus) {
	o.Status = &v
}

// GetVariableType returns the VariableType field value if set, zero value otherwise.
func (o *VariableValuesData) GetVariableType() string {
	if o == nil || IsNil(o.VariableType) {
		var ret string
		return ret
	}
	return *o.VariableType
}

// GetVariableTypeOk returns a tuple with the VariableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableValuesData) GetVariableTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VariableType) {
		return nil, false
	}
	return o.VariableType, true
}

// HasVariableType returns a boolean if a field has been set.
func (o *VariableValuesData) HasVariableType() bool {
	if o != nil && !IsNil(o.VariableType) {
		return true
	}

	return false
}

// SetVariableType gets a reference to the given string and assigns it to the VariableType field.
func (o *VariableValuesData) SetVariableType(v string) {
	o.VariableType = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *VariableValuesData) GetValueType() string {
	if o == nil || IsNil(o.ValueType) {
		var ret string
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableValuesData) GetValueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *VariableValuesData) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given string and assigns it to the ValueType field.
func (o *VariableValuesData) SetValueType(v string) {
	o.ValueType = &v
}

// GetAllowMultiSelect returns the AllowMultiSelect field value if set, zero value otherwise.
func (o *VariableValuesData) GetAllowMultiSelect() bool {
	if o == nil || IsNil(o.AllowMultiSelect) {
		var ret bool
		return ret
	}
	return *o.AllowMultiSelect
}

// GetAllowMultiSelectOk returns a tuple with the AllowMultiSelect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableValuesData) GetAllowMultiSelectOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMultiSelect) {
		return nil, false
	}
	return o.AllowMultiSelect, true
}

// HasAllowMultiSelect returns a boolean if a field has been set.
func (o *VariableValuesData) HasAllowMultiSelect() bool {
	if o != nil && !IsNil(o.AllowMultiSelect) {
		return true
	}

	return false
}

// SetAllowMultiSelect gets a reference to the given bool and assigns it to the AllowMultiSelect field.
func (o *VariableValuesData) SetAllowMultiSelect(v bool) {
	o.AllowMultiSelect = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *VariableValuesData) GetErrors() []ErrorDescription {
	if o == nil || IsNil(o.Errors) {
		var ret []ErrorDescription
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableValuesData) GetErrorsOk() ([]ErrorDescription, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *VariableValuesData) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ErrorDescription and assigns it to the Errors field.
func (o *VariableValuesData) SetErrors(v []ErrorDescription) {
	o.Errors = v
}

func (o VariableValuesData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableValuesData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["variableValues"] = o.VariableValues
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.VariableType) {
		toSerialize["variableType"] = o.VariableType
	}
	if !IsNil(o.ValueType) {
		toSerialize["valueType"] = o.ValueType
	}
	if !IsNil(o.AllowMultiSelect) {
		toSerialize["allowMultiSelect"] = o.AllowMultiSelect
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableVariableValuesData struct {
	value *VariableValuesData
	isSet bool
}

func (v NullableVariableValuesData) Get() *VariableValuesData {
	return v.value
}

func (v *NullableVariableValuesData) Set(val *VariableValuesData) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableValuesData) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableValuesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableValuesData(val *VariableValuesData) *NullableVariableValuesData {
	return &NullableVariableValuesData{value: val, isSet: true}
}

func (v NullableVariableValuesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableValuesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


