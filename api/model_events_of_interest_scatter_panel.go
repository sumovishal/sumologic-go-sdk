/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventsOfInterestScatterPanel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsOfInterestScatterPanel{}

// EventsOfInterestScatterPanel struct for EventsOfInterestScatterPanel
type EventsOfInterestScatterPanel struct {
	Panel
}

type _EventsOfInterestScatterPanel EventsOfInterestScatterPanel

// NewEventsOfInterestScatterPanel instantiates a new EventsOfInterestScatterPanel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsOfInterestScatterPanel(key string, panelType string) *EventsOfInterestScatterPanel {
	this := EventsOfInterestScatterPanel{}
	this.Key = key
	var keepVisualSettingsConsistentWithParent bool = true
	this.KeepVisualSettingsConsistentWithParent = &keepVisualSettingsConsistentWithParent
	this.PanelType = panelType
	return &this
}

// NewEventsOfInterestScatterPanelWithDefaults instantiates a new EventsOfInterestScatterPanel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsOfInterestScatterPanelWithDefaults() *EventsOfInterestScatterPanel {
	this := EventsOfInterestScatterPanel{}
	return &this
}

func (o EventsOfInterestScatterPanel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsOfInterestScatterPanel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPanel, errPanel := json.Marshal(o.Panel)
	if errPanel != nil {
		return map[string]interface{}{}, errPanel
	}
	errPanel = json.Unmarshal([]byte(serializedPanel), &toSerialize)
	if errPanel != nil {
		return map[string]interface{}{}, errPanel
	}
	return toSerialize, nil
}

func (o *EventsOfInterestScatterPanel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"panelType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventsOfInterestScatterPanel := _EventsOfInterestScatterPanel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventsOfInterestScatterPanel)

	if err != nil {
		return err
	}

	*o = EventsOfInterestScatterPanel(varEventsOfInterestScatterPanel)

	return err
}

type NullableEventsOfInterestScatterPanel struct {
	value *EventsOfInterestScatterPanel
	isSet bool
}

func (v NullableEventsOfInterestScatterPanel) Get() *EventsOfInterestScatterPanel {
	return v.value
}

func (v *NullableEventsOfInterestScatterPanel) Set(val *EventsOfInterestScatterPanel) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsOfInterestScatterPanel) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsOfInterestScatterPanel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsOfInterestScatterPanel(val *EventsOfInterestScatterPanel) *NullableEventsOfInterestScatterPanel {
	return &NullableEventsOfInterestScatterPanel{value: val, isSet: true}
}

func (v NullableEventsOfInterestScatterPanel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsOfInterestScatterPanel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


