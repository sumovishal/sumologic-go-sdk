/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServiceNowAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceNowAllOf{}

// ServiceNowAllOf struct for ServiceNowAllOf
type ServiceNowAllOf struct {
	// The identifier of the connection.
	ConnectionId string `json:"connectionId"`
	// The subtype of the connection. Valid values are `Event` or `Incident`.
	ConnectionSubtype *string `json:"connectionSubtype,omitempty"`
	// The override of the default JSON payload of the connection. Should be in JSON format.
	PayloadOverride *string `json:"payloadOverride,omitempty"`
	// The override of the resolution JSON payload of the connection. Should be in JSON format.
	ResolutionPayloadOverride *string `json:"resolutionPayloadOverride,omitempty"`
}

// NewServiceNowAllOf instantiates a new ServiceNowAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceNowAllOf(connectionId string) *ServiceNowAllOf {
	this := ServiceNowAllOf{}
	this.ConnectionId = connectionId
	return &this
}

// NewServiceNowAllOfWithDefaults instantiates a new ServiceNowAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceNowAllOfWithDefaults() *ServiceNowAllOf {
	this := ServiceNowAllOf{}
	return &this
}

// GetConnectionId returns the ConnectionId field value
func (o *ServiceNowAllOf) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *ServiceNowAllOf) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *ServiceNowAllOf) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetConnectionSubtype returns the ConnectionSubtype field value if set, zero value otherwise.
func (o *ServiceNowAllOf) GetConnectionSubtype() string {
	if o == nil || IsNil(o.ConnectionSubtype) {
		var ret string
		return ret
	}
	return *o.ConnectionSubtype
}

// GetConnectionSubtypeOk returns a tuple with the ConnectionSubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNowAllOf) GetConnectionSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionSubtype) {
		return nil, false
	}
	return o.ConnectionSubtype, true
}

// HasConnectionSubtype returns a boolean if a field has been set.
func (o *ServiceNowAllOf) HasConnectionSubtype() bool {
	if o != nil && !IsNil(o.ConnectionSubtype) {
		return true
	}

	return false
}

// SetConnectionSubtype gets a reference to the given string and assigns it to the ConnectionSubtype field.
func (o *ServiceNowAllOf) SetConnectionSubtype(v string) {
	o.ConnectionSubtype = &v
}

// GetPayloadOverride returns the PayloadOverride field value if set, zero value otherwise.
func (o *ServiceNowAllOf) GetPayloadOverride() string {
	if o == nil || IsNil(o.PayloadOverride) {
		var ret string
		return ret
	}
	return *o.PayloadOverride
}

// GetPayloadOverrideOk returns a tuple with the PayloadOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNowAllOf) GetPayloadOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.PayloadOverride) {
		return nil, false
	}
	return o.PayloadOverride, true
}

// HasPayloadOverride returns a boolean if a field has been set.
func (o *ServiceNowAllOf) HasPayloadOverride() bool {
	if o != nil && !IsNil(o.PayloadOverride) {
		return true
	}

	return false
}

// SetPayloadOverride gets a reference to the given string and assigns it to the PayloadOverride field.
func (o *ServiceNowAllOf) SetPayloadOverride(v string) {
	o.PayloadOverride = &v
}

// GetResolutionPayloadOverride returns the ResolutionPayloadOverride field value if set, zero value otherwise.
func (o *ServiceNowAllOf) GetResolutionPayloadOverride() string {
	if o == nil || IsNil(o.ResolutionPayloadOverride) {
		var ret string
		return ret
	}
	return *o.ResolutionPayloadOverride
}

// GetResolutionPayloadOverrideOk returns a tuple with the ResolutionPayloadOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNowAllOf) GetResolutionPayloadOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.ResolutionPayloadOverride) {
		return nil, false
	}
	return o.ResolutionPayloadOverride, true
}

// HasResolutionPayloadOverride returns a boolean if a field has been set.
func (o *ServiceNowAllOf) HasResolutionPayloadOverride() bool {
	if o != nil && !IsNil(o.ResolutionPayloadOverride) {
		return true
	}

	return false
}

// SetResolutionPayloadOverride gets a reference to the given string and assigns it to the ResolutionPayloadOverride field.
func (o *ServiceNowAllOf) SetResolutionPayloadOverride(v string) {
	o.ResolutionPayloadOverride = &v
}

func (o ServiceNowAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceNowAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectionId"] = o.ConnectionId
	if !IsNil(o.ConnectionSubtype) {
		toSerialize["connectionSubtype"] = o.ConnectionSubtype
	}
	if !IsNil(o.PayloadOverride) {
		toSerialize["payloadOverride"] = o.PayloadOverride
	}
	if !IsNil(o.ResolutionPayloadOverride) {
		toSerialize["resolutionPayloadOverride"] = o.ResolutionPayloadOverride
	}
	return toSerialize, nil
}

type NullableServiceNowAllOf struct {
	value *ServiceNowAllOf
	isSet bool
}

func (v NullableServiceNowAllOf) Get() *ServiceNowAllOf {
	return v.value
}

func (v *NullableServiceNowAllOf) Set(val *ServiceNowAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceNowAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceNowAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceNowAllOf(val *ServiceNowAllOf) *NullableServiceNowAllOf {
	return &NullableServiceNowAllOf{value: val, isSet: true}
}

func (v NullableServiceNowAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceNowAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


