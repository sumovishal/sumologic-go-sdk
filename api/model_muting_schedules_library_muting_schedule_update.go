/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MutingSchedulesLibraryMutingScheduleUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MutingSchedulesLibraryMutingScheduleUpdate{}

// MutingSchedulesLibraryMutingScheduleUpdate struct for MutingSchedulesLibraryMutingScheduleUpdate
type MutingSchedulesLibraryMutingScheduleUpdate struct {
	MutingSchedulesLibraryBaseUpdate
	Schedule ScheduleDefinition `json:"schedule"`
	Monitor *MonitorScope `json:"monitor,omitempty"`
}

type _MutingSchedulesLibraryMutingScheduleUpdate MutingSchedulesLibraryMutingScheduleUpdate

// NewMutingSchedulesLibraryMutingScheduleUpdate instantiates a new MutingSchedulesLibraryMutingScheduleUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMutingSchedulesLibraryMutingScheduleUpdate(schedule ScheduleDefinition, name string, version int64, type_ string) *MutingSchedulesLibraryMutingScheduleUpdate {
	this := MutingSchedulesLibraryMutingScheduleUpdate{}
	this.Name = name
	var description string = ""
	this.Description = &description
	this.Version = version
	this.Type = type_
	this.Schedule = schedule
	return &this
}

// NewMutingSchedulesLibraryMutingScheduleUpdateWithDefaults instantiates a new MutingSchedulesLibraryMutingScheduleUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMutingSchedulesLibraryMutingScheduleUpdateWithDefaults() *MutingSchedulesLibraryMutingScheduleUpdate {
	this := MutingSchedulesLibraryMutingScheduleUpdate{}
	return &this
}

// GetSchedule returns the Schedule field value
func (o *MutingSchedulesLibraryMutingScheduleUpdate) GetSchedule() ScheduleDefinition {
	if o == nil {
		var ret ScheduleDefinition
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *MutingSchedulesLibraryMutingScheduleUpdate) GetScheduleOk() (*ScheduleDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *MutingSchedulesLibraryMutingScheduleUpdate) SetSchedule(v ScheduleDefinition) {
	o.Schedule = v
}

// GetMonitor returns the Monitor field value if set, zero value otherwise.
func (o *MutingSchedulesLibraryMutingScheduleUpdate) GetMonitor() MonitorScope {
	if o == nil || IsNil(o.Monitor) {
		var ret MonitorScope
		return ret
	}
	return *o.Monitor
}

// GetMonitorOk returns a tuple with the Monitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutingSchedulesLibraryMutingScheduleUpdate) GetMonitorOk() (*MonitorScope, bool) {
	if o == nil || IsNil(o.Monitor) {
		return nil, false
	}
	return o.Monitor, true
}

// HasMonitor returns a boolean if a field has been set.
func (o *MutingSchedulesLibraryMutingScheduleUpdate) HasMonitor() bool {
	if o != nil && !IsNil(o.Monitor) {
		return true
	}

	return false
}

// SetMonitor gets a reference to the given MonitorScope and assigns it to the Monitor field.
func (o *MutingSchedulesLibraryMutingScheduleUpdate) SetMonitor(v MonitorScope) {
	o.Monitor = &v
}

func (o MutingSchedulesLibraryMutingScheduleUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MutingSchedulesLibraryMutingScheduleUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMutingSchedulesLibraryBaseUpdate, errMutingSchedulesLibraryBaseUpdate := json.Marshal(o.MutingSchedulesLibraryBaseUpdate)
	if errMutingSchedulesLibraryBaseUpdate != nil {
		return map[string]interface{}{}, errMutingSchedulesLibraryBaseUpdate
	}
	errMutingSchedulesLibraryBaseUpdate = json.Unmarshal([]byte(serializedMutingSchedulesLibraryBaseUpdate), &toSerialize)
	if errMutingSchedulesLibraryBaseUpdate != nil {
		return map[string]interface{}{}, errMutingSchedulesLibraryBaseUpdate
	}
	toSerialize["schedule"] = o.Schedule
	if !IsNil(o.Monitor) {
		toSerialize["monitor"] = o.Monitor
	}
	return toSerialize, nil
}

func (o *MutingSchedulesLibraryMutingScheduleUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"schedule",
		"name",
		"version",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMutingSchedulesLibraryMutingScheduleUpdate := _MutingSchedulesLibraryMutingScheduleUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMutingSchedulesLibraryMutingScheduleUpdate)

	if err != nil {
		return err
	}

	*o = MutingSchedulesLibraryMutingScheduleUpdate(varMutingSchedulesLibraryMutingScheduleUpdate)

	return err
}

type NullableMutingSchedulesLibraryMutingScheduleUpdate struct {
	value *MutingSchedulesLibraryMutingScheduleUpdate
	isSet bool
}

func (v NullableMutingSchedulesLibraryMutingScheduleUpdate) Get() *MutingSchedulesLibraryMutingScheduleUpdate {
	return v.value
}

func (v *NullableMutingSchedulesLibraryMutingScheduleUpdate) Set(val *MutingSchedulesLibraryMutingScheduleUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableMutingSchedulesLibraryMutingScheduleUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableMutingSchedulesLibraryMutingScheduleUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutingSchedulesLibraryMutingScheduleUpdate(val *MutingSchedulesLibraryMutingScheduleUpdate) *NullableMutingSchedulesLibraryMutingScheduleUpdate {
	return &NullableMutingSchedulesLibraryMutingScheduleUpdate{value: val, isSet: true}
}

func (v NullableMutingSchedulesLibraryMutingScheduleUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutingSchedulesLibraryMutingScheduleUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


