/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FolderDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderDefinition{}

// FolderDefinition struct for FolderDefinition
type FolderDefinition struct {
	// The name of the folder.
	Name string `json:"name"`
	// The description of the folder.
	Description *string `json:"description,omitempty"`
	// The identifier of the parent folder.
	ParentId string `json:"parentId"`
}

// NewFolderDefinition instantiates a new FolderDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderDefinition(name string, parentId string) *FolderDefinition {
	this := FolderDefinition{}
	this.Name = name
	this.ParentId = parentId
	return &this
}

// NewFolderDefinitionWithDefaults instantiates a new FolderDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderDefinitionWithDefaults() *FolderDefinition {
	this := FolderDefinition{}
	return &this
}

// GetName returns the Name field value
func (o *FolderDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FolderDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FolderDefinition) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FolderDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FolderDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FolderDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetParentId returns the ParentId field value
func (o *FolderDefinition) GetParentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *FolderDefinition) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *FolderDefinition) SetParentId(v string) {
	o.ParentId = v
}

func (o FolderDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["parentId"] = o.ParentId
	return toSerialize, nil
}

type NullableFolderDefinition struct {
	value *FolderDefinition
	isSet bool
}

func (v NullableFolderDefinition) Get() *FolderDefinition {
	return v.value
}

func (v *NullableFolderDefinition) Set(val *FolderDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderDefinition(val *FolderDefinition) *NullableFolderDefinition {
	return &NullableFolderDefinition{value: val, isSet: true}
}

func (v NullableFolderDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


