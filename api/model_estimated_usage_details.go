/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// EstimatedUsageDetails struct for EstimatedUsageDetails
type EstimatedUsageDetails struct {
	// Amount of data scanned in bytes, to run the query.
	DataScannedInBytes *int64 `json:"dataScannedInBytes,omitempty"`
}

// NewEstimatedUsageDetails instantiates a new EstimatedUsageDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimatedUsageDetails() *EstimatedUsageDetails {
	this := EstimatedUsageDetails{}
	return &this
}

// NewEstimatedUsageDetailsWithDefaults instantiates a new EstimatedUsageDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimatedUsageDetailsWithDefaults() *EstimatedUsageDetails {
	this := EstimatedUsageDetails{}
	return &this
}

// GetDataScannedInBytes returns the DataScannedInBytes field value if set, zero value otherwise.
func (o *EstimatedUsageDetails) GetDataScannedInBytes() int64 {
	if o == nil || o.DataScannedInBytes == nil {
		var ret int64
		return ret
	}
	return *o.DataScannedInBytes
}

// GetDataScannedInBytesOk returns a tuple with the DataScannedInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EstimatedUsageDetails) GetDataScannedInBytesOk() (*int64, bool) {
	if o == nil || o.DataScannedInBytes == nil {
		return nil, false
	}
	return o.DataScannedInBytes, true
}

// HasDataScannedInBytes returns a boolean if a field has been set.
func (o *EstimatedUsageDetails) HasDataScannedInBytes() bool {
	if o != nil && o.DataScannedInBytes != nil {
		return true
	}

	return false
}

// SetDataScannedInBytes gets a reference to the given int64 and assigns it to the DataScannedInBytes field.
func (o *EstimatedUsageDetails) SetDataScannedInBytes(v int64) {
	o.DataScannedInBytes = &v
}

func (o EstimatedUsageDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataScannedInBytes != nil {
		toSerialize["dataScannedInBytes"] = o.DataScannedInBytes
	}
	return json.Marshal(toSerialize)
}

type NullableEstimatedUsageDetails struct {
	value *EstimatedUsageDetails
	isSet bool
}

func (v NullableEstimatedUsageDetails) Get() *EstimatedUsageDetails {
	return v.value
}

func (v *NullableEstimatedUsageDetails) Set(val *EstimatedUsageDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimatedUsageDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimatedUsageDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimatedUsageDetails(val *EstimatedUsageDetails) *NullableEstimatedUsageDetails {
	return &NullableEstimatedUsageDetails{value: val, isSet: true}
}

func (v NullableEstimatedUsageDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimatedUsageDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


