/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// TraceHttpSpanInfo struct for TraceHttpSpanInfo
type TraceHttpSpanInfo struct {
	TraceSpanInfo
	// HTTP method of the request for the associated span.
	Method *string `json:"method,omitempty"`
	// URL of the request being handled in this span, in the standard URI format.
	Url *string `json:"url,omitempty"`
	// HTTP response status code for the associated span.
	StatusCode *int32 `json:"statusCode,omitempty"`
}

// NewTraceHttpSpanInfo instantiates a new TraceHttpSpanInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceHttpSpanInfo(type_ string) *TraceHttpSpanInfo {
	this := TraceHttpSpanInfo{}
	this.Type = type_
	return &this
}

// NewTraceHttpSpanInfoWithDefaults instantiates a new TraceHttpSpanInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceHttpSpanInfoWithDefaults() *TraceHttpSpanInfo {
	this := TraceHttpSpanInfo{}
	return &this
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *TraceHttpSpanInfo) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceHttpSpanInfo) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *TraceHttpSpanInfo) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *TraceHttpSpanInfo) SetMethod(v string) {
	o.Method = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *TraceHttpSpanInfo) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceHttpSpanInfo) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *TraceHttpSpanInfo) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *TraceHttpSpanInfo) SetUrl(v string) {
	o.Url = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *TraceHttpSpanInfo) GetStatusCode() int32 {
	if o == nil || o.StatusCode == nil {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceHttpSpanInfo) GetStatusCodeOk() (*int32, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *TraceHttpSpanInfo) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *TraceHttpSpanInfo) SetStatusCode(v int32) {
	o.StatusCode = &v
}

func (o TraceHttpSpanInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTraceSpanInfo, errTraceSpanInfo := json.Marshal(o.TraceSpanInfo)
	if errTraceSpanInfo != nil {
		return []byte{}, errTraceSpanInfo
	}
	errTraceSpanInfo = json.Unmarshal([]byte(serializedTraceSpanInfo), &toSerialize)
	if errTraceSpanInfo != nil {
		return []byte{}, errTraceSpanInfo
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.StatusCode != nil {
		toSerialize["statusCode"] = o.StatusCode
	}
	return json.Marshal(toSerialize)
}

type NullableTraceHttpSpanInfo struct {
	value *TraceHttpSpanInfo
	isSet bool
}

func (v NullableTraceHttpSpanInfo) Get() *TraceHttpSpanInfo {
	return v.value
}

func (v *NullableTraceHttpSpanInfo) Set(val *TraceHttpSpanInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceHttpSpanInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceHttpSpanInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceHttpSpanInfo(val *TraceHttpSpanInfo) *NullableTraceHttpSpanInfo {
	return &NullableTraceHttpSpanInfo{value: val, isSet: true}
}

func (v NullableTraceHttpSpanInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceHttpSpanInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


