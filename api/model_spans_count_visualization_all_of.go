/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SpansCountVisualizationAllOf Represents the visualization type where the total number of all spans is counted or where the spans are counted by a specific field. 
type SpansCountVisualizationAllOf struct {
	// A field by which the spans need to be counted.
	DistinctBy *string `json:"distinctBy,omitempty"`
}

// NewSpansCountVisualizationAllOf instantiates a new SpansCountVisualizationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpansCountVisualizationAllOf() *SpansCountVisualizationAllOf {
	this := SpansCountVisualizationAllOf{}
	return &this
}

// NewSpansCountVisualizationAllOfWithDefaults instantiates a new SpansCountVisualizationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpansCountVisualizationAllOfWithDefaults() *SpansCountVisualizationAllOf {
	this := SpansCountVisualizationAllOf{}
	return &this
}

// GetDistinctBy returns the DistinctBy field value if set, zero value otherwise.
func (o *SpansCountVisualizationAllOf) GetDistinctBy() string {
	if o == nil || o.DistinctBy == nil {
		var ret string
		return ret
	}
	return *o.DistinctBy
}

// GetDistinctByOk returns a tuple with the DistinctBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpansCountVisualizationAllOf) GetDistinctByOk() (*string, bool) {
	if o == nil || o.DistinctBy == nil {
		return nil, false
	}
	return o.DistinctBy, true
}

// HasDistinctBy returns a boolean if a field has been set.
func (o *SpansCountVisualizationAllOf) HasDistinctBy() bool {
	if o != nil && o.DistinctBy != nil {
		return true
	}

	return false
}

// SetDistinctBy gets a reference to the given string and assigns it to the DistinctBy field.
func (o *SpansCountVisualizationAllOf) SetDistinctBy(v string) {
	o.DistinctBy = &v
}

func (o SpansCountVisualizationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DistinctBy != nil {
		toSerialize["distinctBy"] = o.DistinctBy
	}
	return json.Marshal(toSerialize)
}

type NullableSpansCountVisualizationAllOf struct {
	value *SpansCountVisualizationAllOf
	isSet bool
}

func (v NullableSpansCountVisualizationAllOf) Get() *SpansCountVisualizationAllOf {
	return v.value
}

func (v *NullableSpansCountVisualizationAllOf) Set(val *SpansCountVisualizationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSpansCountVisualizationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSpansCountVisualizationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpansCountVisualizationAllOf(val *SpansCountVisualizationAllOf) *NullableSpansCountVisualizationAllOf {
	return &NullableSpansCountVisualizationAllOf{value: val, isSet: true}
}

func (v NullableSpansCountVisualizationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpansCountVisualizationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


