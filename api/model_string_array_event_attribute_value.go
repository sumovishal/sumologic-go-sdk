/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// StringArrayEventAttributeValue struct for StringArrayEventAttributeValue
type StringArrayEventAttributeValue struct {
	EventAttributeValue
	Values []string `json:"values"`
}

// NewStringArrayEventAttributeValue instantiates a new StringArrayEventAttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStringArrayEventAttributeValue(values []string, type_ string) *StringArrayEventAttributeValue {
	this := StringArrayEventAttributeValue{}
	this.Type = type_
	this.Values = values
	return &this
}

// NewStringArrayEventAttributeValueWithDefaults instantiates a new StringArrayEventAttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStringArrayEventAttributeValueWithDefaults() *StringArrayEventAttributeValue {
	this := StringArrayEventAttributeValue{}
	return &this
}

// GetValues returns the Values field value
func (o *StringArrayEventAttributeValue) GetValues() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *StringArrayEventAttributeValue) GetValuesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *StringArrayEventAttributeValue) SetValues(v []string) {
	o.Values = v
}

func (o StringArrayEventAttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedEventAttributeValue, errEventAttributeValue := json.Marshal(o.EventAttributeValue)
	if errEventAttributeValue != nil {
		return []byte{}, errEventAttributeValue
	}
	errEventAttributeValue = json.Unmarshal([]byte(serializedEventAttributeValue), &toSerialize)
	if errEventAttributeValue != nil {
		return []byte{}, errEventAttributeValue
	}
	if true {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableStringArrayEventAttributeValue struct {
	value *StringArrayEventAttributeValue
	isSet bool
}

func (v NullableStringArrayEventAttributeValue) Get() *StringArrayEventAttributeValue {
	return v.value
}

func (v *NullableStringArrayEventAttributeValue) Set(val *StringArrayEventAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableStringArrayEventAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableStringArrayEventAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringArrayEventAttributeValue(val *StringArrayEventAttributeValue) *NullableStringArrayEventAttributeValue {
	return &NullableStringArrayEventAttributeValue{value: val, isSet: true}
}

func (v NullableStringArrayEventAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringArrayEventAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


