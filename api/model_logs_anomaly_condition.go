/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the LogsAnomalyCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsAnomalyCondition{}

// LogsAnomalyCondition struct for LogsAnomalyCondition
type LogsAnomalyCondition struct {
	AnomalyCondition
}

// NewLogsAnomalyCondition instantiates a new LogsAnomalyCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsAnomalyCondition(triggerType string, timeRange string, anomalyDetectorType string, field string) *LogsAnomalyCondition {
	this := LogsAnomalyCondition{}
	var detectionMethod string = "StaticCondition"
	this.DetectionMethod = &detectionMethod
	this.TriggerType = triggerType
	this.TimeRange = timeRange
	var sensitivity float64 = 0.5
	this.Sensitivity = &sensitivity
	this.AnomalyDetectorType = anomalyDetectorType
	this.Field = field
	var minAnomalyCount int32 = 1
	this.MinAnomalyCount = &minAnomalyCount
	var direction string = "Both"
	this.Direction = &direction
	return &this
}

// NewLogsAnomalyConditionWithDefaults instantiates a new LogsAnomalyCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsAnomalyConditionWithDefaults() *LogsAnomalyCondition {
	this := LogsAnomalyCondition{}
	return &this
}

func (o LogsAnomalyCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsAnomalyCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedAnomalyCondition, errAnomalyCondition := json.Marshal(o.AnomalyCondition)
	if errAnomalyCondition != nil {
		return map[string]interface{}{}, errAnomalyCondition
	}
	errAnomalyCondition = json.Unmarshal([]byte(serializedAnomalyCondition), &toSerialize)
	if errAnomalyCondition != nil {
		return map[string]interface{}{}, errAnomalyCondition
	}
	return toSerialize, nil
}

type NullableLogsAnomalyCondition struct {
	value *LogsAnomalyCondition
	isSet bool
}

func (v NullableLogsAnomalyCondition) Get() *LogsAnomalyCondition {
	return v.value
}

func (v *NullableLogsAnomalyCondition) Set(val *LogsAnomalyCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsAnomalyCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsAnomalyCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsAnomalyCondition(val *LogsAnomalyCondition) *NullableLogsAnomalyCondition {
	return &NullableLogsAnomalyCondition{value: val, isSet: true}
}

func (v NullableLogsAnomalyCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsAnomalyCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


