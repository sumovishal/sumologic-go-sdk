/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the SpanEventAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanEventAttribute{}

// SpanEventAttribute struct for SpanEventAttribute
type SpanEventAttribute struct {
	// Name of the attribute.
	AttributeName *string `json:"attributeName,omitempty"`
	AttributeValue *EventAttributeValue `json:"attributeValue,omitempty"`
}

// NewSpanEventAttribute instantiates a new SpanEventAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanEventAttribute() *SpanEventAttribute {
	this := SpanEventAttribute{}
	return &this
}

// NewSpanEventAttributeWithDefaults instantiates a new SpanEventAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanEventAttributeWithDefaults() *SpanEventAttribute {
	this := SpanEventAttribute{}
	return &this
}

// GetAttributeName returns the AttributeName field value if set, zero value otherwise.
func (o *SpanEventAttribute) GetAttributeName() string {
	if o == nil || IsNil(o.AttributeName) {
		var ret string
		return ret
	}
	return *o.AttributeName
}

// GetAttributeNameOk returns a tuple with the AttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanEventAttribute) GetAttributeNameOk() (*string, bool) {
	if o == nil || IsNil(o.AttributeName) {
		return nil, false
	}
	return o.AttributeName, true
}

// HasAttributeName returns a boolean if a field has been set.
func (o *SpanEventAttribute) HasAttributeName() bool {
	if o != nil && !IsNil(o.AttributeName) {
		return true
	}

	return false
}

// SetAttributeName gets a reference to the given string and assigns it to the AttributeName field.
func (o *SpanEventAttribute) SetAttributeName(v string) {
	o.AttributeName = &v
}

// GetAttributeValue returns the AttributeValue field value if set, zero value otherwise.
func (o *SpanEventAttribute) GetAttributeValue() EventAttributeValue {
	if o == nil || IsNil(o.AttributeValue) {
		var ret EventAttributeValue
		return ret
	}
	return *o.AttributeValue
}

// GetAttributeValueOk returns a tuple with the AttributeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanEventAttribute) GetAttributeValueOk() (*EventAttributeValue, bool) {
	if o == nil || IsNil(o.AttributeValue) {
		return nil, false
	}
	return o.AttributeValue, true
}

// HasAttributeValue returns a boolean if a field has been set.
func (o *SpanEventAttribute) HasAttributeValue() bool {
	if o != nil && !IsNil(o.AttributeValue) {
		return true
	}

	return false
}

// SetAttributeValue gets a reference to the given EventAttributeValue and assigns it to the AttributeValue field.
func (o *SpanEventAttribute) SetAttributeValue(v EventAttributeValue) {
	o.AttributeValue = &v
}

func (o SpanEventAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanEventAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttributeName) {
		toSerialize["attributeName"] = o.AttributeName
	}
	if !IsNil(o.AttributeValue) {
		toSerialize["attributeValue"] = o.AttributeValue
	}
	return toSerialize, nil
}

type NullableSpanEventAttribute struct {
	value *SpanEventAttribute
	isSet bool
}

func (v NullableSpanEventAttribute) Get() *SpanEventAttribute {
	return v.value
}

func (v *NullableSpanEventAttribute) Set(val *SpanEventAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanEventAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanEventAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanEventAttribute(val *SpanEventAttribute) *NullableSpanEventAttribute {
	return &NullableSpanEventAttribute{value: val, isSet: true}
}

func (v NullableSpanEventAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanEventAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


