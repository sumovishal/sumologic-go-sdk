/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TraceQueryStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceQueryStatusResponse{}

// TraceQueryStatusResponse struct for TraceQueryStatusResponse
type TraceQueryStatusResponse struct {
	// A list of trace queries.
	QueryRows []TraceQueryRowStatus `json:"queryRows"`
	// Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Canceled`.
	Status string `json:"status" validate:"regexp=^(Processing|Finished|Error|Canceled)$"`
}

type _TraceQueryStatusResponse TraceQueryStatusResponse

// NewTraceQueryStatusResponse instantiates a new TraceQueryStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceQueryStatusResponse(queryRows []TraceQueryRowStatus, status string) *TraceQueryStatusResponse {
	this := TraceQueryStatusResponse{}
	this.QueryRows = queryRows
	this.Status = status
	return &this
}

// NewTraceQueryStatusResponseWithDefaults instantiates a new TraceQueryStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceQueryStatusResponseWithDefaults() *TraceQueryStatusResponse {
	this := TraceQueryStatusResponse{}
	return &this
}

// GetQueryRows returns the QueryRows field value
func (o *TraceQueryStatusResponse) GetQueryRows() []TraceQueryRowStatus {
	if o == nil {
		var ret []TraceQueryRowStatus
		return ret
	}

	return o.QueryRows
}

// GetQueryRowsOk returns a tuple with the QueryRows field value
// and a boolean to check if the value has been set.
func (o *TraceQueryStatusResponse) GetQueryRowsOk() ([]TraceQueryRowStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueryRows, true
}

// SetQueryRows sets field value
func (o *TraceQueryStatusResponse) SetQueryRows(v []TraceQueryRowStatus) {
	o.QueryRows = v
}

// GetStatus returns the Status field value
func (o *TraceQueryStatusResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TraceQueryStatusResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TraceQueryStatusResponse) SetStatus(v string) {
	o.Status = v
}

func (o TraceQueryStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceQueryStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queryRows"] = o.QueryRows
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *TraceQueryStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queryRows",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTraceQueryStatusResponse := _TraceQueryStatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTraceQueryStatusResponse)

	if err != nil {
		return err
	}

	*o = TraceQueryStatusResponse(varTraceQueryStatusResponse)

	return err
}

type NullableTraceQueryStatusResponse struct {
	value *TraceQueryStatusResponse
	isSet bool
}

func (v NullableTraceQueryStatusResponse) Get() *TraceQueryStatusResponse {
	return v.value
}

func (v *NullableTraceQueryStatusResponse) Set(val *TraceQueryStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceQueryStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceQueryStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceQueryStatusResponse(val *TraceQueryStatusResponse) *NullableTraceQueryStatusResponse {
	return &NullableTraceQueryStatusResponse{value: val, isSet: true}
}

func (v NullableTraceQueryStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceQueryStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


