/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScheduleNotificationSyncDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleNotificationSyncDefinition{}

// ScheduleNotificationSyncDefinition struct for ScheduleNotificationSyncDefinition
type ScheduleNotificationSyncDefinition struct {
	// Delivery channel for notifications.
	TaskType string `json:"taskType"`
}

type _ScheduleNotificationSyncDefinition ScheduleNotificationSyncDefinition

// NewScheduleNotificationSyncDefinition instantiates a new ScheduleNotificationSyncDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleNotificationSyncDefinition(taskType string) *ScheduleNotificationSyncDefinition {
	this := ScheduleNotificationSyncDefinition{}
	this.TaskType = taskType
	return &this
}

// NewScheduleNotificationSyncDefinitionWithDefaults instantiates a new ScheduleNotificationSyncDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleNotificationSyncDefinitionWithDefaults() *ScheduleNotificationSyncDefinition {
	this := ScheduleNotificationSyncDefinition{}
	return &this
}

// GetTaskType returns the TaskType field value
func (o *ScheduleNotificationSyncDefinition) GetTaskType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value
// and a boolean to check if the value has been set.
func (o *ScheduleNotificationSyncDefinition) GetTaskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskType, true
}

// SetTaskType sets field value
func (o *ScheduleNotificationSyncDefinition) SetTaskType(v string) {
	o.TaskType = v
}

func (o ScheduleNotificationSyncDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleNotificationSyncDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["taskType"] = o.TaskType
	return toSerialize, nil
}

func (o *ScheduleNotificationSyncDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"taskType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduleNotificationSyncDefinition := _ScheduleNotificationSyncDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduleNotificationSyncDefinition)

	if err != nil {
		return err
	}

	*o = ScheduleNotificationSyncDefinition(varScheduleNotificationSyncDefinition)

	return err
}

type NullableScheduleNotificationSyncDefinition struct {
	value *ScheduleNotificationSyncDefinition
	isSet bool
}

func (v NullableScheduleNotificationSyncDefinition) Get() *ScheduleNotificationSyncDefinition {
	return v.value
}

func (v *NullableScheduleNotificationSyncDefinition) Set(val *ScheduleNotificationSyncDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleNotificationSyncDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleNotificationSyncDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleNotificationSyncDefinition(val *ScheduleNotificationSyncDefinition) *NullableScheduleNotificationSyncDefinition {
	return &NullableScheduleNotificationSyncDefinition{value: val, isSet: true}
}

func (v NullableScheduleNotificationSyncDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleNotificationSyncDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


