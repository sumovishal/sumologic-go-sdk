/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WebhookConnectionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookConnectionAllOf{}

// WebhookConnectionAllOf struct for WebhookConnectionAllOf
type WebhookConnectionAllOf struct {
	// URL for the webhook connection.
	Url string `json:"url"`
	// List of access authorization headers.
	Headers []Header `json:"headers"`
	// List of custom webhook headers.
	CustomHeaders []Header `json:"customHeaders"`
	// Default payload of the webhook.
	DefaultPayload string `json:"defaultPayload"`
	// Type of webhook connection. Valid values are `AWSLambda`, `Azure`, `Datadog`, `HipChat`, `Jira`, `NewRelic`, `Opsgenie`, `PagerDuty`, `Slack`, `MicrosoftTeams`, `ServiceNow`, `SumoCloudSOAR` and `Webhook`.
	WebhookType string `json:"webhookType"`
	// The subtype of the connection. Valid values are `Event` or `Incident`.
	ConnectionSubtype *string `json:"connectionSubtype,omitempty"`
	// Resolution payload of the webhook.
	ResolutionPayload *string `json:"resolutionPayload,omitempty"`
	// Webhook endpoint warning for incorrect variable names and syntax.
	Warnings []string `json:"warnings,omitempty"`
}

// NewWebhookConnectionAllOf instantiates a new WebhookConnectionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookConnectionAllOf(url string, headers []Header, customHeaders []Header, defaultPayload string, webhookType string) *WebhookConnectionAllOf {
	this := WebhookConnectionAllOf{}
	this.Url = url
	this.Headers = headers
	this.CustomHeaders = customHeaders
	this.DefaultPayload = defaultPayload
	this.WebhookType = webhookType
	return &this
}

// NewWebhookConnectionAllOfWithDefaults instantiates a new WebhookConnectionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookConnectionAllOfWithDefaults() *WebhookConnectionAllOf {
	this := WebhookConnectionAllOf{}
	return &this
}

// GetUrl returns the Url field value
func (o *WebhookConnectionAllOf) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WebhookConnectionAllOf) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WebhookConnectionAllOf) SetUrl(v string) {
	o.Url = v
}

// GetHeaders returns the Headers field value
func (o *WebhookConnectionAllOf) GetHeaders() []Header {
	if o == nil {
		var ret []Header
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *WebhookConnectionAllOf) GetHeadersOk() ([]Header, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headers, true
}

// SetHeaders sets field value
func (o *WebhookConnectionAllOf) SetHeaders(v []Header) {
	o.Headers = v
}

// GetCustomHeaders returns the CustomHeaders field value
func (o *WebhookConnectionAllOf) GetCustomHeaders() []Header {
	if o == nil {
		var ret []Header
		return ret
	}

	return o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value
// and a boolean to check if the value has been set.
func (o *WebhookConnectionAllOf) GetCustomHeadersOk() ([]Header, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomHeaders, true
}

// SetCustomHeaders sets field value
func (o *WebhookConnectionAllOf) SetCustomHeaders(v []Header) {
	o.CustomHeaders = v
}

// GetDefaultPayload returns the DefaultPayload field value
func (o *WebhookConnectionAllOf) GetDefaultPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultPayload
}

// GetDefaultPayloadOk returns a tuple with the DefaultPayload field value
// and a boolean to check if the value has been set.
func (o *WebhookConnectionAllOf) GetDefaultPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultPayload, true
}

// SetDefaultPayload sets field value
func (o *WebhookConnectionAllOf) SetDefaultPayload(v string) {
	o.DefaultPayload = v
}

// GetWebhookType returns the WebhookType field value
func (o *WebhookConnectionAllOf) GetWebhookType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookType
}

// GetWebhookTypeOk returns a tuple with the WebhookType field value
// and a boolean to check if the value has been set.
func (o *WebhookConnectionAllOf) GetWebhookTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WebhookType, true
}

// SetWebhookType sets field value
func (o *WebhookConnectionAllOf) SetWebhookType(v string) {
	o.WebhookType = v
}

// GetConnectionSubtype returns the ConnectionSubtype field value if set, zero value otherwise.
func (o *WebhookConnectionAllOf) GetConnectionSubtype() string {
	if o == nil || IsNil(o.ConnectionSubtype) {
		var ret string
		return ret
	}
	return *o.ConnectionSubtype
}

// GetConnectionSubtypeOk returns a tuple with the ConnectionSubtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookConnectionAllOf) GetConnectionSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionSubtype) {
		return nil, false
	}
	return o.ConnectionSubtype, true
}

// HasConnectionSubtype returns a boolean if a field has been set.
func (o *WebhookConnectionAllOf) HasConnectionSubtype() bool {
	if o != nil && !IsNil(o.ConnectionSubtype) {
		return true
	}

	return false
}

// SetConnectionSubtype gets a reference to the given string and assigns it to the ConnectionSubtype field.
func (o *WebhookConnectionAllOf) SetConnectionSubtype(v string) {
	o.ConnectionSubtype = &v
}

// GetResolutionPayload returns the ResolutionPayload field value if set, zero value otherwise.
func (o *WebhookConnectionAllOf) GetResolutionPayload() string {
	if o == nil || IsNil(o.ResolutionPayload) {
		var ret string
		return ret
	}
	return *o.ResolutionPayload
}

// GetResolutionPayloadOk returns a tuple with the ResolutionPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookConnectionAllOf) GetResolutionPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.ResolutionPayload) {
		return nil, false
	}
	return o.ResolutionPayload, true
}

// HasResolutionPayload returns a boolean if a field has been set.
func (o *WebhookConnectionAllOf) HasResolutionPayload() bool {
	if o != nil && !IsNil(o.ResolutionPayload) {
		return true
	}

	return false
}

// SetResolutionPayload gets a reference to the given string and assigns it to the ResolutionPayload field.
func (o *WebhookConnectionAllOf) SetResolutionPayload(v string) {
	o.ResolutionPayload = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *WebhookConnectionAllOf) GetWarnings() []string {
	if o == nil || IsNil(o.Warnings) {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookConnectionAllOf) GetWarningsOk() ([]string, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *WebhookConnectionAllOf) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *WebhookConnectionAllOf) SetWarnings(v []string) {
	o.Warnings = v
}

func (o WebhookConnectionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookConnectionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["headers"] = o.Headers
	toSerialize["customHeaders"] = o.CustomHeaders
	toSerialize["defaultPayload"] = o.DefaultPayload
	toSerialize["webhookType"] = o.WebhookType
	if !IsNil(o.ConnectionSubtype) {
		toSerialize["connectionSubtype"] = o.ConnectionSubtype
	}
	if !IsNil(o.ResolutionPayload) {
		toSerialize["resolutionPayload"] = o.ResolutionPayload
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableWebhookConnectionAllOf struct {
	value *WebhookConnectionAllOf
	isSet bool
}

func (v NullableWebhookConnectionAllOf) Get() *WebhookConnectionAllOf {
	return v.value
}

func (v *NullableWebhookConnectionAllOf) Set(val *WebhookConnectionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookConnectionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookConnectionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookConnectionAllOf(val *WebhookConnectionAllOf) *NullableWebhookConnectionAllOf {
	return &NullableWebhookConnectionAllOf{value: val, isSet: true}
}

func (v NullableWebhookConnectionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookConnectionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


