/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the CustomFieldUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomFieldUsage{}

// CustomFieldUsage struct for CustomFieldUsage
type CustomFieldUsage struct {
	// Field name.
	FieldName string `json:"fieldName"`
	// Identifier of the field.
	FieldId string `json:"fieldId"`
	// Field type. Possible values are `String`, `Long`, `Int`, `Double`, `Boolean`.
	DataType string `json:"dataType"`
	// Indicates whether the field is enabled and its values are being accepted. Possible values are `Enabled` and `Disabled`.
	State string `json:"state"`
	// An array of hexadecimal identifiers of field extraction rules which use this field.
	FieldExtractionRules []string `json:"fieldExtractionRules,omitempty"`
	// An array of hexadecimal identifiers of roles which use this field in the search filter.
	Roles []string `json:"roles,omitempty"`
	// An array of hexadecimal identifiers of partitions which use this field in the routing expression.
	Partitions []string `json:"partitions,omitempty"`
	// Total number of collectors using this field.
	CollectorsCount *int32 `json:"collectorsCount,omitempty"`
	// Total number of sources using this field.
	SourcesCount *int32 `json:"sourcesCount,omitempty"`
}

// NewCustomFieldUsage instantiates a new CustomFieldUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFieldUsage(fieldName string, fieldId string, dataType string, state string) *CustomFieldUsage {
	this := CustomFieldUsage{}
	this.FieldName = fieldName
	this.FieldId = fieldId
	this.DataType = dataType
	this.State = state
	return &this
}

// NewCustomFieldUsageWithDefaults instantiates a new CustomFieldUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldUsageWithDefaults() *CustomFieldUsage {
	this := CustomFieldUsage{}
	return &this
}

// GetFieldName returns the FieldName field value
func (o *CustomFieldUsage) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *CustomFieldUsage) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *CustomFieldUsage) SetFieldName(v string) {
	o.FieldName = v
}

// GetFieldId returns the FieldId field value
func (o *CustomFieldUsage) GetFieldId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldId
}

// GetFieldIdOk returns a tuple with the FieldId field value
// and a boolean to check if the value has been set.
func (o *CustomFieldUsage) GetFieldIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldId, true
}

// SetFieldId sets field value
func (o *CustomFieldUsage) SetFieldId(v string) {
	o.FieldId = v
}

// GetDataType returns the DataType field value
func (o *CustomFieldUsage) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *CustomFieldUsage) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *CustomFieldUsage) SetDataType(v string) {
	o.DataType = v
}

// GetState returns the State field value
func (o *CustomFieldUsage) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CustomFieldUsage) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CustomFieldUsage) SetState(v string) {
	o.State = v
}

// GetFieldExtractionRules returns the FieldExtractionRules field value if set, zero value otherwise.
func (o *CustomFieldUsage) GetFieldExtractionRules() []string {
	if o == nil || IsNil(o.FieldExtractionRules) {
		var ret []string
		return ret
	}
	return o.FieldExtractionRules
}

// GetFieldExtractionRulesOk returns a tuple with the FieldExtractionRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldUsage) GetFieldExtractionRulesOk() ([]string, bool) {
	if o == nil || IsNil(o.FieldExtractionRules) {
		return nil, false
	}
	return o.FieldExtractionRules, true
}

// HasFieldExtractionRules returns a boolean if a field has been set.
func (o *CustomFieldUsage) HasFieldExtractionRules() bool {
	if o != nil && !IsNil(o.FieldExtractionRules) {
		return true
	}

	return false
}

// SetFieldExtractionRules gets a reference to the given []string and assigns it to the FieldExtractionRules field.
func (o *CustomFieldUsage) SetFieldExtractionRules(v []string) {
	o.FieldExtractionRules = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *CustomFieldUsage) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldUsage) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CustomFieldUsage) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *CustomFieldUsage) SetRoles(v []string) {
	o.Roles = v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *CustomFieldUsage) GetPartitions() []string {
	if o == nil || IsNil(o.Partitions) {
		var ret []string
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldUsage) GetPartitionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *CustomFieldUsage) HasPartitions() bool {
	if o != nil && !IsNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []string and assigns it to the Partitions field.
func (o *CustomFieldUsage) SetPartitions(v []string) {
	o.Partitions = v
}

// GetCollectorsCount returns the CollectorsCount field value if set, zero value otherwise.
func (o *CustomFieldUsage) GetCollectorsCount() int32 {
	if o == nil || IsNil(o.CollectorsCount) {
		var ret int32
		return ret
	}
	return *o.CollectorsCount
}

// GetCollectorsCountOk returns a tuple with the CollectorsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldUsage) GetCollectorsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CollectorsCount) {
		return nil, false
	}
	return o.CollectorsCount, true
}

// HasCollectorsCount returns a boolean if a field has been set.
func (o *CustomFieldUsage) HasCollectorsCount() bool {
	if o != nil && !IsNil(o.CollectorsCount) {
		return true
	}

	return false
}

// SetCollectorsCount gets a reference to the given int32 and assigns it to the CollectorsCount field.
func (o *CustomFieldUsage) SetCollectorsCount(v int32) {
	o.CollectorsCount = &v
}

// GetSourcesCount returns the SourcesCount field value if set, zero value otherwise.
func (o *CustomFieldUsage) GetSourcesCount() int32 {
	if o == nil || IsNil(o.SourcesCount) {
		var ret int32
		return ret
	}
	return *o.SourcesCount
}

// GetSourcesCountOk returns a tuple with the SourcesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldUsage) GetSourcesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SourcesCount) {
		return nil, false
	}
	return o.SourcesCount, true
}

// HasSourcesCount returns a boolean if a field has been set.
func (o *CustomFieldUsage) HasSourcesCount() bool {
	if o != nil && !IsNil(o.SourcesCount) {
		return true
	}

	return false
}

// SetSourcesCount gets a reference to the given int32 and assigns it to the SourcesCount field.
func (o *CustomFieldUsage) SetSourcesCount(v int32) {
	o.SourcesCount = &v
}

func (o CustomFieldUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomFieldUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fieldName"] = o.FieldName
	toSerialize["fieldId"] = o.FieldId
	toSerialize["dataType"] = o.DataType
	toSerialize["state"] = o.State
	if !IsNil(o.FieldExtractionRules) {
		toSerialize["fieldExtractionRules"] = o.FieldExtractionRules
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}
	if !IsNil(o.CollectorsCount) {
		toSerialize["collectorsCount"] = o.CollectorsCount
	}
	if !IsNil(o.SourcesCount) {
		toSerialize["sourcesCount"] = o.SourcesCount
	}
	return toSerialize, nil
}

type NullableCustomFieldUsage struct {
	value *CustomFieldUsage
	isSet bool
}

func (v NullableCustomFieldUsage) Get() *CustomFieldUsage {
	return v.value
}

func (v *NullableCustomFieldUsage) Set(val *CustomFieldUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldUsage(val *CustomFieldUsage) *NullableCustomFieldUsage {
	return &NullableCustomFieldUsage{value: val, isSet: true}
}

func (v NullableCustomFieldUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


