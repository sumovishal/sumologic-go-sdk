/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SloUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloUsage{}

// SloUsage The usage info of SLOs.
type SloUsage struct {
	// The type of SLO usage info (Logs/Metrics/Monitor based).
	SliType *string `json:"sliType,omitempty"`
	// Current number of active Logs/Metrics/Monitors SLOs.
	Usage *int32 `json:"usage,omitempty"`
	// The limit of active Logs/Metrics/Monitors SLOs.
	Limit *int32 `json:"limit,omitempty"`
}

// NewSloUsage instantiates a new SloUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloUsage() *SloUsage {
	this := SloUsage{}
	return &this
}

// NewSloUsageWithDefaults instantiates a new SloUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloUsageWithDefaults() *SloUsage {
	this := SloUsage{}
	return &this
}

// GetSliType returns the SliType field value if set, zero value otherwise.
func (o *SloUsage) GetSliType() string {
	if o == nil || IsNil(o.SliType) {
		var ret string
		return ret
	}
	return *o.SliType
}

// GetSliTypeOk returns a tuple with the SliType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloUsage) GetSliTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SliType) {
		return nil, false
	}
	return o.SliType, true
}

// HasSliType returns a boolean if a field has been set.
func (o *SloUsage) HasSliType() bool {
	if o != nil && !IsNil(o.SliType) {
		return true
	}

	return false
}

// SetSliType gets a reference to the given string and assigns it to the SliType field.
func (o *SloUsage) SetSliType(v string) {
	o.SliType = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *SloUsage) GetUsage() int32 {
	if o == nil || IsNil(o.Usage) {
		var ret int32
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloUsage) GetUsageOk() (*int32, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *SloUsage) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given int32 and assigns it to the Usage field.
func (o *SloUsage) SetUsage(v int32) {
	o.Usage = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *SloUsage) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloUsage) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *SloUsage) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *SloUsage) SetLimit(v int32) {
	o.Limit = &v
}

func (o SloUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SliType) {
		toSerialize["sliType"] = o.SliType
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	return toSerialize, nil
}

type NullableSloUsage struct {
	value *SloUsage
	isSet bool
}

func (v NullableSloUsage) Get() *SloUsage {
	return v.value
}

func (v *NullableSloUsage) Set(val *SloUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableSloUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableSloUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloUsage(val *SloUsage) *NullableSloUsage {
	return &NullableSloUsage{value: val, isSet: true}
}

func (v NullableSloUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


