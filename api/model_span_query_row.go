/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SpanQueryRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanQueryRow{}

// SpanQueryRow struct for SpanQueryRow
type SpanQueryRow struct {
	// Query string using the log search syntax.
	QueryString string `json:"queryString"`
	// An identifier used to reference this particular row of the query request. Within a query, row ids must have distinct values.
	RowId string `json:"rowId" validate:"regexp=^[a-zA-Z0-9_]*$"`
}

type _SpanQueryRow SpanQueryRow

// NewSpanQueryRow instantiates a new SpanQueryRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanQueryRow(queryString string, rowId string) *SpanQueryRow {
	this := SpanQueryRow{}
	this.QueryString = queryString
	this.RowId = rowId
	return &this
}

// NewSpanQueryRowWithDefaults instantiates a new SpanQueryRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanQueryRowWithDefaults() *SpanQueryRow {
	this := SpanQueryRow{}
	return &this
}

// GetQueryString returns the QueryString field value
func (o *SpanQueryRow) GetQueryString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryString
}

// GetQueryStringOk returns a tuple with the QueryString field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRow) GetQueryStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryString, true
}

// SetQueryString sets field value
func (o *SpanQueryRow) SetQueryString(v string) {
	o.QueryString = v
}

// GetRowId returns the RowId field value
func (o *SpanQueryRow) GetRowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowId
}

// GetRowIdOk returns a tuple with the RowId field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRow) GetRowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowId, true
}

// SetRowId sets field value
func (o *SpanQueryRow) SetRowId(v string) {
	o.RowId = v
}

func (o SpanQueryRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanQueryRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queryString"] = o.QueryString
	toSerialize["rowId"] = o.RowId
	return toSerialize, nil
}

func (o *SpanQueryRow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"queryString",
		"rowId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpanQueryRow := _SpanQueryRow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpanQueryRow)

	if err != nil {
		return err
	}

	*o = SpanQueryRow(varSpanQueryRow)

	return err
}

type NullableSpanQueryRow struct {
	value *SpanQueryRow
	isSet bool
}

func (v NullableSpanQueryRow) Get() *SpanQueryRow {
	return v.value
}

func (v *NullableSpanQueryRow) Set(val *SpanQueryRow) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanQueryRow) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanQueryRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanQueryRow(val *SpanQueryRow) *NullableSpanQueryRow {
	return &NullableSpanQueryRow{value: val, isSet: true}
}

func (v NullableSpanQueryRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanQueryRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


