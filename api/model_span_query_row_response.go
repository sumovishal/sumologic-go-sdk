/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SpanQueryRowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanQueryRowResponse{}

// SpanQueryRowResponse struct for SpanQueryRowResponse
type SpanQueryRowResponse struct {
	// A unique identifier of the query.
	RowId string `json:"rowId"`
	// List of errors which occured when executing the query
	Errors []SpanQueryRowError `json:"errors,omitempty"`
	// Indicates whether this query is an aggregation
	IsAggregation bool `json:"isAggregation"`
	// The executed query after rewriting
	ExecutedQuery *string `json:"executedQuery,omitempty"`
}

// NewSpanQueryRowResponse instantiates a new SpanQueryRowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanQueryRowResponse(rowId string, isAggregation bool) *SpanQueryRowResponse {
	this := SpanQueryRowResponse{}
	this.RowId = rowId
	this.IsAggregation = isAggregation
	return &this
}

// NewSpanQueryRowResponseWithDefaults instantiates a new SpanQueryRowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanQueryRowResponseWithDefaults() *SpanQueryRowResponse {
	this := SpanQueryRowResponse{}
	var isAggregation bool = false
	this.IsAggregation = isAggregation
	return &this
}

// GetRowId returns the RowId field value
func (o *SpanQueryRowResponse) GetRowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowId
}

// GetRowIdOk returns a tuple with the RowId field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRowResponse) GetRowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowId, true
}

// SetRowId sets field value
func (o *SpanQueryRowResponse) SetRowId(v string) {
	o.RowId = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *SpanQueryRowResponse) GetErrors() []SpanQueryRowError {
	if o == nil || IsNil(o.Errors) {
		var ret []SpanQueryRowError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryRowResponse) GetErrorsOk() ([]SpanQueryRowError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *SpanQueryRowResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []SpanQueryRowError and assigns it to the Errors field.
func (o *SpanQueryRowResponse) SetErrors(v []SpanQueryRowError) {
	o.Errors = v
}

// GetIsAggregation returns the IsAggregation field value
func (o *SpanQueryRowResponse) GetIsAggregation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAggregation
}

// GetIsAggregationOk returns a tuple with the IsAggregation field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRowResponse) GetIsAggregationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAggregation, true
}

// SetIsAggregation sets field value
func (o *SpanQueryRowResponse) SetIsAggregation(v bool) {
	o.IsAggregation = v
}

// GetExecutedQuery returns the ExecutedQuery field value if set, zero value otherwise.
func (o *SpanQueryRowResponse) GetExecutedQuery() string {
	if o == nil || IsNil(o.ExecutedQuery) {
		var ret string
		return ret
	}
	return *o.ExecutedQuery
}

// GetExecutedQueryOk returns a tuple with the ExecutedQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryRowResponse) GetExecutedQueryOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutedQuery) {
		return nil, false
	}
	return o.ExecutedQuery, true
}

// HasExecutedQuery returns a boolean if a field has been set.
func (o *SpanQueryRowResponse) HasExecutedQuery() bool {
	if o != nil && !IsNil(o.ExecutedQuery) {
		return true
	}

	return false
}

// SetExecutedQuery gets a reference to the given string and assigns it to the ExecutedQuery field.
func (o *SpanQueryRowResponse) SetExecutedQuery(v string) {
	o.ExecutedQuery = &v
}

func (o SpanQueryRowResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanQueryRowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowId"] = o.RowId
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	toSerialize["isAggregation"] = o.IsAggregation
	if !IsNil(o.ExecutedQuery) {
		toSerialize["executedQuery"] = o.ExecutedQuery
	}
	return toSerialize, nil
}

type NullableSpanQueryRowResponse struct {
	value *SpanQueryRowResponse
	isSet bool
}

func (v NullableSpanQueryRowResponse) Get() *SpanQueryRowResponse {
	return v.value
}

func (v *NullableSpanQueryRowResponse) Set(val *SpanQueryRowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanQueryRowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanQueryRowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanQueryRowResponse(val *SpanQueryRowResponse) *NullableSpanQueryRowResponse {
	return &NullableSpanQueryRowResponse{value: val, isSet: true}
}

func (v NullableSpanQueryRowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanQueryRowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


