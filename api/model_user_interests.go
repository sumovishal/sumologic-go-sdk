/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserInterests type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInterests{}

// UserInterests struct for UserInterests
type UserInterests struct {
	// Labels of user interests.
	Interests []string `json:"interests"`
}

type _UserInterests UserInterests

// NewUserInterests instantiates a new UserInterests object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInterests(interests []string) *UserInterests {
	this := UserInterests{}
	this.Interests = interests
	return &this
}

// NewUserInterestsWithDefaults instantiates a new UserInterests object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInterestsWithDefaults() *UserInterests {
	this := UserInterests{}
	return &this
}

// GetInterests returns the Interests field value
func (o *UserInterests) GetInterests() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Interests
}

// GetInterestsOk returns a tuple with the Interests field value
// and a boolean to check if the value has been set.
func (o *UserInterests) GetInterestsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interests, true
}

// SetInterests sets field value
func (o *UserInterests) SetInterests(v []string) {
	o.Interests = v
}

func (o UserInterests) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInterests) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["interests"] = o.Interests
	return toSerialize, nil
}

func (o *UserInterests) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interests",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserInterests := _UserInterests{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserInterests)

	if err != nil {
		return err
	}

	*o = UserInterests(varUserInterests)

	return err
}

type NullableUserInterests struct {
	value *UserInterests
	isSet bool
}

func (v NullableUserInterests) Get() *UserInterests {
	return v.value
}

func (v *NullableUserInterests) Set(val *UserInterests) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInterests) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInterests) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInterests(val *UserInterests) *NullableUserInterests {
	return &NullableUserInterests{value: val, isSet: true}
}

func (v NullableUserInterests) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInterests) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


