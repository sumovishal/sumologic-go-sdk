/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the UpdateServiceAccountDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateServiceAccountDefinition{}

// UpdateServiceAccountDefinition struct for UpdateServiceAccountDefinition
type UpdateServiceAccountDefinition struct {
	// Name of the service account.
	Name *string `json:"name,omitempty"`
	// This has the value `true` if the service account is active and `false` if it has been deactivated.
	IsActive *bool `json:"isActive,omitempty"`
	// List of role identifiers associated with the service account.
	RoleIds []string `json:"roleIds,omitempty"`
}

// NewUpdateServiceAccountDefinition instantiates a new UpdateServiceAccountDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateServiceAccountDefinition() *UpdateServiceAccountDefinition {
	this := UpdateServiceAccountDefinition{}
	return &this
}

// NewUpdateServiceAccountDefinitionWithDefaults instantiates a new UpdateServiceAccountDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateServiceAccountDefinitionWithDefaults() *UpdateServiceAccountDefinition {
	this := UpdateServiceAccountDefinition{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateServiceAccountDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServiceAccountDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateServiceAccountDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateServiceAccountDefinition) SetName(v string) {
	o.Name = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *UpdateServiceAccountDefinition) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServiceAccountDefinition) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *UpdateServiceAccountDefinition) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *UpdateServiceAccountDefinition) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetRoleIds returns the RoleIds field value if set, zero value otherwise.
func (o *UpdateServiceAccountDefinition) GetRoleIds() []string {
	if o == nil || IsNil(o.RoleIds) {
		var ret []string
		return ret
	}
	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServiceAccountDefinition) GetRoleIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RoleIds) {
		return nil, false
	}
	return o.RoleIds, true
}

// HasRoleIds returns a boolean if a field has been set.
func (o *UpdateServiceAccountDefinition) HasRoleIds() bool {
	if o != nil && !IsNil(o.RoleIds) {
		return true
	}

	return false
}

// SetRoleIds gets a reference to the given []string and assigns it to the RoleIds field.
func (o *UpdateServiceAccountDefinition) SetRoleIds(v []string) {
	o.RoleIds = v
}

func (o UpdateServiceAccountDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateServiceAccountDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.RoleIds) {
		toSerialize["roleIds"] = o.RoleIds
	}
	return toSerialize, nil
}

type NullableUpdateServiceAccountDefinition struct {
	value *UpdateServiceAccountDefinition
	isSet bool
}

func (v NullableUpdateServiceAccountDefinition) Get() *UpdateServiceAccountDefinition {
	return v.value
}

func (v *NullableUpdateServiceAccountDefinition) Set(val *UpdateServiceAccountDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateServiceAccountDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateServiceAccountDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateServiceAccountDefinition(val *UpdateServiceAccountDefinition) *NullableUpdateServiceAccountDefinition {
	return &NullableUpdateServiceAccountDefinition{value: val, isSet: true}
}

func (v NullableUpdateServiceAccountDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateServiceAccountDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


