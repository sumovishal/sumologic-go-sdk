/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BooleanArrayEventAttributeValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BooleanArrayEventAttributeValue{}

// BooleanArrayEventAttributeValue struct for BooleanArrayEventAttributeValue
type BooleanArrayEventAttributeValue struct {
	EventAttributeValue
	Values []bool `json:"values"`
}

type _BooleanArrayEventAttributeValue BooleanArrayEventAttributeValue

// NewBooleanArrayEventAttributeValue instantiates a new BooleanArrayEventAttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBooleanArrayEventAttributeValue(values []bool, type_ string) *BooleanArrayEventAttributeValue {
	this := BooleanArrayEventAttributeValue{}
	this.Type = type_
	this.Values = values
	return &this
}

// NewBooleanArrayEventAttributeValueWithDefaults instantiates a new BooleanArrayEventAttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBooleanArrayEventAttributeValueWithDefaults() *BooleanArrayEventAttributeValue {
	this := BooleanArrayEventAttributeValue{}
	return &this
}

// GetValues returns the Values field value
func (o *BooleanArrayEventAttributeValue) GetValues() []bool {
	if o == nil {
		var ret []bool
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *BooleanArrayEventAttributeValue) GetValuesOk() ([]bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *BooleanArrayEventAttributeValue) SetValues(v []bool) {
	o.Values = v
}

func (o BooleanArrayEventAttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BooleanArrayEventAttributeValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEventAttributeValue, errEventAttributeValue := json.Marshal(o.EventAttributeValue)
	if errEventAttributeValue != nil {
		return map[string]interface{}{}, errEventAttributeValue
	}
	errEventAttributeValue = json.Unmarshal([]byte(serializedEventAttributeValue), &toSerialize)
	if errEventAttributeValue != nil {
		return map[string]interface{}{}, errEventAttributeValue
	}
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

func (o *BooleanArrayEventAttributeValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"values",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBooleanArrayEventAttributeValue := _BooleanArrayEventAttributeValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBooleanArrayEventAttributeValue)

	if err != nil {
		return err
	}

	*o = BooleanArrayEventAttributeValue(varBooleanArrayEventAttributeValue)

	return err
}

type NullableBooleanArrayEventAttributeValue struct {
	value *BooleanArrayEventAttributeValue
	isSet bool
}

func (v NullableBooleanArrayEventAttributeValue) Get() *BooleanArrayEventAttributeValue {
	return v.value
}

func (v *NullableBooleanArrayEventAttributeValue) Set(val *BooleanArrayEventAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableBooleanArrayEventAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableBooleanArrayEventAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBooleanArrayEventAttributeValue(val *BooleanArrayEventAttributeValue) *NullableBooleanArrayEventAttributeValue {
	return &NullableBooleanArrayEventAttributeValue{value: val, isSet: true}
}

func (v NullableBooleanArrayEventAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBooleanArrayEventAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


