/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the LiteralTimeRangeBoundary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LiteralTimeRangeBoundary{}

// LiteralTimeRangeBoundary struct for LiteralTimeRangeBoundary
type LiteralTimeRangeBoundary struct {
	TimeRangeBoundary
	// Name of the time range. Possible values are:   - `now`,   - `second`,   - `minute`,   - `hour`,   - `day`,   - `today`,   - `week`,   - `month`,   - `year`
	RangeName string `json:"rangeName"`
}

// NewLiteralTimeRangeBoundary instantiates a new LiteralTimeRangeBoundary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiteralTimeRangeBoundary(rangeName string, type_ string) *LiteralTimeRangeBoundary {
	this := LiteralTimeRangeBoundary{}
	this.Type = type_
	this.RangeName = rangeName
	return &this
}

// NewLiteralTimeRangeBoundaryWithDefaults instantiates a new LiteralTimeRangeBoundary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiteralTimeRangeBoundaryWithDefaults() *LiteralTimeRangeBoundary {
	this := LiteralTimeRangeBoundary{}
	return &this
}

// GetRangeName returns the RangeName field value
func (o *LiteralTimeRangeBoundary) GetRangeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RangeName
}

// GetRangeNameOk returns a tuple with the RangeName field value
// and a boolean to check if the value has been set.
func (o *LiteralTimeRangeBoundary) GetRangeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RangeName, true
}

// SetRangeName sets field value
func (o *LiteralTimeRangeBoundary) SetRangeName(v string) {
	o.RangeName = v
}

func (o LiteralTimeRangeBoundary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LiteralTimeRangeBoundary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTimeRangeBoundary, errTimeRangeBoundary := json.Marshal(o.TimeRangeBoundary)
	if errTimeRangeBoundary != nil {
		return map[string]interface{}{}, errTimeRangeBoundary
	}
	errTimeRangeBoundary = json.Unmarshal([]byte(serializedTimeRangeBoundary), &toSerialize)
	if errTimeRangeBoundary != nil {
		return map[string]interface{}{}, errTimeRangeBoundary
	}
	toSerialize["rangeName"] = o.RangeName
	return toSerialize, nil
}

type NullableLiteralTimeRangeBoundary struct {
	value *LiteralTimeRangeBoundary
	isSet bool
}

func (v NullableLiteralTimeRangeBoundary) Get() *LiteralTimeRangeBoundary {
	return v.value
}

func (v *NullableLiteralTimeRangeBoundary) Set(val *LiteralTimeRangeBoundary) {
	v.value = val
	v.isSet = true
}

func (v NullableLiteralTimeRangeBoundary) IsSet() bool {
	return v.isSet
}

func (v *NullableLiteralTimeRangeBoundary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiteralTimeRangeBoundary(val *LiteralTimeRangeBoundary) *NullableLiteralTimeRangeBoundary {
	return &NullableLiteralTimeRangeBoundary{value: val, isSet: true}
}

func (v NullableLiteralTimeRangeBoundary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiteralTimeRangeBoundary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


