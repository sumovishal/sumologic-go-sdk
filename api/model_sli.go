/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// Sli struct for Sli
type Sli struct {
	// Evaluate SLI using successful/total windows, or occurrence of successful events over entire compliance period.
	EvaluationType string `json:"evaluationType"`
	// Type of Raw Data Queries for SLI (Logs/Metrics).
	QueryType string `json:"queryType"`
	// Queries for defining SLI.
	Queries []SliQueryGroup `json:"queries"`
}

// NewSli instantiates a new Sli object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSli(evaluationType string, queryType string, queries []SliQueryGroup) *Sli {
	this := Sli{}
	this.EvaluationType = evaluationType
	this.QueryType = queryType
	this.Queries = queries
	return &this
}

// NewSliWithDefaults instantiates a new Sli object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliWithDefaults() *Sli {
	this := Sli{}
	return &this
}

// GetEvaluationType returns the EvaluationType field value
func (o *Sli) GetEvaluationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EvaluationType
}

// GetEvaluationTypeOk returns a tuple with the EvaluationType field value
// and a boolean to check if the value has been set.
func (o *Sli) GetEvaluationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EvaluationType, true
}

// SetEvaluationType sets field value
func (o *Sli) SetEvaluationType(v string) {
	o.EvaluationType = v
}

// GetQueryType returns the QueryType field value
func (o *Sli) GetQueryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value
// and a boolean to check if the value has been set.
func (o *Sli) GetQueryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryType, true
}

// SetQueryType sets field value
func (o *Sli) SetQueryType(v string) {
	o.QueryType = v
}

// GetQueries returns the Queries field value
func (o *Sli) GetQueries() []SliQueryGroup {
	if o == nil {
		var ret []SliQueryGroup
		return ret
	}

	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value
// and a boolean to check if the value has been set.
func (o *Sli) GetQueriesOk() ([]SliQueryGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Queries, true
}

// SetQueries sets field value
func (o *Sli) SetQueries(v []SliQueryGroup) {
	o.Queries = v
}

func (o Sli) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["evaluationType"] = o.EvaluationType
	}
	if true {
		toSerialize["queryType"] = o.QueryType
	}
	if true {
		toSerialize["queries"] = o.Queries
	}
	return json.Marshal(toSerialize)
}

type NullableSli struct {
	value *Sli
	isSet bool
}

func (v NullableSli) Get() *Sli {
	return v.value
}

func (v *NullableSli) Set(val *Sli) {
	v.value = val
	v.isSet = true
}

func (v NullableSli) IsSet() bool {
	return v.isSet
}

func (v *NullableSli) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSli(val *Sli) *NullableSli {
	return &NullableSli{value: val, isSet: true}
}

func (v NullableSli) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSli) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


