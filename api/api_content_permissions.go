/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ContentPermissionsAPIService ContentPermissionsAPI service
type ContentPermissionsAPIService service

type ApiAddContentPermissionsRequest struct {
	ctx context.Context
	ApiService *ContentPermissionsAPIService
	id string
	contentPermissionUpdateRequest *ContentPermissionUpdateRequest
	isAdminMode *string
}

// New permissions to add to the content item with the given identifier.
func (r ApiAddContentPermissionsRequest) ContentPermissionUpdateRequest(contentPermissionUpdateRequest ContentPermissionUpdateRequest) ApiAddContentPermissionsRequest {
	r.contentPermissionUpdateRequest = &contentPermissionUpdateRequest
	return r
}

// Set this to \&quot;true\&quot; if you want to perform the request as a Content Administrator.
func (r ApiAddContentPermissionsRequest) IsAdminMode(isAdminMode string) ApiAddContentPermissionsRequest {
	r.isAdminMode = &isAdminMode
	return r
}

func (r ApiAddContentPermissionsRequest) Execute() (*ContentPermissionResult, *http.Response, error) {
	return r.ApiService.AddContentPermissionsExecute(r)
}

/*
AddContentPermissions Add permissions to a content item.

Add permissions to a content item with the given identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The identifier of the content item.
 @return ApiAddContentPermissionsRequest
*/
func (a *ContentPermissionsAPIService) AddContentPermissions(ctx context.Context, id string) ApiAddContentPermissionsRequest {
	return ApiAddContentPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContentPermissionResult
func (a *ContentPermissionsAPIService) AddContentPermissionsExecute(r ApiAddContentPermissionsRequest) (*ContentPermissionResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentPermissionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPermissionsAPIService.AddContentPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/content/{id}/permissions/add"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPermissionUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPermissionUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.isAdminMode != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "isAdminMode", r.isAdminMode, "")
	}
	// body params
	localVarPostBody = r.contentPermissionUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetContentPermissionsRequest struct {
	ctx context.Context
	ApiService *ContentPermissionsAPIService
	id string
	explicitOnly *bool
	isAdminMode *string
}

// There are two permission types: explicit and implicit. Permissions specifically assigned to the content item are explicit. Permissions derived from a parent content item, like a folder are implicit. To return only explicit permissions set this to true.
func (r ApiGetContentPermissionsRequest) ExplicitOnly(explicitOnly bool) ApiGetContentPermissionsRequest {
	r.explicitOnly = &explicitOnly
	return r
}

// Set this to \&quot;true\&quot; if you want to perform the request as a Content Administrator.
func (r ApiGetContentPermissionsRequest) IsAdminMode(isAdminMode string) ApiGetContentPermissionsRequest {
	r.isAdminMode = &isAdminMode
	return r
}

func (r ApiGetContentPermissionsRequest) Execute() (*ContentPermissionResult, *http.Response, error) {
	return r.ApiService.GetContentPermissionsExecute(r)
}

/*
GetContentPermissions Get permissions of a content item

Returns content permissions of a content item with the given identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The identifier of the content item.
 @return ApiGetContentPermissionsRequest
*/
func (a *ContentPermissionsAPIService) GetContentPermissions(ctx context.Context, id string) ApiGetContentPermissionsRequest {
	return ApiGetContentPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContentPermissionResult
func (a *ContentPermissionsAPIService) GetContentPermissionsExecute(r ApiGetContentPermissionsRequest) (*ContentPermissionResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentPermissionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPermissionsAPIService.GetContentPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/content/{id}/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.explicitOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "explicitOnly", r.explicitOnly, "")
	} else {
		var defaultValue bool = false
		r.explicitOnly = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.isAdminMode != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "isAdminMode", r.isAdminMode, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveContentPermissionsRequest struct {
	ctx context.Context
	ApiService *ContentPermissionsAPIService
	id string
	contentPermissionUpdateRequest *ContentPermissionUpdateRequest
	isAdminMode *string
}

// Permissions to remove from a content item with the given identifier.
func (r ApiRemoveContentPermissionsRequest) ContentPermissionUpdateRequest(contentPermissionUpdateRequest ContentPermissionUpdateRequest) ApiRemoveContentPermissionsRequest {
	r.contentPermissionUpdateRequest = &contentPermissionUpdateRequest
	return r
}

// Set this to \&quot;true\&quot; if you want to perform the request as a Content Administrator.
func (r ApiRemoveContentPermissionsRequest) IsAdminMode(isAdminMode string) ApiRemoveContentPermissionsRequest {
	r.isAdminMode = &isAdminMode
	return r
}

func (r ApiRemoveContentPermissionsRequest) Execute() (*ContentPermissionResult, *http.Response, error) {
	return r.ApiService.RemoveContentPermissionsExecute(r)
}

/*
RemoveContentPermissions Remove permissions from a content item.

Remove permissions from a content item with the given identifier.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The identifier of the content item.
 @return ApiRemoveContentPermissionsRequest
*/
func (a *ContentPermissionsAPIService) RemoveContentPermissions(ctx context.Context, id string) ApiRemoveContentPermissionsRequest {
	return ApiRemoveContentPermissionsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContentPermissionResult
func (a *ContentPermissionsAPIService) RemoveContentPermissionsExecute(r ApiRemoveContentPermissionsRequest) (*ContentPermissionResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentPermissionResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContentPermissionsAPIService.RemoveContentPermissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/content/{id}/permissions/remove"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentPermissionUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("contentPermissionUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.isAdminMode != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "isAdminMode", r.isAdminMode, "")
	}
	// body params
	localVarPostBody = r.contentPermissionUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
