/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// PermissionStatementDefinitionAllOf struct for PermissionStatementDefinitionAllOf
type PermissionStatementDefinitionAllOf struct {
	// Type of subject for the permission. Valid values are: `role` or `org`.
	SubjectType string `json:"subjectType"`
	// The identifier that belongs to the subject type chosen above. For e.g. if the subjectType is set to `role`, subjectId should be the identifier of a role.  Similarly, if the subjectType is `org`, the subjectId should be the identifier of the same org,  which owns the resource target.
	SubjectId string `json:"subjectId"`
	// The identifier that belongs to the resource this permission assignment applies to.
	TargetId string `json:"targetId"`
}

// NewPermissionStatementDefinitionAllOf instantiates a new PermissionStatementDefinitionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionStatementDefinitionAllOf(subjectType string, subjectId string, targetId string) *PermissionStatementDefinitionAllOf {
	this := PermissionStatementDefinitionAllOf{}
	this.SubjectType = subjectType
	this.SubjectId = subjectId
	this.TargetId = targetId
	return &this
}

// NewPermissionStatementDefinitionAllOfWithDefaults instantiates a new PermissionStatementDefinitionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionStatementDefinitionAllOfWithDefaults() *PermissionStatementDefinitionAllOf {
	this := PermissionStatementDefinitionAllOf{}
	return &this
}

// GetSubjectType returns the SubjectType field value
func (o *PermissionStatementDefinitionAllOf) GetSubjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value
// and a boolean to check if the value has been set.
func (o *PermissionStatementDefinitionAllOf) GetSubjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectType, true
}

// SetSubjectType sets field value
func (o *PermissionStatementDefinitionAllOf) SetSubjectType(v string) {
	o.SubjectType = v
}

// GetSubjectId returns the SubjectId field value
func (o *PermissionStatementDefinitionAllOf) GetSubjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value
// and a boolean to check if the value has been set.
func (o *PermissionStatementDefinitionAllOf) GetSubjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectId, true
}

// SetSubjectId sets field value
func (o *PermissionStatementDefinitionAllOf) SetSubjectId(v string) {
	o.SubjectId = v
}

// GetTargetId returns the TargetId field value
func (o *PermissionStatementDefinitionAllOf) GetTargetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *PermissionStatementDefinitionAllOf) GetTargetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *PermissionStatementDefinitionAllOf) SetTargetId(v string) {
	o.TargetId = v
}

func (o PermissionStatementDefinitionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subjectType"] = o.SubjectType
	}
	if true {
		toSerialize["subjectId"] = o.SubjectId
	}
	if true {
		toSerialize["targetId"] = o.TargetId
	}
	return json.Marshal(toSerialize)
}

type NullablePermissionStatementDefinitionAllOf struct {
	value *PermissionStatementDefinitionAllOf
	isSet bool
}

func (v NullablePermissionStatementDefinitionAllOf) Get() *PermissionStatementDefinitionAllOf {
	return v.value
}

func (v *NullablePermissionStatementDefinitionAllOf) Set(val *PermissionStatementDefinitionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionStatementDefinitionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionStatementDefinitionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionStatementDefinitionAllOf(val *PermissionStatementDefinitionAllOf) *NullablePermissionStatementDefinitionAllOf {
	return &NullablePermissionStatementDefinitionAllOf{value: val, isSet: true}
}

func (v NullablePermissionStatementDefinitionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionStatementDefinitionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


