/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetadataVariableSourceDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataVariableSourceDefinition{}

// MetadataVariableSourceDefinition struct for MetadataVariableSourceDefinition
type MetadataVariableSourceDefinition struct {
	VariableSourceDefinition
	// A metrics query to filter the metadata catalog.
	Filter string `json:"filter"`
	// Return the values for this given key.
	Key string `json:"key"`
}

type _MetadataVariableSourceDefinition MetadataVariableSourceDefinition

// NewMetadataVariableSourceDefinition instantiates a new MetadataVariableSourceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataVariableSourceDefinition(filter string, key string, variableSourceType string) *MetadataVariableSourceDefinition {
	this := MetadataVariableSourceDefinition{}
	this.VariableSourceType = variableSourceType
	this.Filter = filter
	this.Key = key
	return &this
}

// NewMetadataVariableSourceDefinitionWithDefaults instantiates a new MetadataVariableSourceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataVariableSourceDefinitionWithDefaults() *MetadataVariableSourceDefinition {
	this := MetadataVariableSourceDefinition{}
	return &this
}

// GetFilter returns the Filter field value
func (o *MetadataVariableSourceDefinition) GetFilter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *MetadataVariableSourceDefinition) GetFilterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *MetadataVariableSourceDefinition) SetFilter(v string) {
	o.Filter = v
}

// GetKey returns the Key field value
func (o *MetadataVariableSourceDefinition) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *MetadataVariableSourceDefinition) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *MetadataVariableSourceDefinition) SetKey(v string) {
	o.Key = v
}

func (o MetadataVariableSourceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataVariableSourceDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedVariableSourceDefinition, errVariableSourceDefinition := json.Marshal(o.VariableSourceDefinition)
	if errVariableSourceDefinition != nil {
		return map[string]interface{}{}, errVariableSourceDefinition
	}
	errVariableSourceDefinition = json.Unmarshal([]byte(serializedVariableSourceDefinition), &toSerialize)
	if errVariableSourceDefinition != nil {
		return map[string]interface{}{}, errVariableSourceDefinition
	}
	toSerialize["filter"] = o.Filter
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

func (o *MetadataVariableSourceDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filter",
		"key",
		"variableSourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetadataVariableSourceDefinition := _MetadataVariableSourceDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetadataVariableSourceDefinition)

	if err != nil {
		return err
	}

	*o = MetadataVariableSourceDefinition(varMetadataVariableSourceDefinition)

	return err
}

type NullableMetadataVariableSourceDefinition struct {
	value *MetadataVariableSourceDefinition
	isSet bool
}

func (v NullableMetadataVariableSourceDefinition) Get() *MetadataVariableSourceDefinition {
	return v.value
}

func (v *NullableMetadataVariableSourceDefinition) Set(val *MetadataVariableSourceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataVariableSourceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataVariableSourceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataVariableSourceDefinition(val *MetadataVariableSourceDefinition) *NullableMetadataVariableSourceDefinition {
	return &NullableMetadataVariableSourceDefinition{value: val, isSet: true}
}

func (v NullableMetadataVariableSourceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataVariableSourceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


