/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the ExtraDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtraDetails{}

// ExtraDetails struct for ExtraDetails
type ExtraDetails struct {
	// Additional data from Sumo Logic related to the Alert.
	Details []KeyValuePair `json:"details,omitempty"`
}

// NewExtraDetails instantiates a new ExtraDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtraDetails() *ExtraDetails {
	this := ExtraDetails{}
	return &this
}

// NewExtraDetailsWithDefaults instantiates a new ExtraDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtraDetailsWithDefaults() *ExtraDetails {
	this := ExtraDetails{}
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ExtraDetails) GetDetails() []KeyValuePair {
	if o == nil || IsNil(o.Details) {
		var ret []KeyValuePair
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtraDetails) GetDetailsOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ExtraDetails) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []KeyValuePair and assigns it to the Details field.
func (o *ExtraDetails) SetDetails(v []KeyValuePair) {
	o.Details = v
}

func (o ExtraDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtraDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

type NullableExtraDetails struct {
	value *ExtraDetails
	isSet bool
}

func (v NullableExtraDetails) Get() *ExtraDetails {
	return v.value
}

func (v *NullableExtraDetails) Set(val *ExtraDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableExtraDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableExtraDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtraDetails(val *ExtraDetails) *NullableExtraDetails {
	return &NullableExtraDetails{value: val, isSet: true}
}

func (v NullableExtraDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtraDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


