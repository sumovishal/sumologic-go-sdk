/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DashboardReportModeTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardReportModeTemplate{}

// DashboardReportModeTemplate struct for DashboardReportModeTemplate
type DashboardReportModeTemplate struct {
	DashboardTemplate
}

type _DashboardReportModeTemplate DashboardReportModeTemplate

// NewDashboardReportModeTemplate instantiates a new DashboardReportModeTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardReportModeTemplate(templateType string, id string) *DashboardReportModeTemplate {
	this := DashboardReportModeTemplate{}
	this.TemplateType = templateType
	this.Id = id
	return &this
}

// NewDashboardReportModeTemplateWithDefaults instantiates a new DashboardReportModeTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardReportModeTemplateWithDefaults() *DashboardReportModeTemplate {
	this := DashboardReportModeTemplate{}
	return &this
}

func (o DashboardReportModeTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardReportModeTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedDashboardTemplate, errDashboardTemplate := json.Marshal(o.DashboardTemplate)
	if errDashboardTemplate != nil {
		return map[string]interface{}{}, errDashboardTemplate
	}
	errDashboardTemplate = json.Unmarshal([]byte(serializedDashboardTemplate), &toSerialize)
	if errDashboardTemplate != nil {
		return map[string]interface{}{}, errDashboardTemplate
	}
	return toSerialize, nil
}

func (o *DashboardReportModeTemplate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"templateType",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDashboardReportModeTemplate := _DashboardReportModeTemplate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDashboardReportModeTemplate)

	if err != nil {
		return err
	}

	*o = DashboardReportModeTemplate(varDashboardReportModeTemplate)

	return err
}

type NullableDashboardReportModeTemplate struct {
	value *DashboardReportModeTemplate
	isSet bool
}

func (v NullableDashboardReportModeTemplate) Get() *DashboardReportModeTemplate {
	return v.value
}

func (v *NullableDashboardReportModeTemplate) Set(val *DashboardReportModeTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardReportModeTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardReportModeTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardReportModeTemplate(val *DashboardReportModeTemplate) *NullableDashboardReportModeTemplate {
	return &NullableDashboardReportModeTemplate{value: val, isSet: true}
}

func (v NullableDashboardReportModeTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardReportModeTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


