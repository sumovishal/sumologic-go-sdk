/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SumoOrgsUsageBackfillRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SumoOrgsUsageBackfillRequest{}

// SumoOrgsUsageBackfillRequest struct for SumoOrgsUsageBackfillRequest
type SumoOrgsUsageBackfillRequest struct {
	// the customer ID of a mam org
	CustomerId int64 `json:"customerId"`
	// epoch millis of date from which usage is to be copied
	From int64 `json:"from"`
	// epoch millis of date upto which usage is to be copied
	To int64 `json:"to"`
}

// NewSumoOrgsUsageBackfillRequest instantiates a new SumoOrgsUsageBackfillRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSumoOrgsUsageBackfillRequest(customerId int64, from int64, to int64) *SumoOrgsUsageBackfillRequest {
	this := SumoOrgsUsageBackfillRequest{}
	this.CustomerId = customerId
	this.From = from
	this.To = to
	return &this
}

// NewSumoOrgsUsageBackfillRequestWithDefaults instantiates a new SumoOrgsUsageBackfillRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSumoOrgsUsageBackfillRequestWithDefaults() *SumoOrgsUsageBackfillRequest {
	this := SumoOrgsUsageBackfillRequest{}
	return &this
}

// GetCustomerId returns the CustomerId field value
func (o *SumoOrgsUsageBackfillRequest) GetCustomerId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *SumoOrgsUsageBackfillRequest) GetCustomerIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *SumoOrgsUsageBackfillRequest) SetCustomerId(v int64) {
	o.CustomerId = v
}

// GetFrom returns the From field value
func (o *SumoOrgsUsageBackfillRequest) GetFrom() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *SumoOrgsUsageBackfillRequest) GetFromOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *SumoOrgsUsageBackfillRequest) SetFrom(v int64) {
	o.From = v
}

// GetTo returns the To field value
func (o *SumoOrgsUsageBackfillRequest) GetTo() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *SumoOrgsUsageBackfillRequest) GetToOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *SumoOrgsUsageBackfillRequest) SetTo(v int64) {
	o.To = v
}

func (o SumoOrgsUsageBackfillRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SumoOrgsUsageBackfillRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customerId"] = o.CustomerId
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	return toSerialize, nil
}

type NullableSumoOrgsUsageBackfillRequest struct {
	value *SumoOrgsUsageBackfillRequest
	isSet bool
}

func (v NullableSumoOrgsUsageBackfillRequest) Get() *SumoOrgsUsageBackfillRequest {
	return v.value
}

func (v *NullableSumoOrgsUsageBackfillRequest) Set(val *SumoOrgsUsageBackfillRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSumoOrgsUsageBackfillRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSumoOrgsUsageBackfillRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSumoOrgsUsageBackfillRequest(val *SumoOrgsUsageBackfillRequest) *NullableSumoOrgsUsageBackfillRequest {
	return &NullableSumoOrgsUsageBackfillRequest{value: val, isSet: true}
}

func (v NullableSumoOrgsUsageBackfillRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSumoOrgsUsageBackfillRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


