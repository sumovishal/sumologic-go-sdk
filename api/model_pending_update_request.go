/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PendingUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PendingUpdateRequest{}

// PendingUpdateRequest The pending plan update request for the account
type PendingUpdateRequest struct {
	// The date on which the update request was created.
	CreatedOn string `json:"createdOn"`
	Plan CurrentPlan `json:"plan"`
}

type _PendingUpdateRequest PendingUpdateRequest

// NewPendingUpdateRequest instantiates a new PendingUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPendingUpdateRequest(createdOn string, plan CurrentPlan) *PendingUpdateRequest {
	this := PendingUpdateRequest{}
	this.CreatedOn = createdOn
	this.Plan = plan
	return &this
}

// NewPendingUpdateRequestWithDefaults instantiates a new PendingUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPendingUpdateRequestWithDefaults() *PendingUpdateRequest {
	this := PendingUpdateRequest{}
	return &this
}

// GetCreatedOn returns the CreatedOn field value
func (o *PendingUpdateRequest) GetCreatedOn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value
// and a boolean to check if the value has been set.
func (o *PendingUpdateRequest) GetCreatedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedOn, true
}

// SetCreatedOn sets field value
func (o *PendingUpdateRequest) SetCreatedOn(v string) {
	o.CreatedOn = v
}

// GetPlan returns the Plan field value
func (o *PendingUpdateRequest) GetPlan() CurrentPlan {
	if o == nil {
		var ret CurrentPlan
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *PendingUpdateRequest) GetPlanOk() (*CurrentPlan, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *PendingUpdateRequest) SetPlan(v CurrentPlan) {
	o.Plan = v
}

func (o PendingUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PendingUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdOn"] = o.CreatedOn
	toSerialize["plan"] = o.Plan
	return toSerialize, nil
}

func (o *PendingUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdOn",
		"plan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPendingUpdateRequest := _PendingUpdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPendingUpdateRequest)

	if err != nil {
		return err
	}

	*o = PendingUpdateRequest(varPendingUpdateRequest)

	return err
}

type NullablePendingUpdateRequest struct {
	value *PendingUpdateRequest
	isSet bool
}

func (v NullablePendingUpdateRequest) Get() *PendingUpdateRequest {
	return v.value
}

func (v *NullablePendingUpdateRequest) Set(val *PendingUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePendingUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePendingUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePendingUpdateRequest(val *PendingUpdateRequest) *NullablePendingUpdateRequest {
	return &NullablePendingUpdateRequest{value: val, isSet: true}
}

func (v NullablePendingUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePendingUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


