/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SlosLibraryBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlosLibraryBase{}

// SlosLibraryBase struct for SlosLibraryBase
type SlosLibraryBase struct {
	// Name of the slo or folder.
	Name string `json:"name"`
	// Description of the slo or folder.
	Description *string `json:"description,omitempty"`
	// Type of the object model. Valid values:   1) SlosLibrarySlo   2) SlosLibraryFolder
	Type string `json:"type"`
}

type _SlosLibraryBase SlosLibraryBase

// NewSlosLibraryBase instantiates a new SlosLibraryBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlosLibraryBase(name string, type_ string) *SlosLibraryBase {
	this := SlosLibraryBase{}
	this.Name = name
	var description string = ""
	this.Description = &description
	this.Type = type_
	return &this
}

// NewSlosLibraryBaseWithDefaults instantiates a new SlosLibraryBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlosLibraryBaseWithDefaults() *SlosLibraryBase {
	this := SlosLibraryBase{}
	var description string = ""
	this.Description = &description
	return &this
}

// GetName returns the Name field value
func (o *SlosLibraryBase) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SlosLibraryBase) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SlosLibraryBase) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SlosLibraryBase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SlosLibraryBase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SlosLibraryBase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SlosLibraryBase) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *SlosLibraryBase) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SlosLibraryBase) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SlosLibraryBase) SetType(v string) {
	o.Type = v
}

func (o SlosLibraryBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlosLibraryBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *SlosLibraryBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSlosLibraryBase := _SlosLibraryBase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSlosLibraryBase)

	if err != nil {
		return err
	}

	*o = SlosLibraryBase(varSlosLibraryBase)

	return err
}

type NullableSlosLibraryBase struct {
	value *SlosLibraryBase
	isSet bool
}

func (v NullableSlosLibraryBase) Get() *SlosLibraryBase {
	return v.value
}

func (v *NullableSlosLibraryBase) Set(val *SlosLibraryBase) {
	v.value = val
	v.isSet = true
}

func (v NullableSlosLibraryBase) IsSet() bool {
	return v.isSet
}

func (v *NullableSlosLibraryBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlosLibraryBase(val *SlosLibraryBase) *NullableSlosLibraryBase {
	return &NullableSlosLibraryBase{value: val, isSet: true}
}

func (v NullableSlosLibraryBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlosLibraryBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


