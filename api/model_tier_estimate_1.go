/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the TierEstimate1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TierEstimate1{}

// TierEstimate1 estimate for a tier
type TierEstimate1 struct {
	// Name of the data tier
	Tier *string `json:"tier,omitempty"`
	// estimate data scanned per day in bytes
	PerDayInBytes *int64 `json:"perDayInBytes,omitempty"`
	// estimate data scanned per year in bytes
	PerYearInBytes *int64 `json:"perYearInBytes,omitempty"`
}

// NewTierEstimate1 instantiates a new TierEstimate1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTierEstimate1() *TierEstimate1 {
	this := TierEstimate1{}
	return &this
}

// NewTierEstimate1WithDefaults instantiates a new TierEstimate1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTierEstimate1WithDefaults() *TierEstimate1 {
	this := TierEstimate1{}
	return &this
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *TierEstimate1) GetTier() string {
	if o == nil || IsNil(o.Tier) {
		var ret string
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierEstimate1) GetTierOk() (*string, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *TierEstimate1) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given string and assigns it to the Tier field.
func (o *TierEstimate1) SetTier(v string) {
	o.Tier = &v
}

// GetPerDayInBytes returns the PerDayInBytes field value if set, zero value otherwise.
func (o *TierEstimate1) GetPerDayInBytes() int64 {
	if o == nil || IsNil(o.PerDayInBytes) {
		var ret int64
		return ret
	}
	return *o.PerDayInBytes
}

// GetPerDayInBytesOk returns a tuple with the PerDayInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierEstimate1) GetPerDayInBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.PerDayInBytes) {
		return nil, false
	}
	return o.PerDayInBytes, true
}

// HasPerDayInBytes returns a boolean if a field has been set.
func (o *TierEstimate1) HasPerDayInBytes() bool {
	if o != nil && !IsNil(o.PerDayInBytes) {
		return true
	}

	return false
}

// SetPerDayInBytes gets a reference to the given int64 and assigns it to the PerDayInBytes field.
func (o *TierEstimate1) SetPerDayInBytes(v int64) {
	o.PerDayInBytes = &v
}

// GetPerYearInBytes returns the PerYearInBytes field value if set, zero value otherwise.
func (o *TierEstimate1) GetPerYearInBytes() int64 {
	if o == nil || IsNil(o.PerYearInBytes) {
		var ret int64
		return ret
	}
	return *o.PerYearInBytes
}

// GetPerYearInBytesOk returns a tuple with the PerYearInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TierEstimate1) GetPerYearInBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.PerYearInBytes) {
		return nil, false
	}
	return o.PerYearInBytes, true
}

// HasPerYearInBytes returns a boolean if a field has been set.
func (o *TierEstimate1) HasPerYearInBytes() bool {
	if o != nil && !IsNil(o.PerYearInBytes) {
		return true
	}

	return false
}

// SetPerYearInBytes gets a reference to the given int64 and assigns it to the PerYearInBytes field.
func (o *TierEstimate1) SetPerYearInBytes(v int64) {
	o.PerYearInBytes = &v
}

func (o TierEstimate1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TierEstimate1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	if !IsNil(o.PerDayInBytes) {
		toSerialize["perDayInBytes"] = o.PerDayInBytes
	}
	if !IsNil(o.PerYearInBytes) {
		toSerialize["perYearInBytes"] = o.PerYearInBytes
	}
	return toSerialize, nil
}

type NullableTierEstimate1 struct {
	value *TierEstimate1
	isSet bool
}

func (v NullableTierEstimate1) Get() *TierEstimate1 {
	return v.value
}

func (v *NullableTierEstimate1) Set(val *TierEstimate1) {
	v.value = val
	v.isSet = true
}

func (v NullableTierEstimate1) IsSet() bool {
	return v.isSet
}

func (v *NullableTierEstimate1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTierEstimate1(val *TierEstimate1) *NullableTierEstimate1 {
	return &NullableTierEstimate1{value: val, isSet: true}
}

func (v NullableTierEstimate1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTierEstimate1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


