/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CurrentPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrentPlan{}

// CurrentPlan Current plan of the account.
type CurrentPlan struct {
	// Unique identifier of the product in current plan. Valid values are: 1. `Free` 2. `Trial` 3. `Essentials` 4. `EnterpriseOps` 5. `EnterpriseSec` 6. `EnterpriseSuite` 
	ProductId string `json:"productId" validate:"regexp=^(Essentials|Trial|Free|EnterpriseOps|EnterpriseSec|EnterpriseSuite)$"`
	// Cost incurred for the current plan.
	PlanCost float64 `json:"planCost"`
	// Billing frequency for the current plan. Valid values are: 1. `Monthly` 2. `Annually` 
	BillingFrequency string `json:"billingFrequency" validate:"regexp=^(Monthly|Annually)$"`
	// Consumables in the current plan.
	Consumables []Consumable `json:"consumables,omitempty"`
	// Whether the account is `Free`/`Trial`/`Paid`
	PlanType *string `json:"planType,omitempty" validate:"regexp=^(Free|Trial|Paid)$"`
	// The plan name for the product being used.
	PlanName *string `json:"planName,omitempty"`
	// The discount offered for the given contract period.
	DiscountAmount *int32 `json:"discountAmount,omitempty"`
	ContractPeriod *ContractPeriod `json:"contractPeriod,omitempty"`
	CurrentBillingPeriod *CurrentBillingPeriod `json:"currentBillingPeriod,omitempty"`
	// Numerical value of the amount of credits
	Credits *int64 `json:"credits,omitempty"`
	Baselines *Baselines `json:"baselines,omitempty"`
	// True if there is a pending update request
	PendingUpdateRequest *bool `json:"pendingUpdateRequest,omitempty"`
	ProrationDetails *ProrationDetails `json:"prorationDetails,omitempty"`
}

type _CurrentPlan CurrentPlan

// NewCurrentPlan instantiates a new CurrentPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentPlan(productId string, planCost float64, billingFrequency string) *CurrentPlan {
	this := CurrentPlan{}
	this.ProductId = productId
	this.PlanCost = planCost
	this.BillingFrequency = billingFrequency
	return &this
}

// NewCurrentPlanWithDefaults instantiates a new CurrentPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentPlanWithDefaults() *CurrentPlan {
	this := CurrentPlan{}
	return &this
}

// GetProductId returns the ProductId field value
func (o *CurrentPlan) GetProductId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *CurrentPlan) SetProductId(v string) {
	o.ProductId = v
}

// GetPlanCost returns the PlanCost field value
func (o *CurrentPlan) GetPlanCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.PlanCost
}

// GetPlanCostOk returns a tuple with the PlanCost field value
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetPlanCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanCost, true
}

// SetPlanCost sets field value
func (o *CurrentPlan) SetPlanCost(v float64) {
	o.PlanCost = v
}

// GetBillingFrequency returns the BillingFrequency field value
func (o *CurrentPlan) GetBillingFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetBillingFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingFrequency, true
}

// SetBillingFrequency sets field value
func (o *CurrentPlan) SetBillingFrequency(v string) {
	o.BillingFrequency = v
}

// GetConsumables returns the Consumables field value if set, zero value otherwise.
func (o *CurrentPlan) GetConsumables() []Consumable {
	if o == nil || IsNil(o.Consumables) {
		var ret []Consumable
		return ret
	}
	return o.Consumables
}

// GetConsumablesOk returns a tuple with the Consumables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetConsumablesOk() ([]Consumable, bool) {
	if o == nil || IsNil(o.Consumables) {
		return nil, false
	}
	return o.Consumables, true
}

// HasConsumables returns a boolean if a field has been set.
func (o *CurrentPlan) HasConsumables() bool {
	if o != nil && !IsNil(o.Consumables) {
		return true
	}

	return false
}

// SetConsumables gets a reference to the given []Consumable and assigns it to the Consumables field.
func (o *CurrentPlan) SetConsumables(v []Consumable) {
	o.Consumables = v
}

// GetPlanType returns the PlanType field value if set, zero value otherwise.
func (o *CurrentPlan) GetPlanType() string {
	if o == nil || IsNil(o.PlanType) {
		var ret string
		return ret
	}
	return *o.PlanType
}

// GetPlanTypeOk returns a tuple with the PlanType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetPlanTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PlanType) {
		return nil, false
	}
	return o.PlanType, true
}

// HasPlanType returns a boolean if a field has been set.
func (o *CurrentPlan) HasPlanType() bool {
	if o != nil && !IsNil(o.PlanType) {
		return true
	}

	return false
}

// SetPlanType gets a reference to the given string and assigns it to the PlanType field.
func (o *CurrentPlan) SetPlanType(v string) {
	o.PlanType = &v
}

// GetPlanName returns the PlanName field value if set, zero value otherwise.
func (o *CurrentPlan) GetPlanName() string {
	if o == nil || IsNil(o.PlanName) {
		var ret string
		return ret
	}
	return *o.PlanName
}

// GetPlanNameOk returns a tuple with the PlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetPlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.PlanName) {
		return nil, false
	}
	return o.PlanName, true
}

// HasPlanName returns a boolean if a field has been set.
func (o *CurrentPlan) HasPlanName() bool {
	if o != nil && !IsNil(o.PlanName) {
		return true
	}

	return false
}

// SetPlanName gets a reference to the given string and assigns it to the PlanName field.
func (o *CurrentPlan) SetPlanName(v string) {
	o.PlanName = &v
}

// GetDiscountAmount returns the DiscountAmount field value if set, zero value otherwise.
func (o *CurrentPlan) GetDiscountAmount() int32 {
	if o == nil || IsNil(o.DiscountAmount) {
		var ret int32
		return ret
	}
	return *o.DiscountAmount
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetDiscountAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.DiscountAmount) {
		return nil, false
	}
	return o.DiscountAmount, true
}

// HasDiscountAmount returns a boolean if a field has been set.
func (o *CurrentPlan) HasDiscountAmount() bool {
	if o != nil && !IsNil(o.DiscountAmount) {
		return true
	}

	return false
}

// SetDiscountAmount gets a reference to the given int32 and assigns it to the DiscountAmount field.
func (o *CurrentPlan) SetDiscountAmount(v int32) {
	o.DiscountAmount = &v
}

// GetContractPeriod returns the ContractPeriod field value if set, zero value otherwise.
func (o *CurrentPlan) GetContractPeriod() ContractPeriod {
	if o == nil || IsNil(o.ContractPeriod) {
		var ret ContractPeriod
		return ret
	}
	return *o.ContractPeriod
}

// GetContractPeriodOk returns a tuple with the ContractPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetContractPeriodOk() (*ContractPeriod, bool) {
	if o == nil || IsNil(o.ContractPeriod) {
		return nil, false
	}
	return o.ContractPeriod, true
}

// HasContractPeriod returns a boolean if a field has been set.
func (o *CurrentPlan) HasContractPeriod() bool {
	if o != nil && !IsNil(o.ContractPeriod) {
		return true
	}

	return false
}

// SetContractPeriod gets a reference to the given ContractPeriod and assigns it to the ContractPeriod field.
func (o *CurrentPlan) SetContractPeriod(v ContractPeriod) {
	o.ContractPeriod = &v
}

// GetCurrentBillingPeriod returns the CurrentBillingPeriod field value if set, zero value otherwise.
func (o *CurrentPlan) GetCurrentBillingPeriod() CurrentBillingPeriod {
	if o == nil || IsNil(o.CurrentBillingPeriod) {
		var ret CurrentBillingPeriod
		return ret
	}
	return *o.CurrentBillingPeriod
}

// GetCurrentBillingPeriodOk returns a tuple with the CurrentBillingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetCurrentBillingPeriodOk() (*CurrentBillingPeriod, bool) {
	if o == nil || IsNil(o.CurrentBillingPeriod) {
		return nil, false
	}
	return o.CurrentBillingPeriod, true
}

// HasCurrentBillingPeriod returns a boolean if a field has been set.
func (o *CurrentPlan) HasCurrentBillingPeriod() bool {
	if o != nil && !IsNil(o.CurrentBillingPeriod) {
		return true
	}

	return false
}

// SetCurrentBillingPeriod gets a reference to the given CurrentBillingPeriod and assigns it to the CurrentBillingPeriod field.
func (o *CurrentPlan) SetCurrentBillingPeriod(v CurrentBillingPeriod) {
	o.CurrentBillingPeriod = &v
}

// GetCredits returns the Credits field value if set, zero value otherwise.
func (o *CurrentPlan) GetCredits() int64 {
	if o == nil || IsNil(o.Credits) {
		var ret int64
		return ret
	}
	return *o.Credits
}

// GetCreditsOk returns a tuple with the Credits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetCreditsOk() (*int64, bool) {
	if o == nil || IsNil(o.Credits) {
		return nil, false
	}
	return o.Credits, true
}

// HasCredits returns a boolean if a field has been set.
func (o *CurrentPlan) HasCredits() bool {
	if o != nil && !IsNil(o.Credits) {
		return true
	}

	return false
}

// SetCredits gets a reference to the given int64 and assigns it to the Credits field.
func (o *CurrentPlan) SetCredits(v int64) {
	o.Credits = &v
}

// GetBaselines returns the Baselines field value if set, zero value otherwise.
func (o *CurrentPlan) GetBaselines() Baselines {
	if o == nil || IsNil(o.Baselines) {
		var ret Baselines
		return ret
	}
	return *o.Baselines
}

// GetBaselinesOk returns a tuple with the Baselines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetBaselinesOk() (*Baselines, bool) {
	if o == nil || IsNil(o.Baselines) {
		return nil, false
	}
	return o.Baselines, true
}

// HasBaselines returns a boolean if a field has been set.
func (o *CurrentPlan) HasBaselines() bool {
	if o != nil && !IsNil(o.Baselines) {
		return true
	}

	return false
}

// SetBaselines gets a reference to the given Baselines and assigns it to the Baselines field.
func (o *CurrentPlan) SetBaselines(v Baselines) {
	o.Baselines = &v
}

// GetPendingUpdateRequest returns the PendingUpdateRequest field value if set, zero value otherwise.
func (o *CurrentPlan) GetPendingUpdateRequest() bool {
	if o == nil || IsNil(o.PendingUpdateRequest) {
		var ret bool
		return ret
	}
	return *o.PendingUpdateRequest
}

// GetPendingUpdateRequestOk returns a tuple with the PendingUpdateRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetPendingUpdateRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.PendingUpdateRequest) {
		return nil, false
	}
	return o.PendingUpdateRequest, true
}

// HasPendingUpdateRequest returns a boolean if a field has been set.
func (o *CurrentPlan) HasPendingUpdateRequest() bool {
	if o != nil && !IsNil(o.PendingUpdateRequest) {
		return true
	}

	return false
}

// SetPendingUpdateRequest gets a reference to the given bool and assigns it to the PendingUpdateRequest field.
func (o *CurrentPlan) SetPendingUpdateRequest(v bool) {
	o.PendingUpdateRequest = &v
}

// GetProrationDetails returns the ProrationDetails field value if set, zero value otherwise.
func (o *CurrentPlan) GetProrationDetails() ProrationDetails {
	if o == nil || IsNil(o.ProrationDetails) {
		var ret ProrationDetails
		return ret
	}
	return *o.ProrationDetails
}

// GetProrationDetailsOk returns a tuple with the ProrationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentPlan) GetProrationDetailsOk() (*ProrationDetails, bool) {
	if o == nil || IsNil(o.ProrationDetails) {
		return nil, false
	}
	return o.ProrationDetails, true
}

// HasProrationDetails returns a boolean if a field has been set.
func (o *CurrentPlan) HasProrationDetails() bool {
	if o != nil && !IsNil(o.ProrationDetails) {
		return true
	}

	return false
}

// SetProrationDetails gets a reference to the given ProrationDetails and assigns it to the ProrationDetails field.
func (o *CurrentPlan) SetProrationDetails(v ProrationDetails) {
	o.ProrationDetails = &v
}

func (o CurrentPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrentPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["productId"] = o.ProductId
	toSerialize["planCost"] = o.PlanCost
	toSerialize["billingFrequency"] = o.BillingFrequency
	if !IsNil(o.Consumables) {
		toSerialize["consumables"] = o.Consumables
	}
	if !IsNil(o.PlanType) {
		toSerialize["planType"] = o.PlanType
	}
	if !IsNil(o.PlanName) {
		toSerialize["planName"] = o.PlanName
	}
	if !IsNil(o.DiscountAmount) {
		toSerialize["discountAmount"] = o.DiscountAmount
	}
	if !IsNil(o.ContractPeriod) {
		toSerialize["contractPeriod"] = o.ContractPeriod
	}
	if !IsNil(o.CurrentBillingPeriod) {
		toSerialize["currentBillingPeriod"] = o.CurrentBillingPeriod
	}
	if !IsNil(o.Credits) {
		toSerialize["credits"] = o.Credits
	}
	if !IsNil(o.Baselines) {
		toSerialize["baselines"] = o.Baselines
	}
	if !IsNil(o.PendingUpdateRequest) {
		toSerialize["pendingUpdateRequest"] = o.PendingUpdateRequest
	}
	if !IsNil(o.ProrationDetails) {
		toSerialize["prorationDetails"] = o.ProrationDetails
	}
	return toSerialize, nil
}

func (o *CurrentPlan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productId",
		"planCost",
		"billingFrequency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCurrentPlan := _CurrentPlan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCurrentPlan)

	if err != nil {
		return err
	}

	*o = CurrentPlan(varCurrentPlan)

	return err
}

type NullableCurrentPlan struct {
	value *CurrentPlan
	isSet bool
}

func (v NullableCurrentPlan) Get() *CurrentPlan {
	return v.value
}

func (v *NullableCurrentPlan) Set(val *CurrentPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentPlan(val *CurrentPlan) *NullableCurrentPlan {
	return &NullableCurrentPlan{value: val, isSet: true}
}

func (v NullableCurrentPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


