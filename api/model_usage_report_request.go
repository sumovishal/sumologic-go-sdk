/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UsageReportRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageReportRequest{}

// UsageReportRequest Usage Export Report Request
type UsageReportRequest struct {
	// Start date, without the time, of the usage data to fetch. If no value is provided startDate is used as the start of the subscription. The start date cannot be before the start of the subscription.
	StartDate *string `json:"startDate,omitempty"`
	// End date, without the time, of usage data to fetch. If no value is provided endDate is used as the end of the subscription. The end date cannot be after the end of the subscription.
	EndDate *string `json:"endDate,omitempty"`
	// Perform a groupBy operation on the usage details. If no value is provided data is grouped by `Day` - `day`: Aggregate the data by day - `week`: Aggregate the data by week. Week starts at Monday and ends at sunday night. - `month`: Aggregate the data by calendar month.
	GroupBy *string `json:"groupBy,omitempty"`
	// Specifies the type of report to be exported. Available types are `standard` and `detailed`. An additional `childDetailed` type is available for Sumo Orgs parents. Detailed report will have raw consumption along with the credits breakdown. If no value is provided Standard reports will be exported.
	ReportType *string `json:"reportType,omitempty"`
	// Deployment charges will be applied to the returned usages csv if this is set to true and the organization  is a part of Sumo Organizations as a child organization.
	IncludeDeploymentCharge *bool `json:"includeDeploymentCharge,omitempty"`
}

// NewUsageReportRequest instantiates a new UsageReportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageReportRequest() *UsageReportRequest {
	this := UsageReportRequest{}
	var groupBy string = "day"
	this.GroupBy = &groupBy
	var reportType string = "standard"
	this.ReportType = &reportType
	var includeDeploymentCharge bool = false
	this.IncludeDeploymentCharge = &includeDeploymentCharge
	return &this
}

// NewUsageReportRequestWithDefaults instantiates a new UsageReportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageReportRequestWithDefaults() *UsageReportRequest {
	this := UsageReportRequest{}
	var groupBy string = "day"
	this.GroupBy = &groupBy
	var reportType string = "standard"
	this.ReportType = &reportType
	var includeDeploymentCharge bool = false
	this.IncludeDeploymentCharge = &includeDeploymentCharge
	return &this
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *UsageReportRequest) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportRequest) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *UsageReportRequest) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *UsageReportRequest) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *UsageReportRequest) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportRequest) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *UsageReportRequest) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *UsageReportRequest) SetEndDate(v string) {
	o.EndDate = &v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *UsageReportRequest) GetGroupBy() string {
	if o == nil || IsNil(o.GroupBy) {
		var ret string
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportRequest) GetGroupByOk() (*string, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *UsageReportRequest) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given string and assigns it to the GroupBy field.
func (o *UsageReportRequest) SetGroupBy(v string) {
	o.GroupBy = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *UsageReportRequest) GetReportType() string {
	if o == nil || IsNil(o.ReportType) {
		var ret string
		return ret
	}
	return *o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportRequest) GetReportTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReportType) {
		return nil, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *UsageReportRequest) HasReportType() bool {
	if o != nil && !IsNil(o.ReportType) {
		return true
	}

	return false
}

// SetReportType gets a reference to the given string and assigns it to the ReportType field.
func (o *UsageReportRequest) SetReportType(v string) {
	o.ReportType = &v
}

// GetIncludeDeploymentCharge returns the IncludeDeploymentCharge field value if set, zero value otherwise.
func (o *UsageReportRequest) GetIncludeDeploymentCharge() bool {
	if o == nil || IsNil(o.IncludeDeploymentCharge) {
		var ret bool
		return ret
	}
	return *o.IncludeDeploymentCharge
}

// GetIncludeDeploymentChargeOk returns a tuple with the IncludeDeploymentCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportRequest) GetIncludeDeploymentChargeOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeDeploymentCharge) {
		return nil, false
	}
	return o.IncludeDeploymentCharge, true
}

// HasIncludeDeploymentCharge returns a boolean if a field has been set.
func (o *UsageReportRequest) HasIncludeDeploymentCharge() bool {
	if o != nil && !IsNil(o.IncludeDeploymentCharge) {
		return true
	}

	return false
}

// SetIncludeDeploymentCharge gets a reference to the given bool and assigns it to the IncludeDeploymentCharge field.
func (o *UsageReportRequest) SetIncludeDeploymentCharge(v bool) {
	o.IncludeDeploymentCharge = &v
}

func (o UsageReportRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageReportRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	if !IsNil(o.ReportType) {
		toSerialize["reportType"] = o.ReportType
	}
	if !IsNil(o.IncludeDeploymentCharge) {
		toSerialize["includeDeploymentCharge"] = o.IncludeDeploymentCharge
	}
	return toSerialize, nil
}

type NullableUsageReportRequest struct {
	value *UsageReportRequest
	isSet bool
}

func (v NullableUsageReportRequest) Get() *UsageReportRequest {
	return v.value
}

func (v *NullableUsageReportRequest) Set(val *UsageReportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageReportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageReportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageReportRequest(val *UsageReportRequest) *NullableUsageReportRequest {
	return &NullableUsageReportRequest{value: val, isSet: true}
}

func (v NullableUsageReportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageReportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


