/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// TraceSpanDetailAllOf struct for TraceSpanDetailAllOf
type TraceSpanDetailAllOf struct {
	// Produced error message (could be a stack trace, database error code, ..)
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Fields attached to this span.
	Fields *map[string]TracingValue `json:"fields,omitempty"`
	CriticalPathContribution *TraceSpanCriticalPathContribution `json:"criticalPathContribution,omitempty"`
	// Logs attached to this span.
	Logs []string `json:"logs,omitempty"`
	// Events attached to this span.
	Events []SpanEvent `json:"events,omitempty"`
	// List of casually related spans.
	Links []SpanLink `json:"links,omitempty"`
}

// NewTraceSpanDetailAllOf instantiates a new TraceSpanDetailAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceSpanDetailAllOf() *TraceSpanDetailAllOf {
	this := TraceSpanDetailAllOf{}
	return &this
}

// NewTraceSpanDetailAllOfWithDefaults instantiates a new TraceSpanDetailAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceSpanDetailAllOfWithDefaults() *TraceSpanDetailAllOf {
	this := TraceSpanDetailAllOf{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *TraceSpanDetailAllOf) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSpanDetailAllOf) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *TraceSpanDetailAllOf) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *TraceSpanDetailAllOf) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *TraceSpanDetailAllOf) GetFields() map[string]TracingValue {
	if o == nil || o.Fields == nil {
		var ret map[string]TracingValue
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSpanDetailAllOf) GetFieldsOk() (*map[string]TracingValue, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *TraceSpanDetailAllOf) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]TracingValue and assigns it to the Fields field.
func (o *TraceSpanDetailAllOf) SetFields(v map[string]TracingValue) {
	o.Fields = &v
}

// GetCriticalPathContribution returns the CriticalPathContribution field value if set, zero value otherwise.
func (o *TraceSpanDetailAllOf) GetCriticalPathContribution() TraceSpanCriticalPathContribution {
	if o == nil || o.CriticalPathContribution == nil {
		var ret TraceSpanCriticalPathContribution
		return ret
	}
	return *o.CriticalPathContribution
}

// GetCriticalPathContributionOk returns a tuple with the CriticalPathContribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSpanDetailAllOf) GetCriticalPathContributionOk() (*TraceSpanCriticalPathContribution, bool) {
	if o == nil || o.CriticalPathContribution == nil {
		return nil, false
	}
	return o.CriticalPathContribution, true
}

// HasCriticalPathContribution returns a boolean if a field has been set.
func (o *TraceSpanDetailAllOf) HasCriticalPathContribution() bool {
	if o != nil && o.CriticalPathContribution != nil {
		return true
	}

	return false
}

// SetCriticalPathContribution gets a reference to the given TraceSpanCriticalPathContribution and assigns it to the CriticalPathContribution field.
func (o *TraceSpanDetailAllOf) SetCriticalPathContribution(v TraceSpanCriticalPathContribution) {
	o.CriticalPathContribution = &v
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *TraceSpanDetailAllOf) GetLogs() []string {
	if o == nil || o.Logs == nil {
		var ret []string
		return ret
	}
	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSpanDetailAllOf) GetLogsOk() ([]string, bool) {
	if o == nil || o.Logs == nil {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *TraceSpanDetailAllOf) HasLogs() bool {
	if o != nil && o.Logs != nil {
		return true
	}

	return false
}

// SetLogs gets a reference to the given []string and assigns it to the Logs field.
func (o *TraceSpanDetailAllOf) SetLogs(v []string) {
	o.Logs = v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *TraceSpanDetailAllOf) GetEvents() []SpanEvent {
	if o == nil || o.Events == nil {
		var ret []SpanEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSpanDetailAllOf) GetEventsOk() ([]SpanEvent, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *TraceSpanDetailAllOf) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []SpanEvent and assigns it to the Events field.
func (o *TraceSpanDetailAllOf) SetEvents(v []SpanEvent) {
	o.Events = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *TraceSpanDetailAllOf) GetLinks() []SpanLink {
	if o == nil || o.Links == nil {
		var ret []SpanLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSpanDetailAllOf) GetLinksOk() ([]SpanLink, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TraceSpanDetailAllOf) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []SpanLink and assigns it to the Links field.
func (o *TraceSpanDetailAllOf) SetLinks(v []SpanLink) {
	o.Links = v
}

func (o TraceSpanDetailAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorMessage != nil {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.CriticalPathContribution != nil {
		toSerialize["criticalPathContribution"] = o.CriticalPathContribution
	}
	if o.Logs != nil {
		toSerialize["logs"] = o.Logs
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableTraceSpanDetailAllOf struct {
	value *TraceSpanDetailAllOf
	isSet bool
}

func (v NullableTraceSpanDetailAllOf) Get() *TraceSpanDetailAllOf {
	return v.value
}

func (v *NullableTraceSpanDetailAllOf) Set(val *TraceSpanDetailAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceSpanDetailAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceSpanDetailAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceSpanDetailAllOf(val *TraceSpanDetailAllOf) *NullableTraceSpanDetailAllOf {
	return &NullableTraceSpanDetailAllOf{value: val, isSet: true}
}

func (v NullableTraceSpanDetailAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceSpanDetailAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


