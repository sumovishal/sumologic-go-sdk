/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GroupFieldsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupFieldsResponse{}

// GroupFieldsResponse Group fields for the monitor
type GroupFieldsResponse struct {
	// List of group fields
	GroupFields []string `json:"groupFields"`
	// Whether or not the queries are aggregate.
	IsQueryAggregate bool `json:"isQueryAggregate"`
}

type _GroupFieldsResponse GroupFieldsResponse

// NewGroupFieldsResponse instantiates a new GroupFieldsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupFieldsResponse(groupFields []string, isQueryAggregate bool) *GroupFieldsResponse {
	this := GroupFieldsResponse{}
	this.GroupFields = groupFields
	this.IsQueryAggregate = isQueryAggregate
	return &this
}

// NewGroupFieldsResponseWithDefaults instantiates a new GroupFieldsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupFieldsResponseWithDefaults() *GroupFieldsResponse {
	this := GroupFieldsResponse{}
	var isQueryAggregate bool = false
	this.IsQueryAggregate = isQueryAggregate
	return &this
}

// GetGroupFields returns the GroupFields field value
func (o *GroupFieldsResponse) GetGroupFields() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.GroupFields
}

// GetGroupFieldsOk returns a tuple with the GroupFields field value
// and a boolean to check if the value has been set.
func (o *GroupFieldsResponse) GetGroupFieldsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupFields, true
}

// SetGroupFields sets field value
func (o *GroupFieldsResponse) SetGroupFields(v []string) {
	o.GroupFields = v
}

// GetIsQueryAggregate returns the IsQueryAggregate field value
func (o *GroupFieldsResponse) GetIsQueryAggregate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsQueryAggregate
}

// GetIsQueryAggregateOk returns a tuple with the IsQueryAggregate field value
// and a boolean to check if the value has been set.
func (o *GroupFieldsResponse) GetIsQueryAggregateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsQueryAggregate, true
}

// SetIsQueryAggregate sets field value
func (o *GroupFieldsResponse) SetIsQueryAggregate(v bool) {
	o.IsQueryAggregate = v
}

func (o GroupFieldsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupFieldsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupFields"] = o.GroupFields
	toSerialize["isQueryAggregate"] = o.IsQueryAggregate
	return toSerialize, nil
}

func (o *GroupFieldsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupFields",
		"isQueryAggregate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupFieldsResponse := _GroupFieldsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroupFieldsResponse)

	if err != nil {
		return err
	}

	*o = GroupFieldsResponse(varGroupFieldsResponse)

	return err
}

type NullableGroupFieldsResponse struct {
	value *GroupFieldsResponse
	isSet bool
}

func (v NullableGroupFieldsResponse) Get() *GroupFieldsResponse {
	return v.value
}

func (v *NullableGroupFieldsResponse) Set(val *GroupFieldsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupFieldsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupFieldsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupFieldsResponse(val *GroupFieldsResponse) *NullableGroupFieldsResponse {
	return &NullableGroupFieldsResponse{value: val, isSet: true}
}

func (v NullableGroupFieldsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupFieldsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


