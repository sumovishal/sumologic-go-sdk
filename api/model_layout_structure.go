/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LayoutStructure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LayoutStructure{}

// LayoutStructure struct for LayoutStructure
type LayoutStructure struct {
	// The identifier of the panel that this structure applies to.
	Key string `json:"key"`
	// The structure of a panel.
	Structure string `json:"structure"`
}

type _LayoutStructure LayoutStructure

// NewLayoutStructure instantiates a new LayoutStructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLayoutStructure(key string, structure string) *LayoutStructure {
	this := LayoutStructure{}
	this.Key = key
	this.Structure = structure
	return &this
}

// NewLayoutStructureWithDefaults instantiates a new LayoutStructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLayoutStructureWithDefaults() *LayoutStructure {
	this := LayoutStructure{}
	return &this
}

// GetKey returns the Key field value
func (o *LayoutStructure) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *LayoutStructure) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *LayoutStructure) SetKey(v string) {
	o.Key = v
}

// GetStructure returns the Structure field value
func (o *LayoutStructure) GetStructure() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Structure
}

// GetStructureOk returns a tuple with the Structure field value
// and a boolean to check if the value has been set.
func (o *LayoutStructure) GetStructureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Structure, true
}

// SetStructure sets field value
func (o *LayoutStructure) SetStructure(v string) {
	o.Structure = v
}

func (o LayoutStructure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LayoutStructure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["structure"] = o.Structure
	return toSerialize, nil
}

func (o *LayoutStructure) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"structure",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLayoutStructure := _LayoutStructure{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLayoutStructure)

	if err != nil {
		return err
	}

	*o = LayoutStructure(varLayoutStructure)

	return err
}

type NullableLayoutStructure struct {
	value *LayoutStructure
	isSet bool
}

func (v NullableLayoutStructure) Get() *LayoutStructure {
	return v.value
}

func (v *NullableLayoutStructure) Set(val *LayoutStructure) {
	v.value = val
	v.isSet = true
}

func (v NullableLayoutStructure) IsSet() bool {
	return v.isSet
}

func (v *NullableLayoutStructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayoutStructure(val *LayoutStructure) *NullableLayoutStructure {
	return &NullableLayoutStructure{value: val, isSet: true}
}

func (v NullableLayoutStructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayoutStructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


