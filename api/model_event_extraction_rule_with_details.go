/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EventExtractionRuleWithDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventExtractionRuleWithDetails{}

// EventExtractionRuleWithDetails Event extraction rule object.
type EventExtractionRuleWithDetails struct {
	// Name of event extraction rule.
	Name string `json:"name"`
	// Description of event extraction rule.
	Description *string `json:"description,omitempty"`
	// Query String.
	Query string `json:"query"`
	CorrelationExpression CorrelationExpression `json:"correlationExpression"`
	// Id of the event extraction rule.
	Id string `json:"id"`
	// Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Identifier of the user who created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`
	// Last modification timestamp in UTC.
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`
	// Identifier of the user who last modified the resource.
	ModifiedBy *string `json:"modifiedBy,omitempty"`
}

type _EventExtractionRuleWithDetails EventExtractionRuleWithDetails

// NewEventExtractionRuleWithDetails instantiates a new EventExtractionRuleWithDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventExtractionRuleWithDetails(name string, query string, correlationExpression CorrelationExpression, id string) *EventExtractionRuleWithDetails {
	this := EventExtractionRuleWithDetails{}
	this.Name = name
	this.Query = query
	this.CorrelationExpression = correlationExpression
	this.Id = id
	return &this
}

// NewEventExtractionRuleWithDetailsWithDefaults instantiates a new EventExtractionRuleWithDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventExtractionRuleWithDetailsWithDefaults() *EventExtractionRuleWithDetails {
	this := EventExtractionRuleWithDetails{}
	return &this
}

// GetName returns the Name field value
func (o *EventExtractionRuleWithDetails) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventExtractionRuleWithDetails) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventExtractionRuleWithDetails) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventExtractionRuleWithDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExtractionRuleWithDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventExtractionRuleWithDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventExtractionRuleWithDetails) SetDescription(v string) {
	o.Description = &v
}

// GetQuery returns the Query field value
func (o *EventExtractionRuleWithDetails) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *EventExtractionRuleWithDetails) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *EventExtractionRuleWithDetails) SetQuery(v string) {
	o.Query = v
}

// GetCorrelationExpression returns the CorrelationExpression field value
func (o *EventExtractionRuleWithDetails) GetCorrelationExpression() CorrelationExpression {
	if o == nil {
		var ret CorrelationExpression
		return ret
	}

	return o.CorrelationExpression
}

// GetCorrelationExpressionOk returns a tuple with the CorrelationExpression field value
// and a boolean to check if the value has been set.
func (o *EventExtractionRuleWithDetails) GetCorrelationExpressionOk() (*CorrelationExpression, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CorrelationExpression, true
}

// SetCorrelationExpression sets field value
func (o *EventExtractionRuleWithDetails) SetCorrelationExpression(v CorrelationExpression) {
	o.CorrelationExpression = v
}

// GetId returns the Id field value
func (o *EventExtractionRuleWithDetails) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventExtractionRuleWithDetails) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventExtractionRuleWithDetails) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EventExtractionRuleWithDetails) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExtractionRuleWithDetails) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EventExtractionRuleWithDetails) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *EventExtractionRuleWithDetails) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *EventExtractionRuleWithDetails) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExtractionRuleWithDetails) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *EventExtractionRuleWithDetails) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *EventExtractionRuleWithDetails) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *EventExtractionRuleWithDetails) GetModifiedAt() time.Time {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExtractionRuleWithDetails) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *EventExtractionRuleWithDetails) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *EventExtractionRuleWithDetails) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *EventExtractionRuleWithDetails) GetModifiedBy() string {
	if o == nil || IsNil(o.ModifiedBy) {
		var ret string
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventExtractionRuleWithDetails) GetModifiedByOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *EventExtractionRuleWithDetails) HasModifiedBy() bool {
	if o != nil && !IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given string and assigns it to the ModifiedBy field.
func (o *EventExtractionRuleWithDetails) SetModifiedBy(v string) {
	o.ModifiedBy = &v
}

func (o EventExtractionRuleWithDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventExtractionRuleWithDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["query"] = o.Query
	toSerialize["correlationExpression"] = o.CorrelationExpression
	toSerialize["id"] = o.Id
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if !IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	return toSerialize, nil
}

func (o *EventExtractionRuleWithDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"query",
		"correlationExpression",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventExtractionRuleWithDetails := _EventExtractionRuleWithDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventExtractionRuleWithDetails)

	if err != nil {
		return err
	}

	*o = EventExtractionRuleWithDetails(varEventExtractionRuleWithDetails)

	return err
}

type NullableEventExtractionRuleWithDetails struct {
	value *EventExtractionRuleWithDetails
	isSet bool
}

func (v NullableEventExtractionRuleWithDetails) Get() *EventExtractionRuleWithDetails {
	return v.value
}

func (v *NullableEventExtractionRuleWithDetails) Set(val *EventExtractionRuleWithDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEventExtractionRuleWithDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEventExtractionRuleWithDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventExtractionRuleWithDetails(val *EventExtractionRuleWithDetails) *NullableEventExtractionRuleWithDetails {
	return &NullableEventExtractionRuleWithDetails{value: val, isSet: true}
}

func (v NullableEventExtractionRuleWithDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventExtractionRuleWithDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


