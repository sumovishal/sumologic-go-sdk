/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmailAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailAllOf{}

// EmailAllOf struct for EmailAllOf
type EmailAllOf struct {
	// A list of email addresses to send to when the rule fires.
	Recipients []string `json:"recipients"`
	// The subject line of the email.
	Subject string `json:"subject"`
	// The message body of the email to send.
	MessageBody *string `json:"messageBody,omitempty"`
	// Time zone for the email content. All dates/times will be displayed in this timeZone in the email payload. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
	TimeZone *string `json:"timeZone,omitempty"`
}

// NewEmailAllOf instantiates a new EmailAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailAllOf(recipients []string, subject string) *EmailAllOf {
	this := EmailAllOf{}
	this.Recipients = recipients
	this.Subject = subject
	return &this
}

// NewEmailAllOfWithDefaults instantiates a new EmailAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailAllOfWithDefaults() *EmailAllOf {
	this := EmailAllOf{}
	return &this
}

// GetRecipients returns the Recipients field value
func (o *EmailAllOf) GetRecipients() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value
// and a boolean to check if the value has been set.
func (o *EmailAllOf) GetRecipientsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recipients, true
}

// SetRecipients sets field value
func (o *EmailAllOf) SetRecipients(v []string) {
	o.Recipients = v
}

// GetSubject returns the Subject field value
func (o *EmailAllOf) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *EmailAllOf) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *EmailAllOf) SetSubject(v string) {
	o.Subject = v
}

// GetMessageBody returns the MessageBody field value if set, zero value otherwise.
func (o *EmailAllOf) GetMessageBody() string {
	if o == nil || IsNil(o.MessageBody) {
		var ret string
		return ret
	}
	return *o.MessageBody
}

// GetMessageBodyOk returns a tuple with the MessageBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailAllOf) GetMessageBodyOk() (*string, bool) {
	if o == nil || IsNil(o.MessageBody) {
		return nil, false
	}
	return o.MessageBody, true
}

// HasMessageBody returns a boolean if a field has been set.
func (o *EmailAllOf) HasMessageBody() bool {
	if o != nil && !IsNil(o.MessageBody) {
		return true
	}

	return false
}

// SetMessageBody gets a reference to the given string and assigns it to the MessageBody field.
func (o *EmailAllOf) SetMessageBody(v string) {
	o.MessageBody = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *EmailAllOf) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailAllOf) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *EmailAllOf) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *EmailAllOf) SetTimeZone(v string) {
	o.TimeZone = &v
}

func (o EmailAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recipients"] = o.Recipients
	toSerialize["subject"] = o.Subject
	if !IsNil(o.MessageBody) {
		toSerialize["messageBody"] = o.MessageBody
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	return toSerialize, nil
}

type NullableEmailAllOf struct {
	value *EmailAllOf
	isSet bool
}

func (v NullableEmailAllOf) Get() *EmailAllOf {
	return v.value
}

func (v *NullableEmailAllOf) Set(val *EmailAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailAllOf(val *EmailAllOf) *NullableEmailAllOf {
	return &NullableEmailAllOf{value: val, isSet: true}
}

func (v NullableEmailAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


