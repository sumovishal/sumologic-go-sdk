/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RelativeTimeRangeBoundary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelativeTimeRangeBoundary{}

// RelativeTimeRangeBoundary struct for RelativeTimeRangeBoundary
type RelativeTimeRangeBoundary struct {
	TimeRangeBoundary
	// Relative time as a string consisting of following elements: - `-` (optional): minus sign indicates time in the past, - `<number>`: number of time units, - `<time_unit>`: time unit; possible values are: `w` (week), `d` (day), `h` (hour), `m` (minute), `s` (second). Multiple pairs of `<number><time_unit>` may be provided, and they may be in any order. For example, `-2w5d3h` points to the moment in time 2 weeks, 5 days and 3 hours ago.
	RelativeTime string `json:"relativeTime"`
}

// NewRelativeTimeRangeBoundary instantiates a new RelativeTimeRangeBoundary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelativeTimeRangeBoundary(relativeTime string, type_ string) *RelativeTimeRangeBoundary {
	this := RelativeTimeRangeBoundary{}
	this.Type = type_
	this.RelativeTime = relativeTime
	return &this
}

// NewRelativeTimeRangeBoundaryWithDefaults instantiates a new RelativeTimeRangeBoundary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelativeTimeRangeBoundaryWithDefaults() *RelativeTimeRangeBoundary {
	this := RelativeTimeRangeBoundary{}
	return &this
}

// GetRelativeTime returns the RelativeTime field value
func (o *RelativeTimeRangeBoundary) GetRelativeTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelativeTime
}

// GetRelativeTimeOk returns a tuple with the RelativeTime field value
// and a boolean to check if the value has been set.
func (o *RelativeTimeRangeBoundary) GetRelativeTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelativeTime, true
}

// SetRelativeTime sets field value
func (o *RelativeTimeRangeBoundary) SetRelativeTime(v string) {
	o.RelativeTime = v
}

func (o RelativeTimeRangeBoundary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelativeTimeRangeBoundary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTimeRangeBoundary, errTimeRangeBoundary := json.Marshal(o.TimeRangeBoundary)
	if errTimeRangeBoundary != nil {
		return map[string]interface{}{}, errTimeRangeBoundary
	}
	errTimeRangeBoundary = json.Unmarshal([]byte(serializedTimeRangeBoundary), &toSerialize)
	if errTimeRangeBoundary != nil {
		return map[string]interface{}{}, errTimeRangeBoundary
	}
	toSerialize["relativeTime"] = o.RelativeTime
	return toSerialize, nil
}

type NullableRelativeTimeRangeBoundary struct {
	value *RelativeTimeRangeBoundary
	isSet bool
}

func (v NullableRelativeTimeRangeBoundary) Get() *RelativeTimeRangeBoundary {
	return v.value
}

func (v *NullableRelativeTimeRangeBoundary) Set(val *RelativeTimeRangeBoundary) {
	v.value = val
	v.isSet = true
}

func (v NullableRelativeTimeRangeBoundary) IsSet() bool {
	return v.isSet
}

func (v *NullableRelativeTimeRangeBoundary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelativeTimeRangeBoundary(val *RelativeTimeRangeBoundary) *NullableRelativeTimeRangeBoundary {
	return &NullableRelativeTimeRangeBoundary{value: val, isSet: true}
}

func (v NullableRelativeTimeRangeBoundary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelativeTimeRangeBoundary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


