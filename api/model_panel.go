/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Panel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Panel{}

// Panel struct for Panel
type Panel struct {
	// Unique identifier for the panel.
	Id *string `json:"id,omitempty"`
	// Key for the panel. Used to create searches for the queries in the panel and configure the layout of the panel in the dashboard. 
	Key string `json:"key"`
	// Title of the panel.
	Title *string `json:"title,omitempty"`
	// Visual settings of the panel.
	VisualSettings *string `json:"visualSettings,omitempty"`
	// Keeps the visual settings, like series colors, consistent with the settings of the parent panel.
	KeepVisualSettingsConsistentWithParent *bool `json:"keepVisualSettingsConsistentWithParent,omitempty"`
	// Type of panel.
	PanelType string `json:"panelType"`
}

type _Panel Panel

// NewPanel instantiates a new Panel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPanel(key string, panelType string) *Panel {
	this := Panel{}
	this.Key = key
	var keepVisualSettingsConsistentWithParent bool = true
	this.KeepVisualSettingsConsistentWithParent = &keepVisualSettingsConsistentWithParent
	this.PanelType = panelType
	return &this
}

// NewPanelWithDefaults instantiates a new Panel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPanelWithDefaults() *Panel {
	this := Panel{}
	var keepVisualSettingsConsistentWithParent bool = true
	this.KeepVisualSettingsConsistentWithParent = &keepVisualSettingsConsistentWithParent
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Panel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Panel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Panel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Panel) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value
func (o *Panel) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *Panel) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *Panel) SetKey(v string) {
	o.Key = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Panel) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Panel) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Panel) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Panel) SetTitle(v string) {
	o.Title = &v
}

// GetVisualSettings returns the VisualSettings field value if set, zero value otherwise.
func (o *Panel) GetVisualSettings() string {
	if o == nil || IsNil(o.VisualSettings) {
		var ret string
		return ret
	}
	return *o.VisualSettings
}

// GetVisualSettingsOk returns a tuple with the VisualSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Panel) GetVisualSettingsOk() (*string, bool) {
	if o == nil || IsNil(o.VisualSettings) {
		return nil, false
	}
	return o.VisualSettings, true
}

// HasVisualSettings returns a boolean if a field has been set.
func (o *Panel) HasVisualSettings() bool {
	if o != nil && !IsNil(o.VisualSettings) {
		return true
	}

	return false
}

// SetVisualSettings gets a reference to the given string and assigns it to the VisualSettings field.
func (o *Panel) SetVisualSettings(v string) {
	o.VisualSettings = &v
}

// GetKeepVisualSettingsConsistentWithParent returns the KeepVisualSettingsConsistentWithParent field value if set, zero value otherwise.
func (o *Panel) GetKeepVisualSettingsConsistentWithParent() bool {
	if o == nil || IsNil(o.KeepVisualSettingsConsistentWithParent) {
		var ret bool
		return ret
	}
	return *o.KeepVisualSettingsConsistentWithParent
}

// GetKeepVisualSettingsConsistentWithParentOk returns a tuple with the KeepVisualSettingsConsistentWithParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Panel) GetKeepVisualSettingsConsistentWithParentOk() (*bool, bool) {
	if o == nil || IsNil(o.KeepVisualSettingsConsistentWithParent) {
		return nil, false
	}
	return o.KeepVisualSettingsConsistentWithParent, true
}

// HasKeepVisualSettingsConsistentWithParent returns a boolean if a field has been set.
func (o *Panel) HasKeepVisualSettingsConsistentWithParent() bool {
	if o != nil && !IsNil(o.KeepVisualSettingsConsistentWithParent) {
		return true
	}

	return false
}

// SetKeepVisualSettingsConsistentWithParent gets a reference to the given bool and assigns it to the KeepVisualSettingsConsistentWithParent field.
func (o *Panel) SetKeepVisualSettingsConsistentWithParent(v bool) {
	o.KeepVisualSettingsConsistentWithParent = &v
}

// GetPanelType returns the PanelType field value
func (o *Panel) GetPanelType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PanelType
}

// GetPanelTypeOk returns a tuple with the PanelType field value
// and a boolean to check if the value has been set.
func (o *Panel) GetPanelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PanelType, true
}

// SetPanelType sets field value
func (o *Panel) SetPanelType(v string) {
	o.PanelType = v
}

func (o Panel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Panel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["key"] = o.Key
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.VisualSettings) {
		toSerialize["visualSettings"] = o.VisualSettings
	}
	if !IsNil(o.KeepVisualSettingsConsistentWithParent) {
		toSerialize["keepVisualSettingsConsistentWithParent"] = o.KeepVisualSettingsConsistentWithParent
	}
	toSerialize["panelType"] = o.PanelType
	return toSerialize, nil
}

func (o *Panel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"panelType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPanel := _Panel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPanel)

	if err != nil {
		return err
	}

	*o = Panel(varPanel)

	return err
}

type NullablePanel struct {
	value *Panel
	isSet bool
}

func (v NullablePanel) Get() *Panel {
	return v.value
}

func (v *NullablePanel) Set(val *Panel) {
	v.value = val
	v.isSet = true
}

func (v NullablePanel) IsSet() bool {
	return v.isSet
}

func (v *NullablePanel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePanel(val *Panel) *NullablePanel {
	return &NullablePanel{value: val, isSet: true}
}

func (v NullablePanel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePanel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


