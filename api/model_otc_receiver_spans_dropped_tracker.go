/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OTCReceiverSpansDroppedTracker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OTCReceiverSpansDroppedTracker{}

// OTCReceiverSpansDroppedTracker struct for OTCReceiverSpansDroppedTracker
type OTCReceiverSpansDroppedTracker struct {
	TrackerIdentity
	// Event type.
	EventType *string `json:"eventType,omitempty"`
	// The collector instance ID, e.g. `974b444b-4b45-4f32-aa03-1dbf2a16826d`.
	InstanceId *string `json:"instanceId,omitempty"`
	// The collector instance address, e.g. `172.16.1.14`.
	InstanceAddress *string `json:"instanceAddress,omitempty"`
	// The collector receiver ID, e.g. `otlphttp/2`.
	ReceiverId *string `json:"receiverId,omitempty"`
	// The count of dropped spans.
	Count *string `json:"count,omitempty"`
}

type _OTCReceiverSpansDroppedTracker OTCReceiverSpansDroppedTracker

// NewOTCReceiverSpansDroppedTracker instantiates a new OTCReceiverSpansDroppedTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOTCReceiverSpansDroppedTracker(trackerId string, error_ string, description string) *OTCReceiverSpansDroppedTracker {
	this := OTCReceiverSpansDroppedTracker{}
	this.TrackerId = trackerId
	this.Error = error_
	this.Description = description
	return &this
}

// NewOTCReceiverSpansDroppedTrackerWithDefaults instantiates a new OTCReceiverSpansDroppedTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOTCReceiverSpansDroppedTrackerWithDefaults() *OTCReceiverSpansDroppedTracker {
	this := OTCReceiverSpansDroppedTracker{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *OTCReceiverSpansDroppedTracker) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCReceiverSpansDroppedTracker) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *OTCReceiverSpansDroppedTracker) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *OTCReceiverSpansDroppedTracker) SetEventType(v string) {
	o.EventType = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *OTCReceiverSpansDroppedTracker) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCReceiverSpansDroppedTracker) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *OTCReceiverSpansDroppedTracker) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *OTCReceiverSpansDroppedTracker) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetInstanceAddress returns the InstanceAddress field value if set, zero value otherwise.
func (o *OTCReceiverSpansDroppedTracker) GetInstanceAddress() string {
	if o == nil || IsNil(o.InstanceAddress) {
		var ret string
		return ret
	}
	return *o.InstanceAddress
}

// GetInstanceAddressOk returns a tuple with the InstanceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCReceiverSpansDroppedTracker) GetInstanceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceAddress) {
		return nil, false
	}
	return o.InstanceAddress, true
}

// HasInstanceAddress returns a boolean if a field has been set.
func (o *OTCReceiverSpansDroppedTracker) HasInstanceAddress() bool {
	if o != nil && !IsNil(o.InstanceAddress) {
		return true
	}

	return false
}

// SetInstanceAddress gets a reference to the given string and assigns it to the InstanceAddress field.
func (o *OTCReceiverSpansDroppedTracker) SetInstanceAddress(v string) {
	o.InstanceAddress = &v
}

// GetReceiverId returns the ReceiverId field value if set, zero value otherwise.
func (o *OTCReceiverSpansDroppedTracker) GetReceiverId() string {
	if o == nil || IsNil(o.ReceiverId) {
		var ret string
		return ret
	}
	return *o.ReceiverId
}

// GetReceiverIdOk returns a tuple with the ReceiverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCReceiverSpansDroppedTracker) GetReceiverIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiverId) {
		return nil, false
	}
	return o.ReceiverId, true
}

// HasReceiverId returns a boolean if a field has been set.
func (o *OTCReceiverSpansDroppedTracker) HasReceiverId() bool {
	if o != nil && !IsNil(o.ReceiverId) {
		return true
	}

	return false
}

// SetReceiverId gets a reference to the given string and assigns it to the ReceiverId field.
func (o *OTCReceiverSpansDroppedTracker) SetReceiverId(v string) {
	o.ReceiverId = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *OTCReceiverSpansDroppedTracker) GetCount() string {
	if o == nil || IsNil(o.Count) {
		var ret string
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCReceiverSpansDroppedTracker) GetCountOk() (*string, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *OTCReceiverSpansDroppedTracker) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given string and assigns it to the Count field.
func (o *OTCReceiverSpansDroppedTracker) SetCount(v string) {
	o.Count = &v
}

func (o OTCReceiverSpansDroppedTracker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OTCReceiverSpansDroppedTracker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTrackerIdentity, errTrackerIdentity := json.Marshal(o.TrackerIdentity)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	errTrackerIdentity = json.Unmarshal([]byte(serializedTrackerIdentity), &toSerialize)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.InstanceId) {
		toSerialize["instanceId"] = o.InstanceId
	}
	if !IsNil(o.InstanceAddress) {
		toSerialize["instanceAddress"] = o.InstanceAddress
	}
	if !IsNil(o.ReceiverId) {
		toSerialize["receiverId"] = o.ReceiverId
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

func (o *OTCReceiverSpansDroppedTracker) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trackerId",
		"error",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOTCReceiverSpansDroppedTracker := _OTCReceiverSpansDroppedTracker{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOTCReceiverSpansDroppedTracker)

	if err != nil {
		return err
	}

	*o = OTCReceiverSpansDroppedTracker(varOTCReceiverSpansDroppedTracker)

	return err
}

type NullableOTCReceiverSpansDroppedTracker struct {
	value *OTCReceiverSpansDroppedTracker
	isSet bool
}

func (v NullableOTCReceiverSpansDroppedTracker) Get() *OTCReceiverSpansDroppedTracker {
	return v.value
}

func (v *NullableOTCReceiverSpansDroppedTracker) Set(val *OTCReceiverSpansDroppedTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableOTCReceiverSpansDroppedTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableOTCReceiverSpansDroppedTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOTCReceiverSpansDroppedTracker(val *OTCReceiverSpansDroppedTracker) *NullableOTCReceiverSpansDroppedTracker {
	return &NullableOTCReceiverSpansDroppedTracker{value: val, isSet: true}
}

func (v NullableOTCReceiverSpansDroppedTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOTCReceiverSpansDroppedTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


