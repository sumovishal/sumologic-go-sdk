/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AggregateOnTransformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregateOnTransformation{}

// AggregateOnTransformation struct for AggregateOnTransformation
type AggregateOnTransformation struct {
	DimensionTransformation
	// A list of dimensions that should be aggregated on.
	AggregateOn []string `json:"aggregateOn"`
}

type _AggregateOnTransformation AggregateOnTransformation

// NewAggregateOnTransformation instantiates a new AggregateOnTransformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregateOnTransformation(aggregateOn []string, transformationType string) *AggregateOnTransformation {
	this := AggregateOnTransformation{}
	this.TransformationType = transformationType
	this.AggregateOn = aggregateOn
	return &this
}

// NewAggregateOnTransformationWithDefaults instantiates a new AggregateOnTransformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregateOnTransformationWithDefaults() *AggregateOnTransformation {
	this := AggregateOnTransformation{}
	return &this
}

// GetAggregateOn returns the AggregateOn field value
func (o *AggregateOnTransformation) GetAggregateOn() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AggregateOn
}

// GetAggregateOnOk returns a tuple with the AggregateOn field value
// and a boolean to check if the value has been set.
func (o *AggregateOnTransformation) GetAggregateOnOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggregateOn, true
}

// SetAggregateOn sets field value
func (o *AggregateOnTransformation) SetAggregateOn(v []string) {
	o.AggregateOn = v
}

func (o AggregateOnTransformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregateOnTransformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedDimensionTransformation, errDimensionTransformation := json.Marshal(o.DimensionTransformation)
	if errDimensionTransformation != nil {
		return map[string]interface{}{}, errDimensionTransformation
	}
	errDimensionTransformation = json.Unmarshal([]byte(serializedDimensionTransformation), &toSerialize)
	if errDimensionTransformation != nil {
		return map[string]interface{}{}, errDimensionTransformation
	}
	toSerialize["aggregateOn"] = o.AggregateOn
	return toSerialize, nil
}

func (o *AggregateOnTransformation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aggregateOn",
		"transformationType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAggregateOnTransformation := _AggregateOnTransformation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAggregateOnTransformation)

	if err != nil {
		return err
	}

	*o = AggregateOnTransformation(varAggregateOnTransformation)

	return err
}

type NullableAggregateOnTransformation struct {
	value *AggregateOnTransformation
	isSet bool
}

func (v NullableAggregateOnTransformation) Get() *AggregateOnTransformation {
	return v.value
}

func (v *NullableAggregateOnTransformation) Set(val *AggregateOnTransformation) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateOnTransformation) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateOnTransformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateOnTransformation(val *AggregateOnTransformation) *NullableAggregateOnTransformation {
	return &NullableAggregateOnTransformation{value: val, isSet: true}
}

func (v NullableAggregateOnTransformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateOnTransformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


