/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// VisualAxisData struct for VisualAxisData
type VisualAxisData struct {
	// The value of the axis labels.
	Index *int32 `json:"index,omitempty"`
}

// NewVisualAxisData instantiates a new VisualAxisData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisualAxisData() *VisualAxisData {
	this := VisualAxisData{}
	return &this
}

// NewVisualAxisDataWithDefaults instantiates a new VisualAxisData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisualAxisDataWithDefaults() *VisualAxisData {
	this := VisualAxisData{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *VisualAxisData) GetIndex() int32 {
	if o == nil || o.Index == nil {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisualAxisData) GetIndexOk() (*int32, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *VisualAxisData) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *VisualAxisData) SetIndex(v int32) {
	o.Index = &v
}

func (o VisualAxisData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	return json.Marshal(toSerialize)
}

type NullableVisualAxisData struct {
	value *VisualAxisData
	isSet bool
}

func (v NullableVisualAxisData) Get() *VisualAxisData {
	return v.value
}

func (v *NullableVisualAxisData) Set(val *VisualAxisData) {
	v.value = val
	v.isSet = true
}

func (v NullableVisualAxisData) IsSet() bool {
	return v.isSet
}

func (v *NullableVisualAxisData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisualAxisData(val *VisualAxisData) *NullableVisualAxisData {
	return &NullableVisualAxisData{value: val, isSet: true}
}

func (v NullableVisualAxisData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisualAxisData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


