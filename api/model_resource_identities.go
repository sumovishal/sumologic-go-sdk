/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResourceIdentities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceIdentities{}

// ResourceIdentities struct for ResourceIdentities
type ResourceIdentities struct {
	// A list of the resources.
	Data []ResourceIdentity `json:"data"`
}

// NewResourceIdentities instantiates a new ResourceIdentities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceIdentities(data []ResourceIdentity) *ResourceIdentities {
	this := ResourceIdentities{}
	this.Data = data
	return &this
}

// NewResourceIdentitiesWithDefaults instantiates a new ResourceIdentities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceIdentitiesWithDefaults() *ResourceIdentities {
	this := ResourceIdentities{}
	return &this
}

// GetData returns the Data field value
func (o *ResourceIdentities) GetData() []ResourceIdentity {
	if o == nil {
		var ret []ResourceIdentity
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ResourceIdentities) GetDataOk() ([]ResourceIdentity, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ResourceIdentities) SetData(v []ResourceIdentity) {
	o.Data = v
}

func (o ResourceIdentities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceIdentities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableResourceIdentities struct {
	value *ResourceIdentities
	isSet bool
}

func (v NullableResourceIdentities) Get() *ResourceIdentities {
	return v.value
}

func (v *NullableResourceIdentities) Set(val *ResourceIdentities) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceIdentities) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceIdentities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceIdentities(val *ResourceIdentities) *NullableResourceIdentities {
	return &NullableResourceIdentities{value: val, isSet: true}
}

func (v NullableResourceIdentities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceIdentities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


