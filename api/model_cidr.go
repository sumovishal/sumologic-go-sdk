/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Cidr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cidr{}

// Cidr A CIDR notation or IP address along with its description.
type Cidr struct {
	// The string representation of the CIDR notation or IP address.
	Cidr string `json:"cidr"`
	// Description of the CIDR notation or IP address.
	Description *string `json:"description,omitempty"`
}

// NewCidr instantiates a new Cidr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCidr(cidr string) *Cidr {
	this := Cidr{}
	this.Cidr = cidr
	return &this
}

// NewCidrWithDefaults instantiates a new Cidr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCidrWithDefaults() *Cidr {
	this := Cidr{}
	return &this
}

// GetCidr returns the Cidr field value
func (o *Cidr) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *Cidr) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *Cidr) SetCidr(v string) {
	o.Cidr = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Cidr) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cidr) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Cidr) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Cidr) SetDescription(v string) {
	o.Description = &v
}

func (o Cidr) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cidr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cidr"] = o.Cidr
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableCidr struct {
	value *Cidr
	isSet bool
}

func (v NullableCidr) Get() *Cidr {
	return v.value
}

func (v *NullableCidr) Set(val *Cidr) {
	v.value = val
	v.isSet = true
}

func (v NullableCidr) IsSet() bool {
	return v.isSet
}

func (v *NullableCidr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCidr(val *Cidr) *NullableCidr {
	return &NullableCidr{value: val, isSet: true}
}

func (v NullableCidr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCidr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


