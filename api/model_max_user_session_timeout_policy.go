/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the MaxUserSessionTimeoutPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MaxUserSessionTimeoutPolicy{}

// MaxUserSessionTimeoutPolicy Max User Session Timeout policy.
type MaxUserSessionTimeoutPolicy struct {
	// Maximum web session timeout users are able to configure within their user preferences. Valid values are: `5m`, `15m`, `30m`, `1h`, `2h`, `6h`, `12h`, `1d`, `2d`, `3d`, `5d`, or `7d`
	MaxUserSessionTimeout string `json:"maxUserSessionTimeout"`
}

// NewMaxUserSessionTimeoutPolicy instantiates a new MaxUserSessionTimeoutPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaxUserSessionTimeoutPolicy(maxUserSessionTimeout string) *MaxUserSessionTimeoutPolicy {
	this := MaxUserSessionTimeoutPolicy{}
	this.MaxUserSessionTimeout = maxUserSessionTimeout
	return &this
}

// NewMaxUserSessionTimeoutPolicyWithDefaults instantiates a new MaxUserSessionTimeoutPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaxUserSessionTimeoutPolicyWithDefaults() *MaxUserSessionTimeoutPolicy {
	this := MaxUserSessionTimeoutPolicy{}
	return &this
}

// GetMaxUserSessionTimeout returns the MaxUserSessionTimeout field value
func (o *MaxUserSessionTimeoutPolicy) GetMaxUserSessionTimeout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxUserSessionTimeout
}

// GetMaxUserSessionTimeoutOk returns a tuple with the MaxUserSessionTimeout field value
// and a boolean to check if the value has been set.
func (o *MaxUserSessionTimeoutPolicy) GetMaxUserSessionTimeoutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxUserSessionTimeout, true
}

// SetMaxUserSessionTimeout sets field value
func (o *MaxUserSessionTimeoutPolicy) SetMaxUserSessionTimeout(v string) {
	o.MaxUserSessionTimeout = v
}

func (o MaxUserSessionTimeoutPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MaxUserSessionTimeoutPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["maxUserSessionTimeout"] = o.MaxUserSessionTimeout
	return toSerialize, nil
}

type NullableMaxUserSessionTimeoutPolicy struct {
	value *MaxUserSessionTimeoutPolicy
	isSet bool
}

func (v NullableMaxUserSessionTimeoutPolicy) Get() *MaxUserSessionTimeoutPolicy {
	return v.value
}

func (v *NullableMaxUserSessionTimeoutPolicy) Set(val *MaxUserSessionTimeoutPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableMaxUserSessionTimeoutPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableMaxUserSessionTimeoutPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaxUserSessionTimeoutPolicy(val *MaxUserSessionTimeoutPolicy) *NullableMaxUserSessionTimeoutPolicy {
	return &NullableMaxUserSessionTimeoutPolicy{value: val, isSet: true}
}

func (v NullableMaxUserSessionTimeoutPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaxUserSessionTimeoutPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


