/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SpanEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanEvent{}

// SpanEvent Span event containing all information (in particular attributes).
type SpanEvent struct {
	// Time when an event happened in the [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.
	Timestamp time.Time `json:"timestamp"`
	// Name of the event.
	Name string `json:"name"`
	// Span event attributes.
	Attributes []SpanEventAttribute `json:"attributes,omitempty"`
}

// NewSpanEvent instantiates a new SpanEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanEvent(timestamp time.Time, name string) *SpanEvent {
	this := SpanEvent{}
	this.Timestamp = timestamp
	this.Name = name
	return &this
}

// NewSpanEventWithDefaults instantiates a new SpanEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanEventWithDefaults() *SpanEvent {
	this := SpanEvent{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *SpanEvent) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *SpanEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *SpanEvent) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetName returns the Name field value
func (o *SpanEvent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpanEvent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpanEvent) SetName(v string) {
	o.Name = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SpanEvent) GetAttributes() []SpanEventAttribute {
	if o == nil || IsNil(o.Attributes) {
		var ret []SpanEventAttribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanEvent) GetAttributesOk() ([]SpanEventAttribute, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SpanEvent) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []SpanEventAttribute and assigns it to the Attributes field.
func (o *SpanEvent) SetAttributes(v []SpanEventAttribute) {
	o.Attributes = v
}

func (o SpanEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["name"] = o.Name
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableSpanEvent struct {
	value *SpanEvent
	isSet bool
}

func (v NullableSpanEvent) Get() *SpanEvent {
	return v.value
}

func (v *NullableSpanEvent) Set(val *SpanEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanEvent(val *SpanEvent) *NullableSpanEvent {
	return &NullableSpanEvent{value: val, isSet: true}
}

func (v NullableSpanEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


