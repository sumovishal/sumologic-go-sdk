/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScheduleDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleDefinition{}

// ScheduleDefinition struct for ScheduleDefinition
type ScheduleDefinition struct {
	// Time zone for the schedule per [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
	Timezone string `json:"timezone"`
	// Schedule start date in the format of `yyyy-mm-dd`
	StartDate string `json:"startDate"`
	// Schedule start time in the format of `hh:mm`
	StartTime string `json:"startTime"`
	// Duration of the muting in minutes
	Duration int32 `json:"duration"`
	// RRule (Recurrence Rule)
	Rrule *string `json:"rrule,omitempty"`
	// A flag identifying if the RRule is created or modified through Form UI
	IsForm *bool `json:"isForm,omitempty"`
}

type _ScheduleDefinition ScheduleDefinition

// NewScheduleDefinition instantiates a new ScheduleDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleDefinition(timezone string, startDate string, startTime string, duration int32) *ScheduleDefinition {
	this := ScheduleDefinition{}
	this.Timezone = timezone
	this.StartDate = startDate
	this.StartTime = startTime
	this.Duration = duration
	return &this
}

// NewScheduleDefinitionWithDefaults instantiates a new ScheduleDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleDefinitionWithDefaults() *ScheduleDefinition {
	this := ScheduleDefinition{}
	return &this
}

// GetTimezone returns the Timezone field value
func (o *ScheduleDefinition) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *ScheduleDefinition) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *ScheduleDefinition) SetTimezone(v string) {
	o.Timezone = v
}

// GetStartDate returns the StartDate field value
func (o *ScheduleDefinition) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *ScheduleDefinition) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *ScheduleDefinition) SetStartDate(v string) {
	o.StartDate = v
}

// GetStartTime returns the StartTime field value
func (o *ScheduleDefinition) GetStartTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *ScheduleDefinition) GetStartTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *ScheduleDefinition) SetStartTime(v string) {
	o.StartTime = v
}

// GetDuration returns the Duration field value
func (o *ScheduleDefinition) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *ScheduleDefinition) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *ScheduleDefinition) SetDuration(v int32) {
	o.Duration = v
}

// GetRrule returns the Rrule field value if set, zero value otherwise.
func (o *ScheduleDefinition) GetRrule() string {
	if o == nil || IsNil(o.Rrule) {
		var ret string
		return ret
	}
	return *o.Rrule
}

// GetRruleOk returns a tuple with the Rrule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleDefinition) GetRruleOk() (*string, bool) {
	if o == nil || IsNil(o.Rrule) {
		return nil, false
	}
	return o.Rrule, true
}

// HasRrule returns a boolean if a field has been set.
func (o *ScheduleDefinition) HasRrule() bool {
	if o != nil && !IsNil(o.Rrule) {
		return true
	}

	return false
}

// SetRrule gets a reference to the given string and assigns it to the Rrule field.
func (o *ScheduleDefinition) SetRrule(v string) {
	o.Rrule = &v
}

// GetIsForm returns the IsForm field value if set, zero value otherwise.
func (o *ScheduleDefinition) GetIsForm() bool {
	if o == nil || IsNil(o.IsForm) {
		var ret bool
		return ret
	}
	return *o.IsForm
}

// GetIsFormOk returns a tuple with the IsForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleDefinition) GetIsFormOk() (*bool, bool) {
	if o == nil || IsNil(o.IsForm) {
		return nil, false
	}
	return o.IsForm, true
}

// HasIsForm returns a boolean if a field has been set.
func (o *ScheduleDefinition) HasIsForm() bool {
	if o != nil && !IsNil(o.IsForm) {
		return true
	}

	return false
}

// SetIsForm gets a reference to the given bool and assigns it to the IsForm field.
func (o *ScheduleDefinition) SetIsForm(v bool) {
	o.IsForm = &v
}

func (o ScheduleDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timezone"] = o.Timezone
	toSerialize["startDate"] = o.StartDate
	toSerialize["startTime"] = o.StartTime
	toSerialize["duration"] = o.Duration
	if !IsNil(o.Rrule) {
		toSerialize["rrule"] = o.Rrule
	}
	if !IsNil(o.IsForm) {
		toSerialize["isForm"] = o.IsForm
	}
	return toSerialize, nil
}

func (o *ScheduleDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timezone",
		"startDate",
		"startTime",
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduleDefinition := _ScheduleDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduleDefinition)

	if err != nil {
		return err
	}

	*o = ScheduleDefinition(varScheduleDefinition)

	return err
}

type NullableScheduleDefinition struct {
	value *ScheduleDefinition
	isSet bool
}

func (v NullableScheduleDefinition) Get() *ScheduleDefinition {
	return v.value
}

func (v *NullableScheduleDefinition) Set(val *ScheduleDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleDefinition(val *ScheduleDefinition) *NullableScheduleDefinition {
	return &NullableScheduleDefinition{value: val, isSet: true}
}

func (v NullableScheduleDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


