/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OAuthRefreshFailedTracker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthRefreshFailedTracker{}

// OAuthRefreshFailedTracker struct for OAuthRefreshFailedTracker
type OAuthRefreshFailedTracker struct {
	TrackerIdentity
	// The type of exception received while attempting OAuth.
	ExceptionType *string `json:"exceptionType,omitempty"`
	// The error message received with the failed OAuth request.
	ExceptionMessage *string `json:"exceptionMessage,omitempty"`
}

// NewOAuthRefreshFailedTracker instantiates a new OAuthRefreshFailedTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthRefreshFailedTracker(trackerId string, error_ string, description string) *OAuthRefreshFailedTracker {
	this := OAuthRefreshFailedTracker{}
	this.TrackerId = trackerId
	this.Error = error_
	this.Description = description
	return &this
}

// NewOAuthRefreshFailedTrackerWithDefaults instantiates a new OAuthRefreshFailedTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthRefreshFailedTrackerWithDefaults() *OAuthRefreshFailedTracker {
	this := OAuthRefreshFailedTracker{}
	return &this
}

// GetExceptionType returns the ExceptionType field value if set, zero value otherwise.
func (o *OAuthRefreshFailedTracker) GetExceptionType() string {
	if o == nil || IsNil(o.ExceptionType) {
		var ret string
		return ret
	}
	return *o.ExceptionType
}

// GetExceptionTypeOk returns a tuple with the ExceptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthRefreshFailedTracker) GetExceptionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExceptionType) {
		return nil, false
	}
	return o.ExceptionType, true
}

// HasExceptionType returns a boolean if a field has been set.
func (o *OAuthRefreshFailedTracker) HasExceptionType() bool {
	if o != nil && !IsNil(o.ExceptionType) {
		return true
	}

	return false
}

// SetExceptionType gets a reference to the given string and assigns it to the ExceptionType field.
func (o *OAuthRefreshFailedTracker) SetExceptionType(v string) {
	o.ExceptionType = &v
}

// GetExceptionMessage returns the ExceptionMessage field value if set, zero value otherwise.
func (o *OAuthRefreshFailedTracker) GetExceptionMessage() string {
	if o == nil || IsNil(o.ExceptionMessage) {
		var ret string
		return ret
	}
	return *o.ExceptionMessage
}

// GetExceptionMessageOk returns a tuple with the ExceptionMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthRefreshFailedTracker) GetExceptionMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ExceptionMessage) {
		return nil, false
	}
	return o.ExceptionMessage, true
}

// HasExceptionMessage returns a boolean if a field has been set.
func (o *OAuthRefreshFailedTracker) HasExceptionMessage() bool {
	if o != nil && !IsNil(o.ExceptionMessage) {
		return true
	}

	return false
}

// SetExceptionMessage gets a reference to the given string and assigns it to the ExceptionMessage field.
func (o *OAuthRefreshFailedTracker) SetExceptionMessage(v string) {
	o.ExceptionMessage = &v
}

func (o OAuthRefreshFailedTracker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthRefreshFailedTracker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTrackerIdentity, errTrackerIdentity := json.Marshal(o.TrackerIdentity)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	errTrackerIdentity = json.Unmarshal([]byte(serializedTrackerIdentity), &toSerialize)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	if !IsNil(o.ExceptionType) {
		toSerialize["exceptionType"] = o.ExceptionType
	}
	if !IsNil(o.ExceptionMessage) {
		toSerialize["exceptionMessage"] = o.ExceptionMessage
	}
	return toSerialize, nil
}

type NullableOAuthRefreshFailedTracker struct {
	value *OAuthRefreshFailedTracker
	isSet bool
}

func (v NullableOAuthRefreshFailedTracker) Get() *OAuthRefreshFailedTracker {
	return v.value
}

func (v *NullableOAuthRefreshFailedTracker) Set(val *OAuthRefreshFailedTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthRefreshFailedTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthRefreshFailedTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthRefreshFailedTracker(val *OAuthRefreshFailedTracker) *NullableOAuthRefreshFailedTracker {
	return &NullableOAuthRefreshFailedTracker{value: val, isSet: true}
}

func (v NullableOAuthRefreshFailedTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthRefreshFailedTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


