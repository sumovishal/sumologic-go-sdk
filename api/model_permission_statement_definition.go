/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PermissionStatementDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionStatementDefinition{}

// PermissionStatementDefinition struct for PermissionStatementDefinition
type PermissionStatementDefinition struct {
	// List of permissions.
	Permissions []string `json:"permissions"`
	// Type of subject for the permission. Valid values are: `role` or `org`.
	SubjectType string `json:"subjectType"`
	// The identifier that belongs to the subject type chosen above. For e.g. if the subjectType is set to `role`, subjectId should be the identifier of a role.  Similarly, if the subjectType is `org`, the subjectId should be the identifier of the same org,  which owns the resource target.
	SubjectId string `json:"subjectId"`
	// The identifier that belongs to the resource this permission assignment applies to.
	TargetId string `json:"targetId"`
}

// NewPermissionStatementDefinition instantiates a new PermissionStatementDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionStatementDefinition(permissions []string, subjectType string, subjectId string, targetId string) *PermissionStatementDefinition {
	this := PermissionStatementDefinition{}
	this.Permissions = permissions
	this.SubjectType = subjectType
	this.SubjectId = subjectId
	this.TargetId = targetId
	return &this
}

// NewPermissionStatementDefinitionWithDefaults instantiates a new PermissionStatementDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionStatementDefinitionWithDefaults() *PermissionStatementDefinition {
	this := PermissionStatementDefinition{}
	return &this
}

// GetPermissions returns the Permissions field value
func (o *PermissionStatementDefinition) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *PermissionStatementDefinition) GetPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *PermissionStatementDefinition) SetPermissions(v []string) {
	o.Permissions = v
}

// GetSubjectType returns the SubjectType field value
func (o *PermissionStatementDefinition) GetSubjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value
// and a boolean to check if the value has been set.
func (o *PermissionStatementDefinition) GetSubjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectType, true
}

// SetSubjectType sets field value
func (o *PermissionStatementDefinition) SetSubjectType(v string) {
	o.SubjectType = v
}

// GetSubjectId returns the SubjectId field value
func (o *PermissionStatementDefinition) GetSubjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value
// and a boolean to check if the value has been set.
func (o *PermissionStatementDefinition) GetSubjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectId, true
}

// SetSubjectId sets field value
func (o *PermissionStatementDefinition) SetSubjectId(v string) {
	o.SubjectId = v
}

// GetTargetId returns the TargetId field value
func (o *PermissionStatementDefinition) GetTargetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *PermissionStatementDefinition) GetTargetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *PermissionStatementDefinition) SetTargetId(v string) {
	o.TargetId = v
}

func (o PermissionStatementDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionStatementDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permissions"] = o.Permissions
	toSerialize["subjectType"] = o.SubjectType
	toSerialize["subjectId"] = o.SubjectId
	toSerialize["targetId"] = o.TargetId
	return toSerialize, nil
}

type NullablePermissionStatementDefinition struct {
	value *PermissionStatementDefinition
	isSet bool
}

func (v NullablePermissionStatementDefinition) Get() *PermissionStatementDefinition {
	return v.value
}

func (v *NullablePermissionStatementDefinition) Set(val *PermissionStatementDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionStatementDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionStatementDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionStatementDefinition(val *PermissionStatementDefinition) *NullablePermissionStatementDefinition {
	return &NullablePermissionStatementDefinition{value: val, isSet: true}
}

func (v NullablePermissionStatementDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionStatementDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


