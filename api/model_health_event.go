/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
)

// checks if the HealthEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthEvent{}

// HealthEvent struct for HealthEvent
type HealthEvent struct {
	// The unique identifier of the event.
	EventId string `json:"eventId"`
	// The name of the event.
	EventName string `json:"eventName"`
	Details TrackerIdentity `json:"details"`
	ResourceIdentity ResourceIdentity `json:"resourceIdentity"`
	// Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
	EventTime time.Time `json:"eventTime"`
	// The product area of the event.
	Subsystem string `json:"subsystem"`
	// The criticality of the event. It is either `Error` or `Warning`
	SeverityLevel string `json:"severityLevel"`
}

// NewHealthEvent instantiates a new HealthEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthEvent(eventId string, eventName string, details TrackerIdentity, resourceIdentity ResourceIdentity, eventTime time.Time, subsystem string, severityLevel string) *HealthEvent {
	this := HealthEvent{}
	this.EventId = eventId
	this.EventName = eventName
	this.Details = details
	this.ResourceIdentity = resourceIdentity
	this.EventTime = eventTime
	this.Subsystem = subsystem
	this.SeverityLevel = severityLevel
	return &this
}

// NewHealthEventWithDefaults instantiates a new HealthEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthEventWithDefaults() *HealthEvent {
	this := HealthEvent{}
	return &this
}

// GetEventId returns the EventId field value
func (o *HealthEvent) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *HealthEvent) SetEventId(v string) {
	o.EventId = v
}

// GetEventName returns the EventName field value
func (o *HealthEvent) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *HealthEvent) SetEventName(v string) {
	o.EventName = v
}

// GetDetails returns the Details field value
func (o *HealthEvent) GetDetails() TrackerIdentity {
	if o == nil {
		var ret TrackerIdentity
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetDetailsOk() (*TrackerIdentity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *HealthEvent) SetDetails(v TrackerIdentity) {
	o.Details = v
}

// GetResourceIdentity returns the ResourceIdentity field value
func (o *HealthEvent) GetResourceIdentity() ResourceIdentity {
	if o == nil {
		var ret ResourceIdentity
		return ret
	}

	return o.ResourceIdentity
}

// GetResourceIdentityOk returns a tuple with the ResourceIdentity field value
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetResourceIdentityOk() (*ResourceIdentity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceIdentity, true
}

// SetResourceIdentity sets field value
func (o *HealthEvent) SetResourceIdentity(v ResourceIdentity) {
	o.ResourceIdentity = v
}

// GetEventTime returns the EventTime field value
func (o *HealthEvent) GetEventTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetEventTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTime, true
}

// SetEventTime sets field value
func (o *HealthEvent) SetEventTime(v time.Time) {
	o.EventTime = v
}

// GetSubsystem returns the Subsystem field value
func (o *HealthEvent) GetSubsystem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subsystem
}

// GetSubsystemOk returns a tuple with the Subsystem field value
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetSubsystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subsystem, true
}

// SetSubsystem sets field value
func (o *HealthEvent) SetSubsystem(v string) {
	o.Subsystem = v
}

// GetSeverityLevel returns the SeverityLevel field value
func (o *HealthEvent) GetSeverityLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeverityLevel
}

// GetSeverityLevelOk returns a tuple with the SeverityLevel field value
// and a boolean to check if the value has been set.
func (o *HealthEvent) GetSeverityLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeverityLevel, true
}

// SetSeverityLevel sets field value
func (o *HealthEvent) SetSeverityLevel(v string) {
	o.SeverityLevel = v
}

func (o HealthEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventId"] = o.EventId
	toSerialize["eventName"] = o.EventName
	toSerialize["details"] = o.Details
	toSerialize["resourceIdentity"] = o.ResourceIdentity
	toSerialize["eventTime"] = o.EventTime
	toSerialize["subsystem"] = o.Subsystem
	toSerialize["severityLevel"] = o.SeverityLevel
	return toSerialize, nil
}

type NullableHealthEvent struct {
	value *HealthEvent
	isSet bool
}

func (v NullableHealthEvent) Get() *HealthEvent {
	return v.value
}

func (v *NullableHealthEvent) Set(val *HealthEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthEvent(val *HealthEvent) *NullableHealthEvent {
	return &NullableHealthEvent{value: val, isSet: true}
}

func (v NullableHealthEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


