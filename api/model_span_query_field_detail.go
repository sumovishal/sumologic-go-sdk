/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// SpanQueryFieldDetail struct for SpanQueryFieldDetail
type SpanQueryFieldDetail struct {
	// Filter field name.
	Field string `json:"field"`
	// Indicates whether values for this field can be listed.
	ValueListing *bool `json:"valueListing,omitempty"`
	// Short description of the field.
	Description *string `json:"description,omitempty"`
	// The type the values of this field will have. Possible values: `DoubleTracingValue`, `IntegerTracingValue`, `StringTracingValue`, `DateTimeTracingValue`.
	Type string `json:"type"`
	NoValuesReason *NoTraceFieldValuesReason `json:"noValuesReason,omitempty"`
	// Indicates whether the field is available in the schema.
	InSchema bool `json:"inSchema"`
}

// NewSpanQueryFieldDetail instantiates a new SpanQueryFieldDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanQueryFieldDetail(field string, type_ string, inSchema bool) *SpanQueryFieldDetail {
	this := SpanQueryFieldDetail{}
	this.Field = field
	this.Type = type_
	this.InSchema = inSchema
	return &this
}

// NewSpanQueryFieldDetailWithDefaults instantiates a new SpanQueryFieldDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanQueryFieldDetailWithDefaults() *SpanQueryFieldDetail {
	this := SpanQueryFieldDetail{}
	return &this
}

// GetField returns the Field field value
func (o *SpanQueryFieldDetail) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *SpanQueryFieldDetail) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *SpanQueryFieldDetail) SetField(v string) {
	o.Field = v
}

// GetValueListing returns the ValueListing field value if set, zero value otherwise.
func (o *SpanQueryFieldDetail) GetValueListing() bool {
	if o == nil || o.ValueListing == nil {
		var ret bool
		return ret
	}
	return *o.ValueListing
}

// GetValueListingOk returns a tuple with the ValueListing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryFieldDetail) GetValueListingOk() (*bool, bool) {
	if o == nil || o.ValueListing == nil {
		return nil, false
	}
	return o.ValueListing, true
}

// HasValueListing returns a boolean if a field has been set.
func (o *SpanQueryFieldDetail) HasValueListing() bool {
	if o != nil && o.ValueListing != nil {
		return true
	}

	return false
}

// SetValueListing gets a reference to the given bool and assigns it to the ValueListing field.
func (o *SpanQueryFieldDetail) SetValueListing(v bool) {
	o.ValueListing = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SpanQueryFieldDetail) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryFieldDetail) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SpanQueryFieldDetail) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SpanQueryFieldDetail) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *SpanQueryFieldDetail) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SpanQueryFieldDetail) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SpanQueryFieldDetail) SetType(v string) {
	o.Type = v
}

// GetNoValuesReason returns the NoValuesReason field value if set, zero value otherwise.
func (o *SpanQueryFieldDetail) GetNoValuesReason() NoTraceFieldValuesReason {
	if o == nil || o.NoValuesReason == nil {
		var ret NoTraceFieldValuesReason
		return ret
	}
	return *o.NoValuesReason
}

// GetNoValuesReasonOk returns a tuple with the NoValuesReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryFieldDetail) GetNoValuesReasonOk() (*NoTraceFieldValuesReason, bool) {
	if o == nil || o.NoValuesReason == nil {
		return nil, false
	}
	return o.NoValuesReason, true
}

// HasNoValuesReason returns a boolean if a field has been set.
func (o *SpanQueryFieldDetail) HasNoValuesReason() bool {
	if o != nil && o.NoValuesReason != nil {
		return true
	}

	return false
}

// SetNoValuesReason gets a reference to the given NoTraceFieldValuesReason and assigns it to the NoValuesReason field.
func (o *SpanQueryFieldDetail) SetNoValuesReason(v NoTraceFieldValuesReason) {
	o.NoValuesReason = &v
}

// GetInSchema returns the InSchema field value
func (o *SpanQueryFieldDetail) GetInSchema() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InSchema
}

// GetInSchemaOk returns a tuple with the InSchema field value
// and a boolean to check if the value has been set.
func (o *SpanQueryFieldDetail) GetInSchemaOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InSchema, true
}

// SetInSchema sets field value
func (o *SpanQueryFieldDetail) SetInSchema(v bool) {
	o.InSchema = v
}

func (o SpanQueryFieldDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["field"] = o.Field
	}
	if o.ValueListing != nil {
		toSerialize["valueListing"] = o.ValueListing
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.NoValuesReason != nil {
		toSerialize["noValuesReason"] = o.NoValuesReason
	}
	if true {
		toSerialize["inSchema"] = o.InSchema
	}
	return json.Marshal(toSerialize)
}

type NullableSpanQueryFieldDetail struct {
	value *SpanQueryFieldDetail
	isSet bool
}

func (v NullableSpanQueryFieldDetail) Get() *SpanQueryFieldDetail {
	return v.value
}

func (v *NullableSpanQueryFieldDetail) Set(val *SpanQueryFieldDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanQueryFieldDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanQueryFieldDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanQueryFieldDetail(val *SpanQueryFieldDetail) *NullableSpanQueryFieldDetail {
	return &NullableSpanQueryFieldDetail{value: val, isSet: true}
}

func (v NullableSpanQueryFieldDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanQueryFieldDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


