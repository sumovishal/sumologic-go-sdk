/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the DashboardAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardAllOf{}

// DashboardAllOf struct for DashboardAllOf
type DashboardAllOf struct {
	// Unique identifier for the dashboard. This id is used to get detailed information about the dashboard, such as panels, variables and the layout. 
	Id *string `json:"id,omitempty"`
	// Content identifier for the dashboard. This id is used to connect to the Sumo Content Library and get general metadata about the dashboard. Use this id if you want to search for dashboards in Sumo folders. 
	ContentId *string `json:"contentId,omitempty"`
	// Scheduled report identifier for the dashboard. Only most recently modified report schedule is rerun per dashboard. This id is used to manage the schedule details through the scheduled report API. 
	ScheduleId *string `json:"scheduleId,omitempty"`
	// Count of report schedules for the dashboard.
	ScheduleCount *int32 `json:"scheduleCount,omitempty"`
}

// NewDashboardAllOf instantiates a new DashboardAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardAllOf() *DashboardAllOf {
	this := DashboardAllOf{}
	return &this
}

// NewDashboardAllOfWithDefaults instantiates a new DashboardAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardAllOfWithDefaults() *DashboardAllOf {
	this := DashboardAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DashboardAllOf) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardAllOf) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DashboardAllOf) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DashboardAllOf) SetId(v string) {
	o.Id = &v
}

// GetContentId returns the ContentId field value if set, zero value otherwise.
func (o *DashboardAllOf) GetContentId() string {
	if o == nil || IsNil(o.ContentId) {
		var ret string
		return ret
	}
	return *o.ContentId
}

// GetContentIdOk returns a tuple with the ContentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardAllOf) GetContentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContentId) {
		return nil, false
	}
	return o.ContentId, true
}

// HasContentId returns a boolean if a field has been set.
func (o *DashboardAllOf) HasContentId() bool {
	if o != nil && !IsNil(o.ContentId) {
		return true
	}

	return false
}

// SetContentId gets a reference to the given string and assigns it to the ContentId field.
func (o *DashboardAllOf) SetContentId(v string) {
	o.ContentId = &v
}

// GetScheduleId returns the ScheduleId field value if set, zero value otherwise.
func (o *DashboardAllOf) GetScheduleId() string {
	if o == nil || IsNil(o.ScheduleId) {
		var ret string
		return ret
	}
	return *o.ScheduleId
}

// GetScheduleIdOk returns a tuple with the ScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardAllOf) GetScheduleIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleId) {
		return nil, false
	}
	return o.ScheduleId, true
}

// HasScheduleId returns a boolean if a field has been set.
func (o *DashboardAllOf) HasScheduleId() bool {
	if o != nil && !IsNil(o.ScheduleId) {
		return true
	}

	return false
}

// SetScheduleId gets a reference to the given string and assigns it to the ScheduleId field.
func (o *DashboardAllOf) SetScheduleId(v string) {
	o.ScheduleId = &v
}

// GetScheduleCount returns the ScheduleCount field value if set, zero value otherwise.
func (o *DashboardAllOf) GetScheduleCount() int32 {
	if o == nil || IsNil(o.ScheduleCount) {
		var ret int32
		return ret
	}
	return *o.ScheduleCount
}

// GetScheduleCountOk returns a tuple with the ScheduleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardAllOf) GetScheduleCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ScheduleCount) {
		return nil, false
	}
	return o.ScheduleCount, true
}

// HasScheduleCount returns a boolean if a field has been set.
func (o *DashboardAllOf) HasScheduleCount() bool {
	if o != nil && !IsNil(o.ScheduleCount) {
		return true
	}

	return false
}

// SetScheduleCount gets a reference to the given int32 and assigns it to the ScheduleCount field.
func (o *DashboardAllOf) SetScheduleCount(v int32) {
	o.ScheduleCount = &v
}

func (o DashboardAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ContentId) {
		toSerialize["contentId"] = o.ContentId
	}
	if !IsNil(o.ScheduleId) {
		toSerialize["scheduleId"] = o.ScheduleId
	}
	if !IsNil(o.ScheduleCount) {
		toSerialize["scheduleCount"] = o.ScheduleCount
	}
	return toSerialize, nil
}

type NullableDashboardAllOf struct {
	value *DashboardAllOf
	isSet bool
}

func (v NullableDashboardAllOf) Get() *DashboardAllOf {
	return v.value
}

func (v *NullableDashboardAllOf) Set(val *DashboardAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardAllOf(val *DashboardAllOf) *NullableDashboardAllOf {
	return &NullableDashboardAllOf{value: val, isSet: true}
}

func (v NullableDashboardAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


