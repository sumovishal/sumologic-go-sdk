/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// LogsMissingDataConditionAllOf A rule that defines how logs monitors should evaluate missing data and trigger notifications.
type LogsMissingDataConditionAllOf struct {
	// The relative time range of the monitor. Valid values of time ranges are `5m`, `10m`, `15m`, `30m`, `1h`, `3h`, `6h`, `12h`, or `24h`.
	TimeRange string `json:"timeRange"`
}

// NewLogsMissingDataConditionAllOf instantiates a new LogsMissingDataConditionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsMissingDataConditionAllOf(timeRange string) *LogsMissingDataConditionAllOf {
	this := LogsMissingDataConditionAllOf{}
	this.TimeRange = timeRange
	return &this
}

// NewLogsMissingDataConditionAllOfWithDefaults instantiates a new LogsMissingDataConditionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsMissingDataConditionAllOfWithDefaults() *LogsMissingDataConditionAllOf {
	this := LogsMissingDataConditionAllOf{}
	return &this
}

// GetTimeRange returns the TimeRange field value
func (o *LogsMissingDataConditionAllOf) GetTimeRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *LogsMissingDataConditionAllOf) GetTimeRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *LogsMissingDataConditionAllOf) SetTimeRange(v string) {
	o.TimeRange = v
}

func (o LogsMissingDataConditionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timeRange"] = o.TimeRange
	}
	return json.Marshal(toSerialize)
}

type NullableLogsMissingDataConditionAllOf struct {
	value *LogsMissingDataConditionAllOf
	isSet bool
}

func (v NullableLogsMissingDataConditionAllOf) Get() *LogsMissingDataConditionAllOf {
	return v.value
}

func (v *NullableLogsMissingDataConditionAllOf) Set(val *LogsMissingDataConditionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsMissingDataConditionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsMissingDataConditionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsMissingDataConditionAllOf(val *LogsMissingDataConditionAllOf) *NullableLogsMissingDataConditionAllOf {
	return &NullableLogsMissingDataConditionAllOf{value: val, isSet: true}
}

func (v NullableLogsMissingDataConditionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsMissingDataConditionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


