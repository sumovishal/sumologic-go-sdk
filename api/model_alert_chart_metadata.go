/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AlertChartMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertChartMetadata{}

// AlertChartMetadata The metadata timestamps of alert chart data
type AlertChartMetadata struct {
	// The time stamp at which abnomarlity started.
	AbnormalityStartTime *int64 `json:"abnormalityStartTime,omitempty"`
	// The time stamp at which abnomarlity ended.
	AbnormalityEndTime *int64 `json:"abnormalityEndTime,omitempty"`
	// The delay duration for evaluating the monitor (relative to current time). The timerange of monitor will be shifted in the past by this delay time.
	EvaluationDelay *int64 `json:"evaluationDelay,omitempty"`
	// The time stamp at which the alert response page is created.
	AlertCreatedAt *int64 `json:"alertCreatedAt,omitempty"`
	// The time stamp at which the alert response page is resolved.
	AlertResolvedAt *int64 `json:"alertResolvedAt,omitempty"`
}

// NewAlertChartMetadata instantiates a new AlertChartMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertChartMetadata() *AlertChartMetadata {
	this := AlertChartMetadata{}
	return &this
}

// NewAlertChartMetadataWithDefaults instantiates a new AlertChartMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertChartMetadataWithDefaults() *AlertChartMetadata {
	this := AlertChartMetadata{}
	return &this
}

// GetAbnormalityStartTime returns the AbnormalityStartTime field value if set, zero value otherwise.
func (o *AlertChartMetadata) GetAbnormalityStartTime() int64 {
	if o == nil || IsNil(o.AbnormalityStartTime) {
		var ret int64
		return ret
	}
	return *o.AbnormalityStartTime
}

// GetAbnormalityStartTimeOk returns a tuple with the AbnormalityStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertChartMetadata) GetAbnormalityStartTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.AbnormalityStartTime) {
		return nil, false
	}
	return o.AbnormalityStartTime, true
}

// HasAbnormalityStartTime returns a boolean if a field has been set.
func (o *AlertChartMetadata) HasAbnormalityStartTime() bool {
	if o != nil && !IsNil(o.AbnormalityStartTime) {
		return true
	}

	return false
}

// SetAbnormalityStartTime gets a reference to the given int64 and assigns it to the AbnormalityStartTime field.
func (o *AlertChartMetadata) SetAbnormalityStartTime(v int64) {
	o.AbnormalityStartTime = &v
}

// GetAbnormalityEndTime returns the AbnormalityEndTime field value if set, zero value otherwise.
func (o *AlertChartMetadata) GetAbnormalityEndTime() int64 {
	if o == nil || IsNil(o.AbnormalityEndTime) {
		var ret int64
		return ret
	}
	return *o.AbnormalityEndTime
}

// GetAbnormalityEndTimeOk returns a tuple with the AbnormalityEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertChartMetadata) GetAbnormalityEndTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.AbnormalityEndTime) {
		return nil, false
	}
	return o.AbnormalityEndTime, true
}

// HasAbnormalityEndTime returns a boolean if a field has been set.
func (o *AlertChartMetadata) HasAbnormalityEndTime() bool {
	if o != nil && !IsNil(o.AbnormalityEndTime) {
		return true
	}

	return false
}

// SetAbnormalityEndTime gets a reference to the given int64 and assigns it to the AbnormalityEndTime field.
func (o *AlertChartMetadata) SetAbnormalityEndTime(v int64) {
	o.AbnormalityEndTime = &v
}

// GetEvaluationDelay returns the EvaluationDelay field value if set, zero value otherwise.
func (o *AlertChartMetadata) GetEvaluationDelay() int64 {
	if o == nil || IsNil(o.EvaluationDelay) {
		var ret int64
		return ret
	}
	return *o.EvaluationDelay
}

// GetEvaluationDelayOk returns a tuple with the EvaluationDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertChartMetadata) GetEvaluationDelayOk() (*int64, bool) {
	if o == nil || IsNil(o.EvaluationDelay) {
		return nil, false
	}
	return o.EvaluationDelay, true
}

// HasEvaluationDelay returns a boolean if a field has been set.
func (o *AlertChartMetadata) HasEvaluationDelay() bool {
	if o != nil && !IsNil(o.EvaluationDelay) {
		return true
	}

	return false
}

// SetEvaluationDelay gets a reference to the given int64 and assigns it to the EvaluationDelay field.
func (o *AlertChartMetadata) SetEvaluationDelay(v int64) {
	o.EvaluationDelay = &v
}

// GetAlertCreatedAt returns the AlertCreatedAt field value if set, zero value otherwise.
func (o *AlertChartMetadata) GetAlertCreatedAt() int64 {
	if o == nil || IsNil(o.AlertCreatedAt) {
		var ret int64
		return ret
	}
	return *o.AlertCreatedAt
}

// GetAlertCreatedAtOk returns a tuple with the AlertCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertChartMetadata) GetAlertCreatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.AlertCreatedAt) {
		return nil, false
	}
	return o.AlertCreatedAt, true
}

// HasAlertCreatedAt returns a boolean if a field has been set.
func (o *AlertChartMetadata) HasAlertCreatedAt() bool {
	if o != nil && !IsNil(o.AlertCreatedAt) {
		return true
	}

	return false
}

// SetAlertCreatedAt gets a reference to the given int64 and assigns it to the AlertCreatedAt field.
func (o *AlertChartMetadata) SetAlertCreatedAt(v int64) {
	o.AlertCreatedAt = &v
}

// GetAlertResolvedAt returns the AlertResolvedAt field value if set, zero value otherwise.
func (o *AlertChartMetadata) GetAlertResolvedAt() int64 {
	if o == nil || IsNil(o.AlertResolvedAt) {
		var ret int64
		return ret
	}
	return *o.AlertResolvedAt
}

// GetAlertResolvedAtOk returns a tuple with the AlertResolvedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertChartMetadata) GetAlertResolvedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.AlertResolvedAt) {
		return nil, false
	}
	return o.AlertResolvedAt, true
}

// HasAlertResolvedAt returns a boolean if a field has been set.
func (o *AlertChartMetadata) HasAlertResolvedAt() bool {
	if o != nil && !IsNil(o.AlertResolvedAt) {
		return true
	}

	return false
}

// SetAlertResolvedAt gets a reference to the given int64 and assigns it to the AlertResolvedAt field.
func (o *AlertChartMetadata) SetAlertResolvedAt(v int64) {
	o.AlertResolvedAt = &v
}

func (o AlertChartMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertChartMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbnormalityStartTime) {
		toSerialize["abnormalityStartTime"] = o.AbnormalityStartTime
	}
	if !IsNil(o.AbnormalityEndTime) {
		toSerialize["abnormalityEndTime"] = o.AbnormalityEndTime
	}
	if !IsNil(o.EvaluationDelay) {
		toSerialize["evaluationDelay"] = o.EvaluationDelay
	}
	if !IsNil(o.AlertCreatedAt) {
		toSerialize["alertCreatedAt"] = o.AlertCreatedAt
	}
	if !IsNil(o.AlertResolvedAt) {
		toSerialize["alertResolvedAt"] = o.AlertResolvedAt
	}
	return toSerialize, nil
}

type NullableAlertChartMetadata struct {
	value *AlertChartMetadata
	isSet bool
}

func (v NullableAlertChartMetadata) Get() *AlertChartMetadata {
	return v.value
}

func (v *NullableAlertChartMetadata) Set(val *AlertChartMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertChartMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertChartMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertChartMetadata(val *AlertChartMetadata) *NullableAlertChartMetadata {
	return &NullableAlertChartMetadata{value: val, isSet: true}
}

func (v NullableAlertChartMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertChartMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


