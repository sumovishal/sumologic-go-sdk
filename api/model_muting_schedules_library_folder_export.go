/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the MutingSchedulesLibraryFolderExport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MutingSchedulesLibraryFolderExport{}

// MutingSchedulesLibraryFolderExport struct for MutingSchedulesLibraryFolderExport
type MutingSchedulesLibraryFolderExport struct {
	MutingSchedulesLibraryBaseExport
	// The items in the folder. A multi-type list of types mutingschedule or folder.
	Children []MutingSchedulesLibraryBaseExport `json:"children,omitempty"`
}

// NewMutingSchedulesLibraryFolderExport instantiates a new MutingSchedulesLibraryFolderExport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMutingSchedulesLibraryFolderExport(name string, type_ string) *MutingSchedulesLibraryFolderExport {
	this := MutingSchedulesLibraryFolderExport{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewMutingSchedulesLibraryFolderExportWithDefaults instantiates a new MutingSchedulesLibraryFolderExport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMutingSchedulesLibraryFolderExportWithDefaults() *MutingSchedulesLibraryFolderExport {
	this := MutingSchedulesLibraryFolderExport{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *MutingSchedulesLibraryFolderExport) GetChildren() []MutingSchedulesLibraryBaseExport {
	if o == nil || IsNil(o.Children) {
		var ret []MutingSchedulesLibraryBaseExport
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutingSchedulesLibraryFolderExport) GetChildrenOk() ([]MutingSchedulesLibraryBaseExport, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *MutingSchedulesLibraryFolderExport) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []MutingSchedulesLibraryBaseExport and assigns it to the Children field.
func (o *MutingSchedulesLibraryFolderExport) SetChildren(v []MutingSchedulesLibraryBaseExport) {
	o.Children = v
}

func (o MutingSchedulesLibraryFolderExport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MutingSchedulesLibraryFolderExport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMutingSchedulesLibraryBaseExport, errMutingSchedulesLibraryBaseExport := json.Marshal(o.MutingSchedulesLibraryBaseExport)
	if errMutingSchedulesLibraryBaseExport != nil {
		return map[string]interface{}{}, errMutingSchedulesLibraryBaseExport
	}
	errMutingSchedulesLibraryBaseExport = json.Unmarshal([]byte(serializedMutingSchedulesLibraryBaseExport), &toSerialize)
	if errMutingSchedulesLibraryBaseExport != nil {
		return map[string]interface{}{}, errMutingSchedulesLibraryBaseExport
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

type NullableMutingSchedulesLibraryFolderExport struct {
	value *MutingSchedulesLibraryFolderExport
	isSet bool
}

func (v NullableMutingSchedulesLibraryFolderExport) Get() *MutingSchedulesLibraryFolderExport {
	return v.value
}

func (v *NullableMutingSchedulesLibraryFolderExport) Set(val *MutingSchedulesLibraryFolderExport) {
	v.value = val
	v.isSet = true
}

func (v NullableMutingSchedulesLibraryFolderExport) IsSet() bool {
	return v.isSet
}

func (v *NullableMutingSchedulesLibraryFolderExport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutingSchedulesLibraryFolderExport(val *MutingSchedulesLibraryFolderExport) *NullableMutingSchedulesLibraryFolderExport {
	return &NullableMutingSchedulesLibraryFolderExport{value: val, isSet: true}
}

func (v NullableMutingSchedulesLibraryFolderExport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutingSchedulesLibraryFolderExport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


