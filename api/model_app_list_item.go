/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// AppListItem struct for AppListItem
type AppListItem struct {
	// Type of the item. Can be `Dashboard`, `Report`, `Search`, `ScheduledSearch`, `MetricsSearch` or `Folder`.
	ItemType string `json:"itemType"`
	// Name of the item.
	Name string `json:"name"`
	// Description of the item.
	Description *string `json:"description,omitempty"`
	// Search query for the item. Applicable only for `Search`, `ScheduledSearch` and `MetricsSearch` itemType.
	Query *string `json:"query,omitempty"`
	// URL for the screenshot of the item. Applicable only for `Dashboard` and `Report` itemType.
	ScreenshotUrl *string `json:"screenshotUrl,omitempty"`
	// Panels associated with the item. Applicable only for `Dashboard` and `Report` itemType.
	Panels []PanelItem `json:"panels,omitempty"`
	// Child content items. Applicable only for `Folder` itemType.
	Children []AppListItem `json:"children,omitempty"`
}

// NewAppListItem instantiates a new AppListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppListItem(itemType string, name string) *AppListItem {
	this := AppListItem{}
	this.ItemType = itemType
	this.Name = name
	return &this
}

// NewAppListItemWithDefaults instantiates a new AppListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppListItemWithDefaults() *AppListItem {
	this := AppListItem{}
	return &this
}

// GetItemType returns the ItemType field value
func (o *AppListItem) GetItemType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value
// and a boolean to check if the value has been set.
func (o *AppListItem) GetItemTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemType, true
}

// SetItemType sets field value
func (o *AppListItem) SetItemType(v string) {
	o.ItemType = v
}

// GetName returns the Name field value
func (o *AppListItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppListItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppListItem) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AppListItem) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppListItem) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AppListItem) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AppListItem) SetDescription(v string) {
	o.Description = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *AppListItem) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppListItem) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *AppListItem) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *AppListItem) SetQuery(v string) {
	o.Query = &v
}

// GetScreenshotUrl returns the ScreenshotUrl field value if set, zero value otherwise.
func (o *AppListItem) GetScreenshotUrl() string {
	if o == nil || o.ScreenshotUrl == nil {
		var ret string
		return ret
	}
	return *o.ScreenshotUrl
}

// GetScreenshotUrlOk returns a tuple with the ScreenshotUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppListItem) GetScreenshotUrlOk() (*string, bool) {
	if o == nil || o.ScreenshotUrl == nil {
		return nil, false
	}
	return o.ScreenshotUrl, true
}

// HasScreenshotUrl returns a boolean if a field has been set.
func (o *AppListItem) HasScreenshotUrl() bool {
	if o != nil && o.ScreenshotUrl != nil {
		return true
	}

	return false
}

// SetScreenshotUrl gets a reference to the given string and assigns it to the ScreenshotUrl field.
func (o *AppListItem) SetScreenshotUrl(v string) {
	o.ScreenshotUrl = &v
}

// GetPanels returns the Panels field value if set, zero value otherwise.
func (o *AppListItem) GetPanels() []PanelItem {
	if o == nil || o.Panels == nil {
		var ret []PanelItem
		return ret
	}
	return o.Panels
}

// GetPanelsOk returns a tuple with the Panels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppListItem) GetPanelsOk() ([]PanelItem, bool) {
	if o == nil || o.Panels == nil {
		return nil, false
	}
	return o.Panels, true
}

// HasPanels returns a boolean if a field has been set.
func (o *AppListItem) HasPanels() bool {
	if o != nil && o.Panels != nil {
		return true
	}

	return false
}

// SetPanels gets a reference to the given []PanelItem and assigns it to the Panels field.
func (o *AppListItem) SetPanels(v []PanelItem) {
	o.Panels = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *AppListItem) GetChildren() []AppListItem {
	if o == nil || o.Children == nil {
		var ret []AppListItem
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppListItem) GetChildrenOk() ([]AppListItem, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *AppListItem) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []AppListItem and assigns it to the Children field.
func (o *AppListItem) SetChildren(v []AppListItem) {
	o.Children = v
}

func (o AppListItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["itemType"] = o.ItemType
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.ScreenshotUrl != nil {
		toSerialize["screenshotUrl"] = o.ScreenshotUrl
	}
	if o.Panels != nil {
		toSerialize["panels"] = o.Panels
	}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	return json.Marshal(toSerialize)
}

type NullableAppListItem struct {
	value *AppListItem
	isSet bool
}

func (v NullableAppListItem) Get() *AppListItem {
	return v.value
}

func (v *NullableAppListItem) Set(val *AppListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAppListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAppListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppListItem(val *AppListItem) *NullableAppListItem {
	return &NullableAppListItem{value: val, isSet: true}
}

func (v NullableAppListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


