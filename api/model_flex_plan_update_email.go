/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FlexPlanUpdateEmail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlexPlanUpdateEmail{}

// FlexPlanUpdateEmail details of the flex plan for updating with contact information
type FlexPlanUpdateEmail struct {
	// email id on which support team will contact on
	EmailId string `json:"emailId"`
	// contact number on which support team can call user
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// option details the user might want to inform
	Details *string `json:"details,omitempty"`
}

type _FlexPlanUpdateEmail FlexPlanUpdateEmail

// NewFlexPlanUpdateEmail instantiates a new FlexPlanUpdateEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlexPlanUpdateEmail(emailId string) *FlexPlanUpdateEmail {
	this := FlexPlanUpdateEmail{}
	this.EmailId = emailId
	return &this
}

// NewFlexPlanUpdateEmailWithDefaults instantiates a new FlexPlanUpdateEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlexPlanUpdateEmailWithDefaults() *FlexPlanUpdateEmail {
	this := FlexPlanUpdateEmail{}
	return &this
}

// GetEmailId returns the EmailId field value
func (o *FlexPlanUpdateEmail) GetEmailId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailId
}

// GetEmailIdOk returns a tuple with the EmailId field value
// and a boolean to check if the value has been set.
func (o *FlexPlanUpdateEmail) GetEmailIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailId, true
}

// SetEmailId sets field value
func (o *FlexPlanUpdateEmail) SetEmailId(v string) {
	o.EmailId = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *FlexPlanUpdateEmail) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexPlanUpdateEmail) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *FlexPlanUpdateEmail) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *FlexPlanUpdateEmail) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *FlexPlanUpdateEmail) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexPlanUpdateEmail) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *FlexPlanUpdateEmail) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *FlexPlanUpdateEmail) SetDetails(v string) {
	o.Details = &v
}

func (o FlexPlanUpdateEmail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlexPlanUpdateEmail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emailId"] = o.EmailId
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

func (o *FlexPlanUpdateEmail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"emailId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFlexPlanUpdateEmail := _FlexPlanUpdateEmail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFlexPlanUpdateEmail)

	if err != nil {
		return err
	}

	*o = FlexPlanUpdateEmail(varFlexPlanUpdateEmail)

	return err
}

type NullableFlexPlanUpdateEmail struct {
	value *FlexPlanUpdateEmail
	isSet bool
}

func (v NullableFlexPlanUpdateEmail) Get() *FlexPlanUpdateEmail {
	return v.value
}

func (v *NullableFlexPlanUpdateEmail) Set(val *FlexPlanUpdateEmail) {
	v.value = val
	v.isSet = true
}

func (v NullableFlexPlanUpdateEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableFlexPlanUpdateEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlexPlanUpdateEmail(val *FlexPlanUpdateEmail) *NullableFlexPlanUpdateEmail {
	return &NullableFlexPlanUpdateEmail{value: val, isSet: true}
}

func (v NullableFlexPlanUpdateEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlexPlanUpdateEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


