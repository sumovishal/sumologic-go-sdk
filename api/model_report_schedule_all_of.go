/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReportScheduleAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportScheduleAllOf{}

// ReportScheduleAllOf struct for ReportScheduleAllOf
type ReportScheduleAllOf struct {
	// Identifier of the dashboard report schedule.
	ScheduleId *string `json:"scheduleId,omitempty"`
}

// NewReportScheduleAllOf instantiates a new ReportScheduleAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportScheduleAllOf() *ReportScheduleAllOf {
	this := ReportScheduleAllOf{}
	return &this
}

// NewReportScheduleAllOfWithDefaults instantiates a new ReportScheduleAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportScheduleAllOfWithDefaults() *ReportScheduleAllOf {
	this := ReportScheduleAllOf{}
	return &this
}

// GetScheduleId returns the ScheduleId field value if set, zero value otherwise.
func (o *ReportScheduleAllOf) GetScheduleId() string {
	if o == nil || IsNil(o.ScheduleId) {
		var ret string
		return ret
	}
	return *o.ScheduleId
}

// GetScheduleIdOk returns a tuple with the ScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportScheduleAllOf) GetScheduleIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleId) {
		return nil, false
	}
	return o.ScheduleId, true
}

// HasScheduleId returns a boolean if a field has been set.
func (o *ReportScheduleAllOf) HasScheduleId() bool {
	if o != nil && !IsNil(o.ScheduleId) {
		return true
	}

	return false
}

// SetScheduleId gets a reference to the given string and assigns it to the ScheduleId field.
func (o *ReportScheduleAllOf) SetScheduleId(v string) {
	o.ScheduleId = &v
}

func (o ReportScheduleAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportScheduleAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScheduleId) {
		toSerialize["scheduleId"] = o.ScheduleId
	}
	return toSerialize, nil
}

type NullableReportScheduleAllOf struct {
	value *ReportScheduleAllOf
	isSet bool
}

func (v NullableReportScheduleAllOf) Get() *ReportScheduleAllOf {
	return v.value
}

func (v *NullableReportScheduleAllOf) Set(val *ReportScheduleAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReportScheduleAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReportScheduleAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportScheduleAllOf(val *ReportScheduleAllOf) *NullableReportScheduleAllOf {
	return &NullableReportScheduleAllOf{value: val, isSet: true}
}

func (v NullableReportScheduleAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportScheduleAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


