/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AggregationQueryRowStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregationQueryRowStatus{}

// AggregationQueryRowStatus struct for AggregationQueryRowStatus
type AggregationQueryRowStatus struct {
	// A unique identifier of the query.
	RowId string `json:"rowId"`
	// Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Canceled`.
	Status string `json:"status" validate:"regexp=^(Processing|Finished|Error|Canceled)$"`
	// Descriptive message of the status.
	StatusMessage *string `json:"statusMessage,omitempty"`
}

type _AggregationQueryRowStatus AggregationQueryRowStatus

// NewAggregationQueryRowStatus instantiates a new AggregationQueryRowStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregationQueryRowStatus(rowId string, status string) *AggregationQueryRowStatus {
	this := AggregationQueryRowStatus{}
	this.RowId = rowId
	this.Status = status
	return &this
}

// NewAggregationQueryRowStatusWithDefaults instantiates a new AggregationQueryRowStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregationQueryRowStatusWithDefaults() *AggregationQueryRowStatus {
	this := AggregationQueryRowStatus{}
	return &this
}

// GetRowId returns the RowId field value
func (o *AggregationQueryRowStatus) GetRowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowId
}

// GetRowIdOk returns a tuple with the RowId field value
// and a boolean to check if the value has been set.
func (o *AggregationQueryRowStatus) GetRowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowId, true
}

// SetRowId sets field value
func (o *AggregationQueryRowStatus) SetRowId(v string) {
	o.RowId = v
}

// GetStatus returns the Status field value
func (o *AggregationQueryRowStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AggregationQueryRowStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AggregationQueryRowStatus) SetStatus(v string) {
	o.Status = v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *AggregationQueryRowStatus) GetStatusMessage() string {
	if o == nil || IsNil(o.StatusMessage) {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregationQueryRowStatus) GetStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StatusMessage) {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *AggregationQueryRowStatus) HasStatusMessage() bool {
	if o != nil && !IsNil(o.StatusMessage) {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *AggregationQueryRowStatus) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

func (o AggregationQueryRowStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregationQueryRowStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowId"] = o.RowId
	toSerialize["status"] = o.Status
	if !IsNil(o.StatusMessage) {
		toSerialize["statusMessage"] = o.StatusMessage
	}
	return toSerialize, nil
}

func (o *AggregationQueryRowStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rowId",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAggregationQueryRowStatus := _AggregationQueryRowStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAggregationQueryRowStatus)

	if err != nil {
		return err
	}

	*o = AggregationQueryRowStatus(varAggregationQueryRowStatus)

	return err
}

type NullableAggregationQueryRowStatus struct {
	value *AggregationQueryRowStatus
	isSet bool
}

func (v NullableAggregationQueryRowStatus) Get() *AggregationQueryRowStatus {
	return v.value
}

func (v *NullableAggregationQueryRowStatus) Set(val *AggregationQueryRowStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationQueryRowStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationQueryRowStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationQueryRowStatus(val *AggregationQueryRowStatus) *NullableAggregationQueryRowStatus {
	return &NullableAggregationQueryRowStatus{value: val, isSet: true}
}

func (v NullableAggregationQueryRowStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationQueryRowStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


