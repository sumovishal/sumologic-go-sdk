/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetricsStaticCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsStaticCondition{}

// MetricsStaticCondition struct for MetricsStaticCondition
type MetricsStaticCondition struct {
	TriggerCondition
	// The relative time range of the monitor. Valid values of time ranges are `-5m`, `-10m`, `-15m`, `-30m`, `-1h`, `-3h`, `-6h`, `-12h`, or `-24h`.
	TimeRange string `json:"timeRange"`
	// The data value for the condition. This defines the threshold for when to trigger. Threshold value is not applicable for `MissingData` and `ResolvedMissingData` triggerTypes and will be ignored if specified.
	Threshold float64 `json:"threshold"`
	// The comparison type for the `threshold` evaluation. This defines how you want the data value compared. Valid values:   1. `LessThan`: Less than than the configured threshold.   2. `GreaterThan`: Greater than the configured threshold.   3. `LessThanOrEqual`: Less than or equal to the configured threshold.   4. `GreaterThanOrEqual`: Greater than or equal to the configured threshold. ThresholdType value is not applicable for `MissingData` and `ResolvedMissingData` triggerTypes and will be ignored if specified.
	ThresholdType string `json:"thresholdType" validate:"regexp=^(LessThan|GreaterThan|LessThanOrEqual|GreaterThanOrEqual)$"`
	// The criteria to evaluate the threshold and thresholdType in the given time range. Valid values:   1. `AtLeastOnce`: Trigger if the threshold is met at least once. (NOTE: This is the only valid value if monitorType is `Metrics`.)   2. `Always`: Trigger if the threshold is met continuously. (NOTE: This is the only valid value if monitorType is `Metrics`.)   3. `ResultCount`: Trigger if the threshold is met against the count of results. (NOTE: This is the only valid value if monitorType is `Logs`.)   4. `MissingData`: Trigger if the data is missing. (NOTE: This is valid for both `Logs` and `Metrics` monitorTypes)
	OccurrenceType string `json:"occurrenceType" validate:"regexp=^(AtLeastOnce|Always|ResultCount|MissingData)$"`
	// The minimum number of data points required for the monitor to alert or resolve within the time range specified. This field will always be set to 1 for `AtleastOnce` occurrence type and for `Always`, if not specified by user it will default to 2.
	MinDataPoints *int32 `json:"minDataPoints,omitempty"`
}

type _MetricsStaticCondition MetricsStaticCondition

// NewMetricsStaticCondition instantiates a new MetricsStaticCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsStaticCondition(timeRange string, threshold float64, thresholdType string, occurrenceType string, triggerType string) *MetricsStaticCondition {
	this := MetricsStaticCondition{}
	var detectionMethod string = "StaticCondition"
	this.DetectionMethod = &detectionMethod
	this.TriggerType = triggerType
	this.TimeRange = timeRange
	this.Threshold = threshold
	this.ThresholdType = thresholdType
	this.OccurrenceType = occurrenceType
	return &this
}

// NewMetricsStaticConditionWithDefaults instantiates a new MetricsStaticCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsStaticConditionWithDefaults() *MetricsStaticCondition {
	this := MetricsStaticCondition{}
	var threshold float64 = 0.0
	this.Threshold = threshold
	var thresholdType string = "GreaterThanOrEqual"
	this.ThresholdType = thresholdType
	return &this
}

// GetTimeRange returns the TimeRange field value
func (o *MetricsStaticCondition) GetTimeRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *MetricsStaticCondition) GetTimeRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *MetricsStaticCondition) SetTimeRange(v string) {
	o.TimeRange = v
}

// GetThreshold returns the Threshold field value
func (o *MetricsStaticCondition) GetThreshold() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *MetricsStaticCondition) GetThresholdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *MetricsStaticCondition) SetThreshold(v float64) {
	o.Threshold = v
}

// GetThresholdType returns the ThresholdType field value
func (o *MetricsStaticCondition) GetThresholdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThresholdType
}

// GetThresholdTypeOk returns a tuple with the ThresholdType field value
// and a boolean to check if the value has been set.
func (o *MetricsStaticCondition) GetThresholdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThresholdType, true
}

// SetThresholdType sets field value
func (o *MetricsStaticCondition) SetThresholdType(v string) {
	o.ThresholdType = v
}

// GetOccurrenceType returns the OccurrenceType field value
func (o *MetricsStaticCondition) GetOccurrenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OccurrenceType
}

// GetOccurrenceTypeOk returns a tuple with the OccurrenceType field value
// and a boolean to check if the value has been set.
func (o *MetricsStaticCondition) GetOccurrenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OccurrenceType, true
}

// SetOccurrenceType sets field value
func (o *MetricsStaticCondition) SetOccurrenceType(v string) {
	o.OccurrenceType = v
}

// GetMinDataPoints returns the MinDataPoints field value if set, zero value otherwise.
func (o *MetricsStaticCondition) GetMinDataPoints() int32 {
	if o == nil || IsNil(o.MinDataPoints) {
		var ret int32
		return ret
	}
	return *o.MinDataPoints
}

// GetMinDataPointsOk returns a tuple with the MinDataPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsStaticCondition) GetMinDataPointsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinDataPoints) {
		return nil, false
	}
	return o.MinDataPoints, true
}

// HasMinDataPoints returns a boolean if a field has been set.
func (o *MetricsStaticCondition) HasMinDataPoints() bool {
	if o != nil && !IsNil(o.MinDataPoints) {
		return true
	}

	return false
}

// SetMinDataPoints gets a reference to the given int32 and assigns it to the MinDataPoints field.
func (o *MetricsStaticCondition) SetMinDataPoints(v int32) {
	o.MinDataPoints = &v
}

func (o MetricsStaticCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsStaticCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTriggerCondition, errTriggerCondition := json.Marshal(o.TriggerCondition)
	if errTriggerCondition != nil {
		return map[string]interface{}{}, errTriggerCondition
	}
	errTriggerCondition = json.Unmarshal([]byte(serializedTriggerCondition), &toSerialize)
	if errTriggerCondition != nil {
		return map[string]interface{}{}, errTriggerCondition
	}
	toSerialize["timeRange"] = o.TimeRange
	toSerialize["threshold"] = o.Threshold
	toSerialize["thresholdType"] = o.ThresholdType
	toSerialize["occurrenceType"] = o.OccurrenceType
	if !IsNil(o.MinDataPoints) {
		toSerialize["minDataPoints"] = o.MinDataPoints
	}
	return toSerialize, nil
}

func (o *MetricsStaticCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timeRange",
		"threshold",
		"thresholdType",
		"occurrenceType",
		"triggerType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricsStaticCondition := _MetricsStaticCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricsStaticCondition)

	if err != nil {
		return err
	}

	*o = MetricsStaticCondition(varMetricsStaticCondition)

	return err
}

type NullableMetricsStaticCondition struct {
	value *MetricsStaticCondition
	isSet bool
}

func (v NullableMetricsStaticCondition) Get() *MetricsStaticCondition {
	return v.value
}

func (v *NullableMetricsStaticCondition) Set(val *MetricsStaticCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsStaticCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsStaticCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsStaticCondition(val *MetricsStaticCondition) *NullableMetricsStaticCondition {
	return &NullableMetricsStaticCondition{value: val, isSet: true}
}

func (v NullableMetricsStaticCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsStaticCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


