/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the MonitorUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorUsage{}

// MonitorUsage The usage info of monitors.
type MonitorUsage struct {
	// The type of monitor usage info (Logs or Metrics).
	MonitorType *string `json:"monitorType,omitempty"`
	// Current number of active Logs/Metrics monitors.
	Usage *int32 `json:"usage,omitempty"`
	// The limit of active Logs/Metrics monitors.
	Limit *int32 `json:"limit,omitempty"`
	// The total number of monitors created. (Including both active and disabled Logs/Metrics monitors)
	Total *int32 `json:"total,omitempty"`
}

// NewMonitorUsage instantiates a new MonitorUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorUsage() *MonitorUsage {
	this := MonitorUsage{}
	return &this
}

// NewMonitorUsageWithDefaults instantiates a new MonitorUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorUsageWithDefaults() *MonitorUsage {
	this := MonitorUsage{}
	return &this
}

// GetMonitorType returns the MonitorType field value if set, zero value otherwise.
func (o *MonitorUsage) GetMonitorType() string {
	if o == nil || IsNil(o.MonitorType) {
		var ret string
		return ret
	}
	return *o.MonitorType
}

// GetMonitorTypeOk returns a tuple with the MonitorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorUsage) GetMonitorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MonitorType) {
		return nil, false
	}
	return o.MonitorType, true
}

// HasMonitorType returns a boolean if a field has been set.
func (o *MonitorUsage) HasMonitorType() bool {
	if o != nil && !IsNil(o.MonitorType) {
		return true
	}

	return false
}

// SetMonitorType gets a reference to the given string and assigns it to the MonitorType field.
func (o *MonitorUsage) SetMonitorType(v string) {
	o.MonitorType = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *MonitorUsage) GetUsage() int32 {
	if o == nil || IsNil(o.Usage) {
		var ret int32
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorUsage) GetUsageOk() (*int32, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *MonitorUsage) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given int32 and assigns it to the Usage field.
func (o *MonitorUsage) SetUsage(v int32) {
	o.Usage = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *MonitorUsage) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorUsage) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *MonitorUsage) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *MonitorUsage) SetLimit(v int32) {
	o.Limit = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *MonitorUsage) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorUsage) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *MonitorUsage) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *MonitorUsage) SetTotal(v int32) {
	o.Total = &v
}

func (o MonitorUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MonitorType) {
		toSerialize["monitorType"] = o.MonitorType
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableMonitorUsage struct {
	value *MonitorUsage
	isSet bool
}

func (v NullableMonitorUsage) Get() *MonitorUsage {
	return v.value
}

func (v *NullableMonitorUsage) Set(val *MonitorUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorUsage(val *MonitorUsage) *NullableMonitorUsage {
	return &NullableMonitorUsage{value: val, isSet: true}
}

func (v NullableMonitorUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


