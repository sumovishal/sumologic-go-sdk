/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PermissionStatementDefinitions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionStatementDefinitions{}

// PermissionStatementDefinitions struct for PermissionStatementDefinitions
type PermissionStatementDefinitions struct {
	// List of permission statement definitions.
	PermissionStatementDefinitions []PermissionStatementDefinition `json:"permissionStatementDefinitions"`
}

// NewPermissionStatementDefinitions instantiates a new PermissionStatementDefinitions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionStatementDefinitions(permissionStatementDefinitions []PermissionStatementDefinition) *PermissionStatementDefinitions {
	this := PermissionStatementDefinitions{}
	this.PermissionStatementDefinitions = permissionStatementDefinitions
	return &this
}

// NewPermissionStatementDefinitionsWithDefaults instantiates a new PermissionStatementDefinitions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionStatementDefinitionsWithDefaults() *PermissionStatementDefinitions {
	this := PermissionStatementDefinitions{}
	return &this
}

// GetPermissionStatementDefinitions returns the PermissionStatementDefinitions field value
func (o *PermissionStatementDefinitions) GetPermissionStatementDefinitions() []PermissionStatementDefinition {
	if o == nil {
		var ret []PermissionStatementDefinition
		return ret
	}

	return o.PermissionStatementDefinitions
}

// GetPermissionStatementDefinitionsOk returns a tuple with the PermissionStatementDefinitions field value
// and a boolean to check if the value has been set.
func (o *PermissionStatementDefinitions) GetPermissionStatementDefinitionsOk() ([]PermissionStatementDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.PermissionStatementDefinitions, true
}

// SetPermissionStatementDefinitions sets field value
func (o *PermissionStatementDefinitions) SetPermissionStatementDefinitions(v []PermissionStatementDefinition) {
	o.PermissionStatementDefinitions = v
}

func (o PermissionStatementDefinitions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionStatementDefinitions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permissionStatementDefinitions"] = o.PermissionStatementDefinitions
	return toSerialize, nil
}

type NullablePermissionStatementDefinitions struct {
	value *PermissionStatementDefinitions
	isSet bool
}

func (v NullablePermissionStatementDefinitions) Get() *PermissionStatementDefinitions {
	return v.value
}

func (v *NullablePermissionStatementDefinitions) Set(val *PermissionStatementDefinitions) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionStatementDefinitions) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionStatementDefinitions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionStatementDefinitions(val *PermissionStatementDefinitions) *NullablePermissionStatementDefinitions {
	return &NullablePermissionStatementDefinitions{value: val, isSet: true}
}

func (v NullablePermissionStatementDefinitions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionStatementDefinitions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


