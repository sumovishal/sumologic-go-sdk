/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OperatorData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperatorData{}

// OperatorData The operator data for metrics query.
type OperatorData struct {
	// The name of the metrics operator.
	OperatorName string `json:"operatorName"`
	// A list of operator parameters for the operator data.
	Parameters []OperatorParameter `json:"parameters"`
}

type _OperatorData OperatorData

// NewOperatorData instantiates a new OperatorData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperatorData(operatorName string, parameters []OperatorParameter) *OperatorData {
	this := OperatorData{}
	this.OperatorName = operatorName
	this.Parameters = parameters
	return &this
}

// NewOperatorDataWithDefaults instantiates a new OperatorData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperatorDataWithDefaults() *OperatorData {
	this := OperatorData{}
	return &this
}

// GetOperatorName returns the OperatorName field value
func (o *OperatorData) GetOperatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OperatorName
}

// GetOperatorNameOk returns a tuple with the OperatorName field value
// and a boolean to check if the value has been set.
func (o *OperatorData) GetOperatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperatorName, true
}

// SetOperatorName sets field value
func (o *OperatorData) SetOperatorName(v string) {
	o.OperatorName = v
}

// GetParameters returns the Parameters field value
func (o *OperatorData) GetParameters() []OperatorParameter {
	if o == nil {
		var ret []OperatorParameter
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *OperatorData) GetParametersOk() ([]OperatorParameter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parameters, true
}

// SetParameters sets field value
func (o *OperatorData) SetParameters(v []OperatorParameter) {
	o.Parameters = v
}

func (o OperatorData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperatorData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operatorName"] = o.OperatorName
	toSerialize["parameters"] = o.Parameters
	return toSerialize, nil
}

func (o *OperatorData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operatorName",
		"parameters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOperatorData := _OperatorData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOperatorData)

	if err != nil {
		return err
	}

	*o = OperatorData(varOperatorData)

	return err
}

type NullableOperatorData struct {
	value *OperatorData
	isSet bool
}

func (v NullableOperatorData) Get() *OperatorData {
	return v.value
}

func (v *NullableOperatorData) Set(val *OperatorData) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatorData) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatorData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatorData(val *OperatorData) *NullableOperatorData {
	return &NullableOperatorData{value: val, isSet: true}
}

func (v NullableOperatorData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatorData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


