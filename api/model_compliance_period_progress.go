/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
)

// checks if the CompliancePeriodProgress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompliancePeriodProgress{}

// CompliancePeriodProgress SLO data availability progress of a compliance period.
type CompliancePeriodProgress struct {
	// Relative shift of compliance period from the latest/current compliance period.
	RelativeReference int32 `json:"relativeReference"`
	// Start time of the compliance period.
	StartTime time.Time `json:"startTime"`
	// End time of the compliance period.
	EndTime time.Time `json:"endTime"`
	// SLO data availability progress.
	Progress float64 `json:"progress"`
	// Whether a permanent error is encountered and no further progress is expected.
	IrrecoverableError bool `json:"irrecoverableError"`
}

// NewCompliancePeriodProgress instantiates a new CompliancePeriodProgress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompliancePeriodProgress(relativeReference int32, startTime time.Time, endTime time.Time, progress float64, irrecoverableError bool) *CompliancePeriodProgress {
	this := CompliancePeriodProgress{}
	this.RelativeReference = relativeReference
	this.StartTime = startTime
	this.EndTime = endTime
	this.Progress = progress
	this.IrrecoverableError = irrecoverableError
	return &this
}

// NewCompliancePeriodProgressWithDefaults instantiates a new CompliancePeriodProgress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompliancePeriodProgressWithDefaults() *CompliancePeriodProgress {
	this := CompliancePeriodProgress{}
	return &this
}

// GetRelativeReference returns the RelativeReference field value
func (o *CompliancePeriodProgress) GetRelativeReference() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RelativeReference
}

// GetRelativeReferenceOk returns a tuple with the RelativeReference field value
// and a boolean to check if the value has been set.
func (o *CompliancePeriodProgress) GetRelativeReferenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelativeReference, true
}

// SetRelativeReference sets field value
func (o *CompliancePeriodProgress) SetRelativeReference(v int32) {
	o.RelativeReference = v
}

// GetStartTime returns the StartTime field value
func (o *CompliancePeriodProgress) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *CompliancePeriodProgress) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *CompliancePeriodProgress) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *CompliancePeriodProgress) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *CompliancePeriodProgress) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *CompliancePeriodProgress) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetProgress returns the Progress field value
func (o *CompliancePeriodProgress) GetProgress() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Progress
}

// GetProgressOk returns a tuple with the Progress field value
// and a boolean to check if the value has been set.
func (o *CompliancePeriodProgress) GetProgressOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Progress, true
}

// SetProgress sets field value
func (o *CompliancePeriodProgress) SetProgress(v float64) {
	o.Progress = v
}

// GetIrrecoverableError returns the IrrecoverableError field value
func (o *CompliancePeriodProgress) GetIrrecoverableError() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IrrecoverableError
}

// GetIrrecoverableErrorOk returns a tuple with the IrrecoverableError field value
// and a boolean to check if the value has been set.
func (o *CompliancePeriodProgress) GetIrrecoverableErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IrrecoverableError, true
}

// SetIrrecoverableError sets field value
func (o *CompliancePeriodProgress) SetIrrecoverableError(v bool) {
	o.IrrecoverableError = v
}

func (o CompliancePeriodProgress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompliancePeriodProgress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["relativeReference"] = o.RelativeReference
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	toSerialize["progress"] = o.Progress
	toSerialize["irrecoverableError"] = o.IrrecoverableError
	return toSerialize, nil
}

type NullableCompliancePeriodProgress struct {
	value *CompliancePeriodProgress
	isSet bool
}

func (v NullableCompliancePeriodProgress) Get() *CompliancePeriodProgress {
	return v.value
}

func (v *NullableCompliancePeriodProgress) Set(val *CompliancePeriodProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableCompliancePeriodProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableCompliancePeriodProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompliancePeriodProgress(val *CompliancePeriodProgress) *NullableCompliancePeriodProgress {
	return &NullableCompliancePeriodProgress{value: val, isSet: true}
}

func (v NullableCompliancePeriodProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompliancePeriodProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


