/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the IntegerArrayEventAttributeValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegerArrayEventAttributeValue{}

// IntegerArrayEventAttributeValue struct for IntegerArrayEventAttributeValue
type IntegerArrayEventAttributeValue struct {
	EventAttributeValue
	Values []int64 `json:"values"`
}

// NewIntegerArrayEventAttributeValue instantiates a new IntegerArrayEventAttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegerArrayEventAttributeValue(values []int64, type_ string) *IntegerArrayEventAttributeValue {
	this := IntegerArrayEventAttributeValue{}
	this.Type = type_
	this.Values = values
	return &this
}

// NewIntegerArrayEventAttributeValueWithDefaults instantiates a new IntegerArrayEventAttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegerArrayEventAttributeValueWithDefaults() *IntegerArrayEventAttributeValue {
	this := IntegerArrayEventAttributeValue{}
	return &this
}

// GetValues returns the Values field value
func (o *IntegerArrayEventAttributeValue) GetValues() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *IntegerArrayEventAttributeValue) GetValuesOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *IntegerArrayEventAttributeValue) SetValues(v []int64) {
	o.Values = v
}

func (o IntegerArrayEventAttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegerArrayEventAttributeValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEventAttributeValue, errEventAttributeValue := json.Marshal(o.EventAttributeValue)
	if errEventAttributeValue != nil {
		return map[string]interface{}{}, errEventAttributeValue
	}
	errEventAttributeValue = json.Unmarshal([]byte(serializedEventAttributeValue), &toSerialize)
	if errEventAttributeValue != nil {
		return map[string]interface{}{}, errEventAttributeValue
	}
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

type NullableIntegerArrayEventAttributeValue struct {
	value *IntegerArrayEventAttributeValue
	isSet bool
}

func (v NullableIntegerArrayEventAttributeValue) Get() *IntegerArrayEventAttributeValue {
	return v.value
}

func (v *NullableIntegerArrayEventAttributeValue) Set(val *IntegerArrayEventAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegerArrayEventAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegerArrayEventAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegerArrayEventAttributeValue(val *IntegerArrayEventAttributeValue) *NullableIntegerArrayEventAttributeValue {
	return &NullableIntegerArrayEventAttributeValue{value: val, isSet: true}
}

func (v NullableIntegerArrayEventAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegerArrayEventAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


