/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScopeDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeDefinition{}

// ScopeDefinition struct for ScopeDefinition
type ScopeDefinition struct {
	// The name of the scope.
	Id string `json:"id"`
	// The UI label for the scope.
	Label string `json:"label"`
	// Type of scope.
	Type string `json:"type"`
	// Any scopes that are required for this scope to be enabled.
	DependsOn []string `json:"dependsOn"`
	Group ScopeDefinitionGroup `json:"group"`
}

type _ScopeDefinition ScopeDefinition

// NewScopeDefinition instantiates a new ScopeDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeDefinition(id string, label string, type_ string, dependsOn []string, group ScopeDefinitionGroup) *ScopeDefinition {
	this := ScopeDefinition{}
	this.Id = id
	this.Label = label
	this.Type = type_
	this.DependsOn = dependsOn
	this.Group = group
	return &this
}

// NewScopeDefinitionWithDefaults instantiates a new ScopeDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeDefinitionWithDefaults() *ScopeDefinition {
	this := ScopeDefinition{}
	return &this
}

// GetId returns the Id field value
func (o *ScopeDefinition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ScopeDefinition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ScopeDefinition) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *ScopeDefinition) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ScopeDefinition) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ScopeDefinition) SetLabel(v string) {
	o.Label = v
}

// GetType returns the Type field value
func (o *ScopeDefinition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ScopeDefinition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ScopeDefinition) SetType(v string) {
	o.Type = v
}

// GetDependsOn returns the DependsOn field value
func (o *ScopeDefinition) GetDependsOn() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value
// and a boolean to check if the value has been set.
func (o *ScopeDefinition) GetDependsOnOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependsOn, true
}

// SetDependsOn sets field value
func (o *ScopeDefinition) SetDependsOn(v []string) {
	o.DependsOn = v
}

// GetGroup returns the Group field value
func (o *ScopeDefinition) GetGroup() ScopeDefinitionGroup {
	if o == nil {
		var ret ScopeDefinitionGroup
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *ScopeDefinition) GetGroupOk() (*ScopeDefinitionGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *ScopeDefinition) SetGroup(v ScopeDefinitionGroup) {
	o.Group = v
}

func (o ScopeDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["type"] = o.Type
	toSerialize["dependsOn"] = o.DependsOn
	toSerialize["group"] = o.Group
	return toSerialize, nil
}

func (o *ScopeDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"type",
		"dependsOn",
		"group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScopeDefinition := _ScopeDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScopeDefinition)

	if err != nil {
		return err
	}

	*o = ScopeDefinition(varScopeDefinition)

	return err
}

type NullableScopeDefinition struct {
	value *ScopeDefinition
	isSet bool
}

func (v NullableScopeDefinition) Get() *ScopeDefinition {
	return v.value
}

func (v *NullableScopeDefinition) Set(val *ScopeDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeDefinition(val *ScopeDefinition) *NullableScopeDefinition {
	return &NullableScopeDefinition{value: val, isSet: true}
}

func (v NullableScopeDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


