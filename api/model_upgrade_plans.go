/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// UpgradePlans Upgrade plans available for the account.
type UpgradePlans struct {
	// List of plans available.
	Plans []Plan `json:"plans"`
}

// NewUpgradePlans instantiates a new UpgradePlans object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradePlans(plans []Plan) *UpgradePlans {
	this := UpgradePlans{}
	this.Plans = plans
	return &this
}

// NewUpgradePlansWithDefaults instantiates a new UpgradePlans object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradePlansWithDefaults() *UpgradePlans {
	this := UpgradePlans{}
	return &this
}

// GetPlans returns the Plans field value
func (o *UpgradePlans) GetPlans() []Plan {
	if o == nil {
		var ret []Plan
		return ret
	}

	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value
// and a boolean to check if the value has been set.
func (o *UpgradePlans) GetPlansOk() ([]Plan, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plans, true
}

// SetPlans sets field value
func (o *UpgradePlans) SetPlans(v []Plan) {
	o.Plans = v
}

func (o UpgradePlans) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["plans"] = o.Plans
	}
	return json.Marshal(toSerialize)
}

type NullableUpgradePlans struct {
	value *UpgradePlans
	isSet bool
}

func (v NullableUpgradePlans) Get() *UpgradePlans {
	return v.value
}

func (v *NullableUpgradePlans) Set(val *UpgradePlans) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradePlans) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradePlans) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradePlans(val *UpgradePlans) *NullableUpgradePlans {
	return &NullableUpgradePlans{value: val, isSet: true}
}

func (v NullableUpgradePlans) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradePlans) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


