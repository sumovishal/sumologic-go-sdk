/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the StaticCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StaticCondition{}

// StaticCondition struct for StaticCondition
type StaticCondition struct {
	TriggerCondition
	// The relative time range of the monitor. Valid values of time ranges are `-5m`, `-10m`, `-15m`, `-30m`, `-1h`, `-3h`, `-6h`, `-12h`, or `-24h`.
	TimeRange string `json:"timeRange"`
	// The data value for the condition. This defines the threshold for when to trigger. Threshold value is not applicable for `MissingData` and `ResolvedMissingData` triggerTypes and will be ignored if specified.
	Threshold *float64 `json:"threshold,omitempty"`
	// The comparison type for the `threshold` evaluation. This defines how you want the data value compared. Valid values:   1. `LessThan`: Less than than the configured threshold.   2. `GreaterThan`: Greater than the configured threshold.   3. `LessThanOrEqual`: Less than or equal to the configured threshold.   4. `GreaterThanOrEqual`: Greater than or equal to the configured threshold. ThresholdType value is not applicable for `MissingData` and `ResolvedMissingData` triggerTypes and will be ignored if specified.
	ThresholdType *string `json:"thresholdType,omitempty"`
	// The name of the field that the trigger condition will alert on. The trigger could compare the value of specified field with the threshold. If `field` is not specified, monitor would default to result count instead.
	Field *string `json:"field,omitempty"`
	// The criteria to evaluate the threshold and thresholdType in the given time range. Valid values:   1. `AtLeastOnce`: Trigger if the threshold is met at least once. (NOTE: This is the only valid value if monitorType is `Metrics`.)   2. `Always`: Trigger if the threshold is met continuously. (NOTE: This is the only valid value if monitorType is `Metrics`.)   3. `ResultCount`: Trigger if the threshold is met against the count of results. (NOTE: This is the only valid value if monitorType is `Logs`.)   4. `MissingData`: Trigger if the data is missing. (NOTE: This is valid for both `Logs` and `Metrics` monitorTypes)
	OccurrenceType string `json:"occurrenceType"`
	// Determines which time series from queries to use for Metrics MissingData and ResolvedMissingData triggers Valid values:   1. `AllTimeSeries`: Evaluate the condition against all time series. (NOTE: This option is only valid if monitorType is `Metrics`)   2. `AnyTimeSeries`: Evaluate the condition against any time series. (NOTE: This option is only valid if monitorType is `Metrics`)   3. `AllResults`: Evaluate the condition against results from all queries. (NOTE: This option is only valid if monitorType is `Logs`)
	TriggerSource string `json:"triggerSource"`
	// The minimum number of data points to alert or resolve a metrics monitor within the time range. This field is only valid for Metrics Monitor, it will always be set to 1 for `AtleastOnce` occurrence type and for `Always`, if not specified by user it will default to 2.
	MinDataPoints *int32 `json:"minDataPoints,omitempty"`
}

// NewStaticCondition instantiates a new StaticCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaticCondition(timeRange string, occurrenceType string, triggerSource string, triggerType string) *StaticCondition {
	this := StaticCondition{}
	var detectionMethod string = "StaticCondition"
	this.DetectionMethod = &detectionMethod
	this.TriggerType = triggerType
	this.TimeRange = timeRange
	var threshold float64 = 0.0
	this.Threshold = &threshold
	var thresholdType string = "GreaterThanOrEqual"
	this.ThresholdType = &thresholdType
	this.OccurrenceType = occurrenceType
	this.TriggerSource = triggerSource
	return &this
}

// NewStaticConditionWithDefaults instantiates a new StaticCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaticConditionWithDefaults() *StaticCondition {
	this := StaticCondition{}
	var threshold float64 = 0.0
	this.Threshold = &threshold
	var thresholdType string = "GreaterThanOrEqual"
	this.ThresholdType = &thresholdType
	return &this
}

// GetTimeRange returns the TimeRange field value
func (o *StaticCondition) GetTimeRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *StaticCondition) GetTimeRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *StaticCondition) SetTimeRange(v string) {
	o.TimeRange = v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *StaticCondition) GetThreshold() float64 {
	if o == nil || IsNil(o.Threshold) {
		var ret float64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticCondition) GetThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *StaticCondition) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float64 and assigns it to the Threshold field.
func (o *StaticCondition) SetThreshold(v float64) {
	o.Threshold = &v
}

// GetThresholdType returns the ThresholdType field value if set, zero value otherwise.
func (o *StaticCondition) GetThresholdType() string {
	if o == nil || IsNil(o.ThresholdType) {
		var ret string
		return ret
	}
	return *o.ThresholdType
}

// GetThresholdTypeOk returns a tuple with the ThresholdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticCondition) GetThresholdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdType) {
		return nil, false
	}
	return o.ThresholdType, true
}

// HasThresholdType returns a boolean if a field has been set.
func (o *StaticCondition) HasThresholdType() bool {
	if o != nil && !IsNil(o.ThresholdType) {
		return true
	}

	return false
}

// SetThresholdType gets a reference to the given string and assigns it to the ThresholdType field.
func (o *StaticCondition) SetThresholdType(v string) {
	o.ThresholdType = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *StaticCondition) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticCondition) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *StaticCondition) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *StaticCondition) SetField(v string) {
	o.Field = &v
}

// GetOccurrenceType returns the OccurrenceType field value
func (o *StaticCondition) GetOccurrenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OccurrenceType
}

// GetOccurrenceTypeOk returns a tuple with the OccurrenceType field value
// and a boolean to check if the value has been set.
func (o *StaticCondition) GetOccurrenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OccurrenceType, true
}

// SetOccurrenceType sets field value
func (o *StaticCondition) SetOccurrenceType(v string) {
	o.OccurrenceType = v
}

// GetTriggerSource returns the TriggerSource field value
func (o *StaticCondition) GetTriggerSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerSource
}

// GetTriggerSourceOk returns a tuple with the TriggerSource field value
// and a boolean to check if the value has been set.
func (o *StaticCondition) GetTriggerSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerSource, true
}

// SetTriggerSource sets field value
func (o *StaticCondition) SetTriggerSource(v string) {
	o.TriggerSource = v
}

// GetMinDataPoints returns the MinDataPoints field value if set, zero value otherwise.
func (o *StaticCondition) GetMinDataPoints() int32 {
	if o == nil || IsNil(o.MinDataPoints) {
		var ret int32
		return ret
	}
	return *o.MinDataPoints
}

// GetMinDataPointsOk returns a tuple with the MinDataPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticCondition) GetMinDataPointsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinDataPoints) {
		return nil, false
	}
	return o.MinDataPoints, true
}

// HasMinDataPoints returns a boolean if a field has been set.
func (o *StaticCondition) HasMinDataPoints() bool {
	if o != nil && !IsNil(o.MinDataPoints) {
		return true
	}

	return false
}

// SetMinDataPoints gets a reference to the given int32 and assigns it to the MinDataPoints field.
func (o *StaticCondition) SetMinDataPoints(v int32) {
	o.MinDataPoints = &v
}

func (o StaticCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StaticCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTriggerCondition, errTriggerCondition := json.Marshal(o.TriggerCondition)
	if errTriggerCondition != nil {
		return map[string]interface{}{}, errTriggerCondition
	}
	errTriggerCondition = json.Unmarshal([]byte(serializedTriggerCondition), &toSerialize)
	if errTriggerCondition != nil {
		return map[string]interface{}{}, errTriggerCondition
	}
	toSerialize["timeRange"] = o.TimeRange
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.ThresholdType) {
		toSerialize["thresholdType"] = o.ThresholdType
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	toSerialize["occurrenceType"] = o.OccurrenceType
	toSerialize["triggerSource"] = o.TriggerSource
	if !IsNil(o.MinDataPoints) {
		toSerialize["minDataPoints"] = o.MinDataPoints
	}
	return toSerialize, nil
}

type NullableStaticCondition struct {
	value *StaticCondition
	isSet bool
}

func (v NullableStaticCondition) Get() *StaticCondition {
	return v.value
}

func (v *NullableStaticCondition) Set(val *StaticCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableStaticCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableStaticCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaticCondition(val *StaticCondition) *NullableStaticCondition {
	return &NullableStaticCondition{value: val, isSet: true}
}

func (v NullableStaticCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaticCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


