/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ColoringRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColoringRule{}

// ColoringRule struct for ColoringRule
type ColoringRule struct {
	// Regex string to match queries to apply coloring to.
	Scope string `json:"scope"`
	// Function to aggregate one series into one single value.
	SingleSeriesAggregateFunction string `json:"singleSeriesAggregateFunction"`
	// Function to aggregate the aggregate values of multiple time series into one single value.
	MultipleSeriesAggregateFunction string `json:"multipleSeriesAggregateFunction"`
	// Color thresholds.
	ColorThresholds []ColoringThreshold `json:"colorThresholds"`
}

type _ColoringRule ColoringRule

// NewColoringRule instantiates a new ColoringRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColoringRule(scope string, singleSeriesAggregateFunction string, multipleSeriesAggregateFunction string, colorThresholds []ColoringThreshold) *ColoringRule {
	this := ColoringRule{}
	this.Scope = scope
	this.SingleSeriesAggregateFunction = singleSeriesAggregateFunction
	this.MultipleSeriesAggregateFunction = multipleSeriesAggregateFunction
	this.ColorThresholds = colorThresholds
	return &this
}

// NewColoringRuleWithDefaults instantiates a new ColoringRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColoringRuleWithDefaults() *ColoringRule {
	this := ColoringRule{}
	return &this
}

// GetScope returns the Scope field value
func (o *ColoringRule) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *ColoringRule) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *ColoringRule) SetScope(v string) {
	o.Scope = v
}

// GetSingleSeriesAggregateFunction returns the SingleSeriesAggregateFunction field value
func (o *ColoringRule) GetSingleSeriesAggregateFunction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SingleSeriesAggregateFunction
}

// GetSingleSeriesAggregateFunctionOk returns a tuple with the SingleSeriesAggregateFunction field value
// and a boolean to check if the value has been set.
func (o *ColoringRule) GetSingleSeriesAggregateFunctionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SingleSeriesAggregateFunction, true
}

// SetSingleSeriesAggregateFunction sets field value
func (o *ColoringRule) SetSingleSeriesAggregateFunction(v string) {
	o.SingleSeriesAggregateFunction = v
}

// GetMultipleSeriesAggregateFunction returns the MultipleSeriesAggregateFunction field value
func (o *ColoringRule) GetMultipleSeriesAggregateFunction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MultipleSeriesAggregateFunction
}

// GetMultipleSeriesAggregateFunctionOk returns a tuple with the MultipleSeriesAggregateFunction field value
// and a boolean to check if the value has been set.
func (o *ColoringRule) GetMultipleSeriesAggregateFunctionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MultipleSeriesAggregateFunction, true
}

// SetMultipleSeriesAggregateFunction sets field value
func (o *ColoringRule) SetMultipleSeriesAggregateFunction(v string) {
	o.MultipleSeriesAggregateFunction = v
}

// GetColorThresholds returns the ColorThresholds field value
func (o *ColoringRule) GetColorThresholds() []ColoringThreshold {
	if o == nil {
		var ret []ColoringThreshold
		return ret
	}

	return o.ColorThresholds
}

// GetColorThresholdsOk returns a tuple with the ColorThresholds field value
// and a boolean to check if the value has been set.
func (o *ColoringRule) GetColorThresholdsOk() ([]ColoringThreshold, bool) {
	if o == nil {
		return nil, false
	}
	return o.ColorThresholds, true
}

// SetColorThresholds sets field value
func (o *ColoringRule) SetColorThresholds(v []ColoringThreshold) {
	o.ColorThresholds = v
}

func (o ColoringRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColoringRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scope"] = o.Scope
	toSerialize["singleSeriesAggregateFunction"] = o.SingleSeriesAggregateFunction
	toSerialize["multipleSeriesAggregateFunction"] = o.MultipleSeriesAggregateFunction
	toSerialize["colorThresholds"] = o.ColorThresholds
	return toSerialize, nil
}

func (o *ColoringRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scope",
		"singleSeriesAggregateFunction",
		"multipleSeriesAggregateFunction",
		"colorThresholds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varColoringRule := _ColoringRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varColoringRule)

	if err != nil {
		return err
	}

	*o = ColoringRule(varColoringRule)

	return err
}

type NullableColoringRule struct {
	value *ColoringRule
	isSet bool
}

func (v NullableColoringRule) Get() *ColoringRule {
	return v.value
}

func (v *NullableColoringRule) Set(val *ColoringRule) {
	v.value = val
	v.isSet = true
}

func (v NullableColoringRule) IsSet() bool {
	return v.isSet
}

func (v *NullableColoringRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColoringRule(val *ColoringRule) *NullableColoringRule {
	return &NullableColoringRule{value: val, isSet: true}
}

func (v NullableColoringRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColoringRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


