/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// NotificationThresholdSyncDefinition struct for NotificationThresholdSyncDefinition
type NotificationThresholdSyncDefinition struct {
	// Threshold type. Possible values are:  1. `message`  2. `group`  Use `group` as threshold type if the search query is of aggregate type. For non-aggregate queries, set it to `message`.
	ThresholdType string `json:"thresholdType"`
	// Criterion to be applied when comparing actual result count with expected count. Possible values are:  1. `eq`  2. `gt`  3. `ge`  4. `lt`  5. `le`
	Operator string `json:"operator"`
	// Expected result count.
	Count int32 `json:"count"`
}

// NewNotificationThresholdSyncDefinition instantiates a new NotificationThresholdSyncDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationThresholdSyncDefinition(thresholdType string, operator string, count int32) *NotificationThresholdSyncDefinition {
	this := NotificationThresholdSyncDefinition{}
	this.ThresholdType = thresholdType
	this.Operator = operator
	this.Count = count
	return &this
}

// NewNotificationThresholdSyncDefinitionWithDefaults instantiates a new NotificationThresholdSyncDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationThresholdSyncDefinitionWithDefaults() *NotificationThresholdSyncDefinition {
	this := NotificationThresholdSyncDefinition{}
	return &this
}

// GetThresholdType returns the ThresholdType field value
func (o *NotificationThresholdSyncDefinition) GetThresholdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThresholdType
}

// GetThresholdTypeOk returns a tuple with the ThresholdType field value
// and a boolean to check if the value has been set.
func (o *NotificationThresholdSyncDefinition) GetThresholdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThresholdType, true
}

// SetThresholdType sets field value
func (o *NotificationThresholdSyncDefinition) SetThresholdType(v string) {
	o.ThresholdType = v
}

// GetOperator returns the Operator field value
func (o *NotificationThresholdSyncDefinition) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *NotificationThresholdSyncDefinition) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *NotificationThresholdSyncDefinition) SetOperator(v string) {
	o.Operator = v
}

// GetCount returns the Count field value
func (o *NotificationThresholdSyncDefinition) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *NotificationThresholdSyncDefinition) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *NotificationThresholdSyncDefinition) SetCount(v int32) {
	o.Count = v
}

func (o NotificationThresholdSyncDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["thresholdType"] = o.ThresholdType
	}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationThresholdSyncDefinition struct {
	value *NotificationThresholdSyncDefinition
	isSet bool
}

func (v NullableNotificationThresholdSyncDefinition) Get() *NotificationThresholdSyncDefinition {
	return v.value
}

func (v *NullableNotificationThresholdSyncDefinition) Set(val *NotificationThresholdSyncDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationThresholdSyncDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationThresholdSyncDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationThresholdSyncDefinition(val *NotificationThresholdSyncDefinition) *NullableNotificationThresholdSyncDefinition {
	return &NullableNotificationThresholdSyncDefinition{value: val, isSet: true}
}

func (v NullableNotificationThresholdSyncDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationThresholdSyncDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


