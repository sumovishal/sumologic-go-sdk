/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GcpMetricsCollectionBrokenTracker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpMetricsCollectionBrokenTracker{}

// GcpMetricsCollectionBrokenTracker struct for GcpMetricsCollectionBrokenTracker
type GcpMetricsCollectionBrokenTracker struct {
	TrackerIdentity
}

// NewGcpMetricsCollectionBrokenTracker instantiates a new GcpMetricsCollectionBrokenTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpMetricsCollectionBrokenTracker(trackerId string, error_ string, description string) *GcpMetricsCollectionBrokenTracker {
	this := GcpMetricsCollectionBrokenTracker{}
	this.TrackerId = trackerId
	this.Error = error_
	this.Description = description
	return &this
}

// NewGcpMetricsCollectionBrokenTrackerWithDefaults instantiates a new GcpMetricsCollectionBrokenTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpMetricsCollectionBrokenTrackerWithDefaults() *GcpMetricsCollectionBrokenTracker {
	this := GcpMetricsCollectionBrokenTracker{}
	return &this
}

func (o GcpMetricsCollectionBrokenTracker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpMetricsCollectionBrokenTracker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTrackerIdentity, errTrackerIdentity := json.Marshal(o.TrackerIdentity)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	errTrackerIdentity = json.Unmarshal([]byte(serializedTrackerIdentity), &toSerialize)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	return toSerialize, nil
}

type NullableGcpMetricsCollectionBrokenTracker struct {
	value *GcpMetricsCollectionBrokenTracker
	isSet bool
}

func (v NullableGcpMetricsCollectionBrokenTracker) Get() *GcpMetricsCollectionBrokenTracker {
	return v.value
}

func (v *NullableGcpMetricsCollectionBrokenTracker) Set(val *GcpMetricsCollectionBrokenTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpMetricsCollectionBrokenTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpMetricsCollectionBrokenTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpMetricsCollectionBrokenTracker(val *GcpMetricsCollectionBrokenTracker) *NullableGcpMetricsCollectionBrokenTracker {
	return &NullableGcpMetricsCollectionBrokenTracker{value: val, isSet: true}
}

func (v NullableGcpMetricsCollectionBrokenTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpMetricsCollectionBrokenTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


