/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// CollectionS3SlowListingTracker struct for CollectionS3SlowListingTracker
type CollectionS3SlowListingTracker struct {
	TrackerIdentity
	// Event type.
	EventType *string `json:"eventType,omitempty"`
	// The bucket name of the associated Source.
	BucketName *string `json:"bucketName,omitempty"`
	// The number of minutes elapsed in scanning after which this incident was created.
	FlaggedAfterMinutes *string `json:"flaggedAfterMinutes,omitempty"`
}

// NewCollectionS3SlowListingTracker instantiates a new CollectionS3SlowListingTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionS3SlowListingTracker(trackerId string, error_ string, description string) *CollectionS3SlowListingTracker {
	this := CollectionS3SlowListingTracker{}
	this.TrackerId = trackerId
	this.Error = error_
	this.Description = description
	return &this
}

// NewCollectionS3SlowListingTrackerWithDefaults instantiates a new CollectionS3SlowListingTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionS3SlowListingTrackerWithDefaults() *CollectionS3SlowListingTracker {
	this := CollectionS3SlowListingTracker{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *CollectionS3SlowListingTracker) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionS3SlowListingTracker) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *CollectionS3SlowListingTracker) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *CollectionS3SlowListingTracker) SetEventType(v string) {
	o.EventType = &v
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *CollectionS3SlowListingTracker) GetBucketName() string {
	if o == nil || o.BucketName == nil {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionS3SlowListingTracker) GetBucketNameOk() (*string, bool) {
	if o == nil || o.BucketName == nil {
		return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *CollectionS3SlowListingTracker) HasBucketName() bool {
	if o != nil && o.BucketName != nil {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *CollectionS3SlowListingTracker) SetBucketName(v string) {
	o.BucketName = &v
}

// GetFlaggedAfterMinutes returns the FlaggedAfterMinutes field value if set, zero value otherwise.
func (o *CollectionS3SlowListingTracker) GetFlaggedAfterMinutes() string {
	if o == nil || o.FlaggedAfterMinutes == nil {
		var ret string
		return ret
	}
	return *o.FlaggedAfterMinutes
}

// GetFlaggedAfterMinutesOk returns a tuple with the FlaggedAfterMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionS3SlowListingTracker) GetFlaggedAfterMinutesOk() (*string, bool) {
	if o == nil || o.FlaggedAfterMinutes == nil {
		return nil, false
	}
	return o.FlaggedAfterMinutes, true
}

// HasFlaggedAfterMinutes returns a boolean if a field has been set.
func (o *CollectionS3SlowListingTracker) HasFlaggedAfterMinutes() bool {
	if o != nil && o.FlaggedAfterMinutes != nil {
		return true
	}

	return false
}

// SetFlaggedAfterMinutes gets a reference to the given string and assigns it to the FlaggedAfterMinutes field.
func (o *CollectionS3SlowListingTracker) SetFlaggedAfterMinutes(v string) {
	o.FlaggedAfterMinutes = &v
}

func (o CollectionS3SlowListingTracker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTrackerIdentity, errTrackerIdentity := json.Marshal(o.TrackerIdentity)
	if errTrackerIdentity != nil {
		return []byte{}, errTrackerIdentity
	}
	errTrackerIdentity = json.Unmarshal([]byte(serializedTrackerIdentity), &toSerialize)
	if errTrackerIdentity != nil {
		return []byte{}, errTrackerIdentity
	}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if o.BucketName != nil {
		toSerialize["bucketName"] = o.BucketName
	}
	if o.FlaggedAfterMinutes != nil {
		toSerialize["flaggedAfterMinutes"] = o.FlaggedAfterMinutes
	}
	return json.Marshal(toSerialize)
}

type NullableCollectionS3SlowListingTracker struct {
	value *CollectionS3SlowListingTracker
	isSet bool
}

func (v NullableCollectionS3SlowListingTracker) Get() *CollectionS3SlowListingTracker {
	return v.value
}

func (v *NullableCollectionS3SlowListingTracker) Set(val *CollectionS3SlowListingTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionS3SlowListingTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionS3SlowListingTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionS3SlowListingTracker(val *CollectionS3SlowListingTracker) *NullableCollectionS3SlowListingTracker {
	return &NullableCollectionS3SlowListingTracker{value: val, isSet: true}
}

func (v NullableCollectionS3SlowListingTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionS3SlowListingTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


