/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the RuleAndBucketDetailAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleAndBucketDetailAllOf{}

// RuleAndBucketDetailAllOf struct for RuleAndBucketDetailAllOf
type RuleAndBucketDetailAllOf struct {
	Bucket map[string]interface{} `json:"bucket,omitempty"`
}

// NewRuleAndBucketDetailAllOf instantiates a new RuleAndBucketDetailAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleAndBucketDetailAllOf() *RuleAndBucketDetailAllOf {
	this := RuleAndBucketDetailAllOf{}
	return &this
}

// NewRuleAndBucketDetailAllOfWithDefaults instantiates a new RuleAndBucketDetailAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleAndBucketDetailAllOfWithDefaults() *RuleAndBucketDetailAllOf {
	this := RuleAndBucketDetailAllOf{}
	return &this
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *RuleAndBucketDetailAllOf) GetBucket() map[string]interface{} {
	if o == nil || IsNil(o.Bucket) {
		var ret map[string]interface{}
		return ret
	}
	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleAndBucketDetailAllOf) GetBucketOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Bucket) {
		return map[string]interface{}{}, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *RuleAndBucketDetailAllOf) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given map[string]interface{} and assigns it to the Bucket field.
func (o *RuleAndBucketDetailAllOf) SetBucket(v map[string]interface{}) {
	o.Bucket = v
}

func (o RuleAndBucketDetailAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleAndBucketDetailAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	return toSerialize, nil
}

type NullableRuleAndBucketDetailAllOf struct {
	value *RuleAndBucketDetailAllOf
	isSet bool
}

func (v NullableRuleAndBucketDetailAllOf) Get() *RuleAndBucketDetailAllOf {
	return v.value
}

func (v *NullableRuleAndBucketDetailAllOf) Set(val *RuleAndBucketDetailAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleAndBucketDetailAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleAndBucketDetailAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleAndBucketDetailAllOf(val *RuleAndBucketDetailAllOf) *NullableRuleAndBucketDetailAllOf {
	return &NullableRuleAndBucketDetailAllOf{value: val, isSet: true}
}

func (v NullableRuleAndBucketDetailAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleAndBucketDetailAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


