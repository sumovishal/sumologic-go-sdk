/*
Sumo Logic API

Testing SpanAnalyticsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sumologic

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_sumologic_SpanAnalyticsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SpanAnalyticsAPIService CancelSpanQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queryId string

		httpRes, err := apiClient.SpanAnalyticsAPI.CancelSpanQuery(context.Background(), queryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpanAnalyticsAPIService CreateSpanQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SpanAnalyticsAPI.CreateSpanQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpanAnalyticsAPIService GetSpanQueryAggregates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queryId string

		resp, httpRes, err := apiClient.SpanAnalyticsAPI.GetSpanQueryAggregates(context.Background(), queryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpanAnalyticsAPIService GetSpanQueryFacets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queryId string
		var rowId string

		resp, httpRes, err := apiClient.SpanAnalyticsAPI.GetSpanQueryFacets(context.Background(), queryId, rowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpanAnalyticsAPIService GetSpanQueryFieldValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var field string

		resp, httpRes, err := apiClient.SpanAnalyticsAPI.GetSpanQueryFieldValues(context.Background(), field).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpanAnalyticsAPIService GetSpanQueryFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SpanAnalyticsAPI.GetSpanQueryFields(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpanAnalyticsAPIService GetSpanQueryResult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queryId string
		var rowId string

		resp, httpRes, err := apiClient.SpanAnalyticsAPI.GetSpanQueryResult(context.Background(), queryId, rowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpanAnalyticsAPIService GetSpanQueryStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queryId string

		resp, httpRes, err := apiClient.SpanAnalyticsAPI.GetSpanQueryStatus(context.Background(), queryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpanAnalyticsAPIService PauseSpanQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queryId string

		httpRes, err := apiClient.SpanAnalyticsAPI.PauseSpanQuery(context.Background(), queryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpanAnalyticsAPIService ResumeSpanQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queryId string

		httpRes, err := apiClient.SpanAnalyticsAPI.ResumeSpanQuery(context.Background(), queryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
