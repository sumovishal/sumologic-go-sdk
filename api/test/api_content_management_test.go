/*
Sumo Logic API

Testing ContentManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sumologic

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_sumologic_ContentManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContentManagementAPIService AsyncCopyStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var jobId string

		resp, httpRes, err := apiClient.ContentManagementAPI.AsyncCopyStatus(context.Background(), id, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService BeginAsyncCopy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ContentManagementAPI.BeginAsyncCopy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService BeginAsyncDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ContentManagementAPI.BeginAsyncDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService BeginAsyncExport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ContentManagementAPI.BeginAsyncExport(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService BeginAsyncImport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folderId string

		resp, httpRes, err := apiClient.ContentManagementAPI.BeginAsyncImport(context.Background(), folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService GetAsyncDeleteStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var jobId string

		resp, httpRes, err := apiClient.ContentManagementAPI.GetAsyncDeleteStatus(context.Background(), id, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService GetAsyncExportResult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contentId string
		var jobId string

		resp, httpRes, err := apiClient.ContentManagementAPI.GetAsyncExportResult(context.Background(), contentId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService GetAsyncExportStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contentId string
		var jobId string

		resp, httpRes, err := apiClient.ContentManagementAPI.GetAsyncExportStatus(context.Background(), contentId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService GetAsyncImportStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folderId string
		var jobId string

		resp, httpRes, err := apiClient.ContentManagementAPI.GetAsyncImportStatus(context.Background(), folderId, jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService GetItemByPath", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContentManagementAPI.GetItemByPath(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService GetPathById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contentId string

		resp, httpRes, err := apiClient.ContentManagementAPI.GetPathById(context.Background(), contentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContentManagementAPIService MoveItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ContentManagementAPI.MoveItem(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
