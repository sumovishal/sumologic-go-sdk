/*
Sumo Logic API

Testing MutingSchedulesLibraryManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sumologic

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_sumologic_MutingSchedulesLibraryManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MutingSchedulesLibraryManagementAPIService GetMutingSchedulesFullPath", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.GetMutingSchedulesFullPath(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService GetMutingSchedulesLibraryRoot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.GetMutingSchedulesLibraryRoot(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService MutingSchedulesCopy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.MutingSchedulesCopy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService MutingSchedulesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.MutingSchedulesCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService MutingSchedulesDeleteById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.MutingSchedulesDeleteById(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService MutingSchedulesDeleteByIds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.MutingSchedulesDeleteByIds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService MutingSchedulesExportItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.MutingSchedulesExportItem(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService MutingSchedulesImportItem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var parentId string

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.MutingSchedulesImportItem(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService MutingSchedulesReadById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.MutingSchedulesReadById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService MutingSchedulesReadByIds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.MutingSchedulesReadByIds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService MutingSchedulesSearch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.MutingSchedulesSearch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MutingSchedulesLibraryManagementAPIService MutingSchedulesUpdateById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.MutingSchedulesLibraryManagementAPI.MutingSchedulesUpdateById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
