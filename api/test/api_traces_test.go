/*
Sumo Logic API

Testing TracesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sumologic

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_sumologic_TracesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TracesAPIService CancelTraceQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queryId string

		httpRes, err := apiClient.TracesAPI.CancelTraceQuery(context.Background(), queryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService CreateTraceQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TracesAPI.CreateTraceQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetCriticalPath", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var traceId string

		resp, httpRes, err := apiClient.TracesAPI.GetCriticalPath(context.Background(), traceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetCriticalPathServiceBreakdown", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var traceId string

		resp, httpRes, err := apiClient.TracesAPI.GetCriticalPathServiceBreakdown(context.Background(), traceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TracesAPI.GetMetrics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetSpan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var traceId string
		var spanId string

		resp, httpRes, err := apiClient.TracesAPI.GetSpan(context.Background(), traceId, spanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetSpanBillingInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var traceId string
		var spanId string

		resp, httpRes, err := apiClient.TracesAPI.GetSpanBillingInfo(context.Background(), traceId, spanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetSpans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var traceId string

		resp, httpRes, err := apiClient.TracesAPI.GetSpans(context.Background(), traceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var traceId string

		resp, httpRes, err := apiClient.TracesAPI.GetTrace(context.Background(), traceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetTraceLightEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var traceId string

		resp, httpRes, err := apiClient.TracesAPI.GetTraceLightEvents(context.Background(), traceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetTraceQueryFieldValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var field string

		resp, httpRes, err := apiClient.TracesAPI.GetTraceQueryFieldValues(context.Background(), field).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetTraceQueryFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TracesAPI.GetTraceQueryFields(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetTraceQueryResult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queryId string
		var rowId string

		resp, httpRes, err := apiClient.TracesAPI.GetTraceQueryResult(context.Background(), queryId, rowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService GetTraceQueryStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var queryId string

		resp, httpRes, err := apiClient.TracesAPI.GetTraceQueryStatus(context.Background(), queryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TracesAPIService TraceExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var traceId string

		resp, httpRes, err := apiClient.TracesAPI.TraceExists(context.Background(), traceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
