/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the DoubleEventAttributeValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DoubleEventAttributeValue{}

// DoubleEventAttributeValue struct for DoubleEventAttributeValue
type DoubleEventAttributeValue struct {
	EventAttributeValue
	Value float64 `json:"value"`
}

// NewDoubleEventAttributeValue instantiates a new DoubleEventAttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDoubleEventAttributeValue(value float64, type_ string) *DoubleEventAttributeValue {
	this := DoubleEventAttributeValue{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewDoubleEventAttributeValueWithDefaults instantiates a new DoubleEventAttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDoubleEventAttributeValueWithDefaults() *DoubleEventAttributeValue {
	this := DoubleEventAttributeValue{}
	return &this
}

// GetValue returns the Value field value
func (o *DoubleEventAttributeValue) GetValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DoubleEventAttributeValue) GetValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DoubleEventAttributeValue) SetValue(v float64) {
	o.Value = v
}

func (o DoubleEventAttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DoubleEventAttributeValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedEventAttributeValue, errEventAttributeValue := json.Marshal(o.EventAttributeValue)
	if errEventAttributeValue != nil {
		return map[string]interface{}{}, errEventAttributeValue
	}
	errEventAttributeValue = json.Unmarshal([]byte(serializedEventAttributeValue), &toSerialize)
	if errEventAttributeValue != nil {
		return map[string]interface{}{}, errEventAttributeValue
	}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableDoubleEventAttributeValue struct {
	value *DoubleEventAttributeValue
	isSet bool
}

func (v NullableDoubleEventAttributeValue) Get() *DoubleEventAttributeValue {
	return v.value
}

func (v *NullableDoubleEventAttributeValue) Set(val *DoubleEventAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDoubleEventAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDoubleEventAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDoubleEventAttributeValue(val *DoubleEventAttributeValue) *NullableDoubleEventAttributeValue {
	return &NullableDoubleEventAttributeValue{value: val, isSet: true}
}

func (v NullableDoubleEventAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDoubleEventAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


