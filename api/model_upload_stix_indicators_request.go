/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UploadStixIndicatorsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadStixIndicatorsRequest{}

// UploadStixIndicatorsRequest struct for UploadStixIndicatorsRequest
type UploadStixIndicatorsRequest struct {
	// User-provided text to identify the source of the indicator
	Source string `json:"source"`
	// The list of stix threat intel indicators to upload.
	Indicators []StixIndicator `json:"indicators"`
}

type _UploadStixIndicatorsRequest UploadStixIndicatorsRequest

// NewUploadStixIndicatorsRequest instantiates a new UploadStixIndicatorsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadStixIndicatorsRequest(source string, indicators []StixIndicator) *UploadStixIndicatorsRequest {
	this := UploadStixIndicatorsRequest{}
	this.Source = source
	this.Indicators = indicators
	return &this
}

// NewUploadStixIndicatorsRequestWithDefaults instantiates a new UploadStixIndicatorsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadStixIndicatorsRequestWithDefaults() *UploadStixIndicatorsRequest {
	this := UploadStixIndicatorsRequest{}
	return &this
}

// GetSource returns the Source field value
func (o *UploadStixIndicatorsRequest) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *UploadStixIndicatorsRequest) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *UploadStixIndicatorsRequest) SetSource(v string) {
	o.Source = v
}

// GetIndicators returns the Indicators field value
func (o *UploadStixIndicatorsRequest) GetIndicators() []StixIndicator {
	if o == nil {
		var ret []StixIndicator
		return ret
	}

	return o.Indicators
}

// GetIndicatorsOk returns a tuple with the Indicators field value
// and a boolean to check if the value has been set.
func (o *UploadStixIndicatorsRequest) GetIndicatorsOk() ([]StixIndicator, bool) {
	if o == nil {
		return nil, false
	}
	return o.Indicators, true
}

// SetIndicators sets field value
func (o *UploadStixIndicatorsRequest) SetIndicators(v []StixIndicator) {
	o.Indicators = v
}

func (o UploadStixIndicatorsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadStixIndicatorsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["indicators"] = o.Indicators
	return toSerialize, nil
}

func (o *UploadStixIndicatorsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"indicators",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadStixIndicatorsRequest := _UploadStixIndicatorsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadStixIndicatorsRequest)

	if err != nil {
		return err
	}

	*o = UploadStixIndicatorsRequest(varUploadStixIndicatorsRequest)

	return err
}

type NullableUploadStixIndicatorsRequest struct {
	value *UploadStixIndicatorsRequest
	isSet bool
}

func (v NullableUploadStixIndicatorsRequest) Get() *UploadStixIndicatorsRequest {
	return v.value
}

func (v *NullableUploadStixIndicatorsRequest) Set(val *UploadStixIndicatorsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadStixIndicatorsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadStixIndicatorsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadStixIndicatorsRequest(val *UploadStixIndicatorsRequest) *NullableUploadStixIndicatorsRequest {
	return &NullableUploadStixIndicatorsRequest{value: val, isSet: true}
}

func (v NullableUploadStixIndicatorsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadStixIndicatorsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


