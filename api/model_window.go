/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the Window type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Window{}

// Window Evaluate SLI using successful or unsuccessful windows over compliance period.
type Window struct {
	// Type of Raw Data Queries for SLI (Logs/Metrics).
	QueryType string `json:"queryType"`
	// Queries for defining SLI.
	Queries []SliQueryGroup `json:"queries"`
	// Threshold for classifying window as successful or unsuccessful.
	Threshold float32 `json:"threshold"`
	// Comparison function with window threshold (LessThan/GreaterThan/LessThanOrEqual/GreaterThanOrEqual).
	Op string `json:"op"`
	// Aggregation function applied over each window to arrive at SLI. Must be `Avg`, `Min`, `Max`, `Sum`, or percentile of the form `pX` where `X` is an integer between 0 and 100.
	Aggregation *string `json:"aggregation,omitempty"`
	// Size of the aggregation window (minimum of 1m and maximum of 1h).
	Size string `json:"size"`
}

// NewWindow instantiates a new Window object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWindow(queryType string, queries []SliQueryGroup, threshold float32, op string, size string, evaluationType string) *Window {
	this := Window{}
	this.QueryType = queryType
	this.Queries = queries
	this.EvaluationType = evaluationType
	this.Threshold = threshold
	this.Op = op
	this.Size = size
	return &this
}

// NewWindowWithDefaults instantiates a new Window object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWindowWithDefaults() *Window {
	this := Window{}
	return &this
}

// GetQueryType returns the QueryType field value
func (o *Window) GetQueryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value
// and a boolean to check if the value has been set.
func (o *Window) GetQueryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryType, true
}

// SetQueryType sets field value
func (o *Window) SetQueryType(v string) {
	o.QueryType = v
}

// GetQueries returns the Queries field value
func (o *Window) GetQueries() []SliQueryGroup {
	if o == nil {
		var ret []SliQueryGroup
		return ret
	}

	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value
// and a boolean to check if the value has been set.
func (o *Window) GetQueriesOk() ([]SliQueryGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Queries, true
}

// SetQueries sets field value
func (o *Window) SetQueries(v []SliQueryGroup) {
	o.Queries = v
}

// GetThreshold returns the Threshold field value
func (o *Window) GetThreshold() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *Window) GetThresholdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *Window) SetThreshold(v float32) {
	o.Threshold = v
}

// GetOp returns the Op field value
func (o *Window) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *Window) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *Window) SetOp(v string) {
	o.Op = v
}

// GetAggregation returns the Aggregation field value if set, zero value otherwise.
func (o *Window) GetAggregation() string {
	if o == nil || IsNil(o.Aggregation) {
		var ret string
		return ret
	}
	return *o.Aggregation
}

// GetAggregationOk returns a tuple with the Aggregation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Window) GetAggregationOk() (*string, bool) {
	if o == nil || IsNil(o.Aggregation) {
		return nil, false
	}
	return o.Aggregation, true
}

// HasAggregation returns a boolean if a field has been set.
func (o *Window) HasAggregation() bool {
	if o != nil && !IsNil(o.Aggregation) {
		return true
	}

	return false
}

// SetAggregation gets a reference to the given string and assigns it to the Aggregation field.
func (o *Window) SetAggregation(v string) {
	o.Aggregation = &v
}

// GetSize returns the Size field value
func (o *Window) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Window) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Window) SetSize(v string) {
	o.Size = v
}

func (o Window) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Window) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queryType"] = o.QueryType
	toSerialize["queries"] = o.Queries
	toSerialize["threshold"] = o.Threshold
	toSerialize["op"] = o.Op
	if !IsNil(o.Aggregation) {
		toSerialize["aggregation"] = o.Aggregation
	}
	toSerialize["size"] = o.Size
	return toSerialize, nil
}

type NullableWindow struct {
	value *Window
	isSet bool
}

func (v NullableWindow) Get() *Window {
	return v.value
}

func (v *NullableWindow) Set(val *Window) {
	v.value = val
	v.isSet = true
}

func (v NullableWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWindow(val *Window) *NullableWindow {
	return &NullableWindow{value: val, isSet: true}
}

func (v NullableWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


