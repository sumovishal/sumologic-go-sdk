/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MonitorNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorNotification{}

// MonitorNotification struct for MonitorNotification
type MonitorNotification struct {
	Notification Action `json:"notification"`
	// The trigger types assigned to send this notification.
	RunForTriggerTypes []string `json:"runForTriggerTypes"`
}

// NewMonitorNotification instantiates a new MonitorNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorNotification(notification Action, runForTriggerTypes []string) *MonitorNotification {
	this := MonitorNotification{}
	this.Notification = notification
	this.RunForTriggerTypes = runForTriggerTypes
	return &this
}

// NewMonitorNotificationWithDefaults instantiates a new MonitorNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorNotificationWithDefaults() *MonitorNotification {
	this := MonitorNotification{}
	return &this
}

// GetNotification returns the Notification field value
func (o *MonitorNotification) GetNotification() Action {
	if o == nil {
		var ret Action
		return ret
	}

	return o.Notification
}

// GetNotificationOk returns a tuple with the Notification field value
// and a boolean to check if the value has been set.
func (o *MonitorNotification) GetNotificationOk() (*Action, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Notification, true
}

// SetNotification sets field value
func (o *MonitorNotification) SetNotification(v Action) {
	o.Notification = v
}

// GetRunForTriggerTypes returns the RunForTriggerTypes field value
func (o *MonitorNotification) GetRunForTriggerTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RunForTriggerTypes
}

// GetRunForTriggerTypesOk returns a tuple with the RunForTriggerTypes field value
// and a boolean to check if the value has been set.
func (o *MonitorNotification) GetRunForTriggerTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunForTriggerTypes, true
}

// SetRunForTriggerTypes sets field value
func (o *MonitorNotification) SetRunForTriggerTypes(v []string) {
	o.RunForTriggerTypes = v
}

func (o MonitorNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notification"] = o.Notification
	toSerialize["runForTriggerTypes"] = o.RunForTriggerTypes
	return toSerialize, nil
}

type NullableMonitorNotification struct {
	value *MonitorNotification
	isSet bool
}

func (v NullableMonitorNotification) Get() *MonitorNotification {
	return v.value
}

func (v *NullableMonitorNotification) Set(val *MonitorNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorNotification(val *MonitorNotification) *NullableMonitorNotification {
	return &NullableMonitorNotification{value: val, isSet: true}
}

func (v NullableMonitorNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


