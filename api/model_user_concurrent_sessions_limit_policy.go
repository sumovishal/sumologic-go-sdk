/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserConcurrentSessionsLimitPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserConcurrentSessionsLimitPolicy{}

// UserConcurrentSessionsLimitPolicy User Concurrent Sessions Limit policy.
type UserConcurrentSessionsLimitPolicy struct {
	// Whether the User Concurrent Sessions Limit policy is enabled.
	Enabled bool `json:"enabled"`
	// Maximum number of concurrent sessions a user may have.
	MaxConcurrentSessions *int32 `json:"maxConcurrentSessions,omitempty"`
}

// NewUserConcurrentSessionsLimitPolicy instantiates a new UserConcurrentSessionsLimitPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConcurrentSessionsLimitPolicy(enabled bool) *UserConcurrentSessionsLimitPolicy {
	this := UserConcurrentSessionsLimitPolicy{}
	this.Enabled = enabled
	var maxConcurrentSessions int32 = 100
	this.MaxConcurrentSessions = &maxConcurrentSessions
	return &this
}

// NewUserConcurrentSessionsLimitPolicyWithDefaults instantiates a new UserConcurrentSessionsLimitPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConcurrentSessionsLimitPolicyWithDefaults() *UserConcurrentSessionsLimitPolicy {
	this := UserConcurrentSessionsLimitPolicy{}
	var maxConcurrentSessions int32 = 100
	this.MaxConcurrentSessions = &maxConcurrentSessions
	return &this
}

// GetEnabled returns the Enabled field value
func (o *UserConcurrentSessionsLimitPolicy) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UserConcurrentSessionsLimitPolicy) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UserConcurrentSessionsLimitPolicy) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMaxConcurrentSessions returns the MaxConcurrentSessions field value if set, zero value otherwise.
func (o *UserConcurrentSessionsLimitPolicy) GetMaxConcurrentSessions() int32 {
	if o == nil || IsNil(o.MaxConcurrentSessions) {
		var ret int32
		return ret
	}
	return *o.MaxConcurrentSessions
}

// GetMaxConcurrentSessionsOk returns a tuple with the MaxConcurrentSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConcurrentSessionsLimitPolicy) GetMaxConcurrentSessionsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxConcurrentSessions) {
		return nil, false
	}
	return o.MaxConcurrentSessions, true
}

// HasMaxConcurrentSessions returns a boolean if a field has been set.
func (o *UserConcurrentSessionsLimitPolicy) HasMaxConcurrentSessions() bool {
	if o != nil && !IsNil(o.MaxConcurrentSessions) {
		return true
	}

	return false
}

// SetMaxConcurrentSessions gets a reference to the given int32 and assigns it to the MaxConcurrentSessions field.
func (o *UserConcurrentSessionsLimitPolicy) SetMaxConcurrentSessions(v int32) {
	o.MaxConcurrentSessions = &v
}

func (o UserConcurrentSessionsLimitPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserConcurrentSessionsLimitPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.MaxConcurrentSessions) {
		toSerialize["maxConcurrentSessions"] = o.MaxConcurrentSessions
	}
	return toSerialize, nil
}

type NullableUserConcurrentSessionsLimitPolicy struct {
	value *UserConcurrentSessionsLimitPolicy
	isSet bool
}

func (v NullableUserConcurrentSessionsLimitPolicy) Get() *UserConcurrentSessionsLimitPolicy {
	return v.value
}

func (v *NullableUserConcurrentSessionsLimitPolicy) Set(val *UserConcurrentSessionsLimitPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConcurrentSessionsLimitPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConcurrentSessionsLimitPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConcurrentSessionsLimitPolicy(val *UserConcurrentSessionsLimitPolicy) *NullableUserConcurrentSessionsLimitPolicy {
	return &NullableUserConcurrentSessionsLimitPolicy{value: val, isSet: true}
}

func (v NullableUserConcurrentSessionsLimitPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConcurrentSessionsLimitPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


