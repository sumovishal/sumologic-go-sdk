/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the ParsersLibraryFolderExport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParsersLibraryFolderExport{}

// ParsersLibraryFolderExport struct for ParsersLibraryFolderExport
type ParsersLibraryFolderExport struct {
	ParsersLibraryExportBase
	// Children of the folder
	Children []ParsersLibraryExportBase `json:"children,omitempty"`
}

// NewParsersLibraryFolderExport instantiates a new ParsersLibraryFolderExport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParsersLibraryFolderExport(name string, description string, type_ string) *ParsersLibraryFolderExport {
	this := ParsersLibraryFolderExport{}
	this.Name = name
	this.Description = description
	this.Type = type_
	return &this
}

// NewParsersLibraryFolderExportWithDefaults instantiates a new ParsersLibraryFolderExport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParsersLibraryFolderExportWithDefaults() *ParsersLibraryFolderExport {
	this := ParsersLibraryFolderExport{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *ParsersLibraryFolderExport) GetChildren() []ParsersLibraryExportBase {
	if o == nil || IsNil(o.Children) {
		var ret []ParsersLibraryExportBase
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParsersLibraryFolderExport) GetChildrenOk() ([]ParsersLibraryExportBase, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *ParsersLibraryFolderExport) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []ParsersLibraryExportBase and assigns it to the Children field.
func (o *ParsersLibraryFolderExport) SetChildren(v []ParsersLibraryExportBase) {
	o.Children = v
}

func (o ParsersLibraryFolderExport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParsersLibraryFolderExport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedParsersLibraryExportBase, errParsersLibraryExportBase := json.Marshal(o.ParsersLibraryExportBase)
	if errParsersLibraryExportBase != nil {
		return map[string]interface{}{}, errParsersLibraryExportBase
	}
	errParsersLibraryExportBase = json.Unmarshal([]byte(serializedParsersLibraryExportBase), &toSerialize)
	if errParsersLibraryExportBase != nil {
		return map[string]interface{}{}, errParsersLibraryExportBase
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

type NullableParsersLibraryFolderExport struct {
	value *ParsersLibraryFolderExport
	isSet bool
}

func (v NullableParsersLibraryFolderExport) Get() *ParsersLibraryFolderExport {
	return v.value
}

func (v *NullableParsersLibraryFolderExport) Set(val *ParsersLibraryFolderExport) {
	v.value = val
	v.isSet = true
}

func (v NullableParsersLibraryFolderExport) IsSet() bool {
	return v.isSet
}

func (v *NullableParsersLibraryFolderExport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParsersLibraryFolderExport(val *ParsersLibraryFolderExport) *NullableParsersLibraryFolderExport {
	return &NullableParsersLibraryFolderExport{value: val, isSet: true}
}

func (v NullableParsersLibraryFolderExport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParsersLibraryFolderExport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


