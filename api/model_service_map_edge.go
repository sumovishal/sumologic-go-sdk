/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ServiceMapEdge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceMapEdge{}

// ServiceMapEdge struct for ServiceMapEdge
type ServiceMapEdge struct {
	// Name of a source service. Edge is directed from source to target.
	Source string `json:"source"`
	// Name of a target service. Edge is directed from source to target.
	Target string `json:"target"`
	// The last time in UTC an edge has been seen. Formatted as defined by date-time - RFC3339.
	LastSeenAt time.Time `json:"lastSeenAt"`
}

type _ServiceMapEdge ServiceMapEdge

// NewServiceMapEdge instantiates a new ServiceMapEdge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceMapEdge(source string, target string, lastSeenAt time.Time) *ServiceMapEdge {
	this := ServiceMapEdge{}
	this.Source = source
	this.Target = target
	this.LastSeenAt = lastSeenAt
	return &this
}

// NewServiceMapEdgeWithDefaults instantiates a new ServiceMapEdge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceMapEdgeWithDefaults() *ServiceMapEdge {
	this := ServiceMapEdge{}
	return &this
}

// GetSource returns the Source field value
func (o *ServiceMapEdge) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ServiceMapEdge) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ServiceMapEdge) SetSource(v string) {
	o.Source = v
}

// GetTarget returns the Target field value
func (o *ServiceMapEdge) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *ServiceMapEdge) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *ServiceMapEdge) SetTarget(v string) {
	o.Target = v
}

// GetLastSeenAt returns the LastSeenAt field value
func (o *ServiceMapEdge) GetLastSeenAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastSeenAt
}

// GetLastSeenAtOk returns a tuple with the LastSeenAt field value
// and a boolean to check if the value has been set.
func (o *ServiceMapEdge) GetLastSeenAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastSeenAt, true
}

// SetLastSeenAt sets field value
func (o *ServiceMapEdge) SetLastSeenAt(v time.Time) {
	o.LastSeenAt = v
}

func (o ServiceMapEdge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceMapEdge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["target"] = o.Target
	toSerialize["lastSeenAt"] = o.LastSeenAt
	return toSerialize, nil
}

func (o *ServiceMapEdge) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"target",
		"lastSeenAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceMapEdge := _ServiceMapEdge{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServiceMapEdge)

	if err != nil {
		return err
	}

	*o = ServiceMapEdge(varServiceMapEdge)

	return err
}

type NullableServiceMapEdge struct {
	value *ServiceMapEdge
	isSet bool
}

func (v NullableServiceMapEdge) Get() *ServiceMapEdge {
	return v.value
}

func (v *NullableServiceMapEdge) Set(val *ServiceMapEdge) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceMapEdge) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceMapEdge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceMapEdge(val *ServiceMapEdge) *NullableServiceMapEdge {
	return &NullableServiceMapEdge{value: val, isSet: true}
}

func (v NullableServiceMapEdge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceMapEdge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


