/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// MonitorsLibraryBase struct for MonitorsLibraryBase
type MonitorsLibraryBase struct {
	// Name of the monitor or folder.
	Name string `json:"name"`
	// Description of the monitor or folder.
	Description *string `json:"description,omitempty"`
	// Type of the object model. Valid values:   1) MonitorsLibraryMonitor   2) MonitorsLibraryFolder
	Type string `json:"type"`
}

// NewMonitorsLibraryBase instantiates a new MonitorsLibraryBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorsLibraryBase(name string, type_ string) *MonitorsLibraryBase {
	this := MonitorsLibraryBase{}
	this.Name = name
	var description string = ""
	this.Description = &description
	this.Type = type_
	return &this
}

// NewMonitorsLibraryBaseWithDefaults instantiates a new MonitorsLibraryBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorsLibraryBaseWithDefaults() *MonitorsLibraryBase {
	this := MonitorsLibraryBase{}
	var description string = ""
	this.Description = &description
	return &this
}

// GetName returns the Name field value
func (o *MonitorsLibraryBase) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MonitorsLibraryBase) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MonitorsLibraryBase) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MonitorsLibraryBase) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorsLibraryBase) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MonitorsLibraryBase) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MonitorsLibraryBase) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *MonitorsLibraryBase) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MonitorsLibraryBase) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MonitorsLibraryBase) SetType(v string) {
	o.Type = v
}

func (o MonitorsLibraryBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorsLibraryBase struct {
	value *MonitorsLibraryBase
	isSet bool
}

func (v NullableMonitorsLibraryBase) Get() *MonitorsLibraryBase {
	return v.value
}

func (v *NullableMonitorsLibraryBase) Set(val *MonitorsLibraryBase) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorsLibraryBase) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorsLibraryBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorsLibraryBase(val *MonitorsLibraryBase) *NullableMonitorsLibraryBase {
	return &NullableMonitorsLibraryBase{value: val, isSet: true}
}

func (v NullableMonitorsLibraryBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorsLibraryBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


