/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ChildUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChildUsage{}

// ChildUsage struct for ChildUsage
type ChildUsage struct {
	// Total Credits used by the child org.
	TotalCreditsUsed float64 `json:"totalCreditsUsed"`
	// Percentage of used credits from the allocated credits.
	UsagePercentage *float64 `json:"usagePercentage,omitempty"`
	// Forecasted percentage of credits will be used in the given time period.
	ForecastPercentage *float64 `json:"forecastPercentage,omitempty"`
	// Week over week usage percentage for the subscription period.
	UsagePercentChangeWoW *float64 `json:"usagePercentChangeWoW,omitempty"`
	// Percentage of usage change over the given time period.
	UsagePercentChange *float64 `json:"usagePercentChange,omitempty"`
}

// NewChildUsage instantiates a new ChildUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChildUsage(totalCreditsUsed float64) *ChildUsage {
	this := ChildUsage{}
	this.TotalCreditsUsed = totalCreditsUsed
	return &this
}

// NewChildUsageWithDefaults instantiates a new ChildUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChildUsageWithDefaults() *ChildUsage {
	this := ChildUsage{}
	return &this
}

// GetTotalCreditsUsed returns the TotalCreditsUsed field value
func (o *ChildUsage) GetTotalCreditsUsed() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalCreditsUsed
}

// GetTotalCreditsUsedOk returns a tuple with the TotalCreditsUsed field value
// and a boolean to check if the value has been set.
func (o *ChildUsage) GetTotalCreditsUsedOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCreditsUsed, true
}

// SetTotalCreditsUsed sets field value
func (o *ChildUsage) SetTotalCreditsUsed(v float64) {
	o.TotalCreditsUsed = v
}

// GetUsagePercentage returns the UsagePercentage field value if set, zero value otherwise.
func (o *ChildUsage) GetUsagePercentage() float64 {
	if o == nil || IsNil(o.UsagePercentage) {
		var ret float64
		return ret
	}
	return *o.UsagePercentage
}

// GetUsagePercentageOk returns a tuple with the UsagePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildUsage) GetUsagePercentageOk() (*float64, bool) {
	if o == nil || IsNil(o.UsagePercentage) {
		return nil, false
	}
	return o.UsagePercentage, true
}

// HasUsagePercentage returns a boolean if a field has been set.
func (o *ChildUsage) HasUsagePercentage() bool {
	if o != nil && !IsNil(o.UsagePercentage) {
		return true
	}

	return false
}

// SetUsagePercentage gets a reference to the given float64 and assigns it to the UsagePercentage field.
func (o *ChildUsage) SetUsagePercentage(v float64) {
	o.UsagePercentage = &v
}

// GetForecastPercentage returns the ForecastPercentage field value if set, zero value otherwise.
func (o *ChildUsage) GetForecastPercentage() float64 {
	if o == nil || IsNil(o.ForecastPercentage) {
		var ret float64
		return ret
	}
	return *o.ForecastPercentage
}

// GetForecastPercentageOk returns a tuple with the ForecastPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildUsage) GetForecastPercentageOk() (*float64, bool) {
	if o == nil || IsNil(o.ForecastPercentage) {
		return nil, false
	}
	return o.ForecastPercentage, true
}

// HasForecastPercentage returns a boolean if a field has been set.
func (o *ChildUsage) HasForecastPercentage() bool {
	if o != nil && !IsNil(o.ForecastPercentage) {
		return true
	}

	return false
}

// SetForecastPercentage gets a reference to the given float64 and assigns it to the ForecastPercentage field.
func (o *ChildUsage) SetForecastPercentage(v float64) {
	o.ForecastPercentage = &v
}

// GetUsagePercentChangeWoW returns the UsagePercentChangeWoW field value if set, zero value otherwise.
func (o *ChildUsage) GetUsagePercentChangeWoW() float64 {
	if o == nil || IsNil(o.UsagePercentChangeWoW) {
		var ret float64
		return ret
	}
	return *o.UsagePercentChangeWoW
}

// GetUsagePercentChangeWoWOk returns a tuple with the UsagePercentChangeWoW field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildUsage) GetUsagePercentChangeWoWOk() (*float64, bool) {
	if o == nil || IsNil(o.UsagePercentChangeWoW) {
		return nil, false
	}
	return o.UsagePercentChangeWoW, true
}

// HasUsagePercentChangeWoW returns a boolean if a field has been set.
func (o *ChildUsage) HasUsagePercentChangeWoW() bool {
	if o != nil && !IsNil(o.UsagePercentChangeWoW) {
		return true
	}

	return false
}

// SetUsagePercentChangeWoW gets a reference to the given float64 and assigns it to the UsagePercentChangeWoW field.
func (o *ChildUsage) SetUsagePercentChangeWoW(v float64) {
	o.UsagePercentChangeWoW = &v
}

// GetUsagePercentChange returns the UsagePercentChange field value if set, zero value otherwise.
func (o *ChildUsage) GetUsagePercentChange() float64 {
	if o == nil || IsNil(o.UsagePercentChange) {
		var ret float64
		return ret
	}
	return *o.UsagePercentChange
}

// GetUsagePercentChangeOk returns a tuple with the UsagePercentChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildUsage) GetUsagePercentChangeOk() (*float64, bool) {
	if o == nil || IsNil(o.UsagePercentChange) {
		return nil, false
	}
	return o.UsagePercentChange, true
}

// HasUsagePercentChange returns a boolean if a field has been set.
func (o *ChildUsage) HasUsagePercentChange() bool {
	if o != nil && !IsNil(o.UsagePercentChange) {
		return true
	}

	return false
}

// SetUsagePercentChange gets a reference to the given float64 and assigns it to the UsagePercentChange field.
func (o *ChildUsage) SetUsagePercentChange(v float64) {
	o.UsagePercentChange = &v
}

func (o ChildUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChildUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalCreditsUsed"] = o.TotalCreditsUsed
	if !IsNil(o.UsagePercentage) {
		toSerialize["usagePercentage"] = o.UsagePercentage
	}
	if !IsNil(o.ForecastPercentage) {
		toSerialize["forecastPercentage"] = o.ForecastPercentage
	}
	if !IsNil(o.UsagePercentChangeWoW) {
		toSerialize["usagePercentChangeWoW"] = o.UsagePercentChangeWoW
	}
	if !IsNil(o.UsagePercentChange) {
		toSerialize["usagePercentChange"] = o.UsagePercentChange
	}
	return toSerialize, nil
}

type NullableChildUsage struct {
	value *ChildUsage
	isSet bool
}

func (v NullableChildUsage) Get() *ChildUsage {
	return v.value
}

func (v *NullableChildUsage) Set(val *ChildUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableChildUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableChildUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChildUsage(val *ChildUsage) *NullableChildUsage {
	return &NullableChildUsage{value: val, isSet: true}
}

func (v NullableChildUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChildUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


