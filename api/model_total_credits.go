/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TotalCredits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TotalCredits{}

// TotalCredits Total amount of credits to be deducted from the parent organization corresponding to the baselines
type TotalCredits struct {
	// Numerical value of the amount of credits
	TotalCredits float64 `json:"totalCredits"`
	Breakdown *CreditsBreakdown `json:"breakdown,omitempty"`
}

type _TotalCredits TotalCredits

// NewTotalCredits instantiates a new TotalCredits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotalCredits(totalCredits float64) *TotalCredits {
	this := TotalCredits{}
	this.TotalCredits = totalCredits
	return &this
}

// NewTotalCreditsWithDefaults instantiates a new TotalCredits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotalCreditsWithDefaults() *TotalCredits {
	this := TotalCredits{}
	return &this
}

// GetTotalCredits returns the TotalCredits field value
func (o *TotalCredits) GetTotalCredits() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalCredits
}

// GetTotalCreditsOk returns a tuple with the TotalCredits field value
// and a boolean to check if the value has been set.
func (o *TotalCredits) GetTotalCreditsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCredits, true
}

// SetTotalCredits sets field value
func (o *TotalCredits) SetTotalCredits(v float64) {
	o.TotalCredits = v
}

// GetBreakdown returns the Breakdown field value if set, zero value otherwise.
func (o *TotalCredits) GetBreakdown() CreditsBreakdown {
	if o == nil || IsNil(o.Breakdown) {
		var ret CreditsBreakdown
		return ret
	}
	return *o.Breakdown
}

// GetBreakdownOk returns a tuple with the Breakdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalCredits) GetBreakdownOk() (*CreditsBreakdown, bool) {
	if o == nil || IsNil(o.Breakdown) {
		return nil, false
	}
	return o.Breakdown, true
}

// HasBreakdown returns a boolean if a field has been set.
func (o *TotalCredits) HasBreakdown() bool {
	if o != nil && !IsNil(o.Breakdown) {
		return true
	}

	return false
}

// SetBreakdown gets a reference to the given CreditsBreakdown and assigns it to the Breakdown field.
func (o *TotalCredits) SetBreakdown(v CreditsBreakdown) {
	o.Breakdown = &v
}

func (o TotalCredits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TotalCredits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalCredits"] = o.TotalCredits
	if !IsNil(o.Breakdown) {
		toSerialize["breakdown"] = o.Breakdown
	}
	return toSerialize, nil
}

func (o *TotalCredits) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"totalCredits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTotalCredits := _TotalCredits{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTotalCredits)

	if err != nil {
		return err
	}

	*o = TotalCredits(varTotalCredits)

	return err
}

type NullableTotalCredits struct {
	value *TotalCredits
	isSet bool
}

func (v NullableTotalCredits) Get() *TotalCredits {
	return v.value
}

func (v *NullableTotalCredits) Set(val *TotalCredits) {
	v.value = val
	v.isSet = true
}

func (v NullableTotalCredits) IsSet() bool {
	return v.isSet
}

func (v *NullableTotalCredits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotalCredits(val *TotalCredits) *NullableTotalCredits {
	return &NullableTotalCredits{value: val, isSet: true}
}

func (v NullableTotalCredits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotalCredits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


