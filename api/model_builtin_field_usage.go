/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BuiltinFieldUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuiltinFieldUsage{}

// BuiltinFieldUsage struct for BuiltinFieldUsage
type BuiltinFieldUsage struct {
	// Field name.
	FieldName string `json:"fieldName"`
	// Identifier of the field.
	FieldId string `json:"fieldId"`
	// Field type. Possible values are `String`, `Long`, `Int`, `Double`, `Boolean`.
	DataType string `json:"dataType" validate:"regexp=^(String|Long|Int|Double|Boolean)$"`
	// Indicates whether the field is enabled and its values are being accepted. Possible values are `Enabled` and `Disabled`.
	State string `json:"state" validate:"regexp=^(Enabled|Disabled)$"`
	// An array of hexadecimal identifiers of field extraction rules which use this field.
	FieldExtractionRules []string `json:"fieldExtractionRules,omitempty"`
	// An array of hexadecimal identifiers of roles which use this field in the search filter.
	Roles []string `json:"roles,omitempty"`
	// An array of hexadecimal identifiers of partitions which use this field in the routing expression.
	Partitions []string `json:"partitions,omitempty"`
}

type _BuiltinFieldUsage BuiltinFieldUsage

// NewBuiltinFieldUsage instantiates a new BuiltinFieldUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuiltinFieldUsage(fieldName string, fieldId string, dataType string, state string) *BuiltinFieldUsage {
	this := BuiltinFieldUsage{}
	this.FieldName = fieldName
	this.FieldId = fieldId
	this.DataType = dataType
	this.State = state
	return &this
}

// NewBuiltinFieldUsageWithDefaults instantiates a new BuiltinFieldUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuiltinFieldUsageWithDefaults() *BuiltinFieldUsage {
	this := BuiltinFieldUsage{}
	return &this
}

// GetFieldName returns the FieldName field value
func (o *BuiltinFieldUsage) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *BuiltinFieldUsage) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *BuiltinFieldUsage) SetFieldName(v string) {
	o.FieldName = v
}

// GetFieldId returns the FieldId field value
func (o *BuiltinFieldUsage) GetFieldId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldId
}

// GetFieldIdOk returns a tuple with the FieldId field value
// and a boolean to check if the value has been set.
func (o *BuiltinFieldUsage) GetFieldIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldId, true
}

// SetFieldId sets field value
func (o *BuiltinFieldUsage) SetFieldId(v string) {
	o.FieldId = v
}

// GetDataType returns the DataType field value
func (o *BuiltinFieldUsage) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *BuiltinFieldUsage) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *BuiltinFieldUsage) SetDataType(v string) {
	o.DataType = v
}

// GetState returns the State field value
func (o *BuiltinFieldUsage) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *BuiltinFieldUsage) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *BuiltinFieldUsage) SetState(v string) {
	o.State = v
}

// GetFieldExtractionRules returns the FieldExtractionRules field value if set, zero value otherwise.
func (o *BuiltinFieldUsage) GetFieldExtractionRules() []string {
	if o == nil || IsNil(o.FieldExtractionRules) {
		var ret []string
		return ret
	}
	return o.FieldExtractionRules
}

// GetFieldExtractionRulesOk returns a tuple with the FieldExtractionRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuiltinFieldUsage) GetFieldExtractionRulesOk() ([]string, bool) {
	if o == nil || IsNil(o.FieldExtractionRules) {
		return nil, false
	}
	return o.FieldExtractionRules, true
}

// HasFieldExtractionRules returns a boolean if a field has been set.
func (o *BuiltinFieldUsage) HasFieldExtractionRules() bool {
	if o != nil && !IsNil(o.FieldExtractionRules) {
		return true
	}

	return false
}

// SetFieldExtractionRules gets a reference to the given []string and assigns it to the FieldExtractionRules field.
func (o *BuiltinFieldUsage) SetFieldExtractionRules(v []string) {
	o.FieldExtractionRules = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *BuiltinFieldUsage) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuiltinFieldUsage) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *BuiltinFieldUsage) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *BuiltinFieldUsage) SetRoles(v []string) {
	o.Roles = v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *BuiltinFieldUsage) GetPartitions() []string {
	if o == nil || IsNil(o.Partitions) {
		var ret []string
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuiltinFieldUsage) GetPartitionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *BuiltinFieldUsage) HasPartitions() bool {
	if o != nil && !IsNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []string and assigns it to the Partitions field.
func (o *BuiltinFieldUsage) SetPartitions(v []string) {
	o.Partitions = v
}

func (o BuiltinFieldUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuiltinFieldUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fieldName"] = o.FieldName
	toSerialize["fieldId"] = o.FieldId
	toSerialize["dataType"] = o.DataType
	toSerialize["state"] = o.State
	if !IsNil(o.FieldExtractionRules) {
		toSerialize["fieldExtractionRules"] = o.FieldExtractionRules
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}
	return toSerialize, nil
}

func (o *BuiltinFieldUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fieldName",
		"fieldId",
		"dataType",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuiltinFieldUsage := _BuiltinFieldUsage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuiltinFieldUsage)

	if err != nil {
		return err
	}

	*o = BuiltinFieldUsage(varBuiltinFieldUsage)

	return err
}

type NullableBuiltinFieldUsage struct {
	value *BuiltinFieldUsage
	isSet bool
}

func (v NullableBuiltinFieldUsage) Get() *BuiltinFieldUsage {
	return v.value
}

func (v *NullableBuiltinFieldUsage) Set(val *BuiltinFieldUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableBuiltinFieldUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableBuiltinFieldUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuiltinFieldUsage(val *BuiltinFieldUsage) *NullableBuiltinFieldUsage {
	return &NullableBuiltinFieldUsage{value: val, isSet: true}
}

func (v NullableBuiltinFieldUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuiltinFieldUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


