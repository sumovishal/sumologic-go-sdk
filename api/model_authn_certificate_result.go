/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuthnCertificateResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthnCertificateResult{}

// AuthnCertificateResult struct for AuthnCertificateResult
type AuthnCertificateResult struct {
	// Authentication Request Signing Certificate for the user.
	Certificate string `json:"certificate"`
}

// NewAuthnCertificateResult instantiates a new AuthnCertificateResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthnCertificateResult(certificate string) *AuthnCertificateResult {
	this := AuthnCertificateResult{}
	this.Certificate = certificate
	return &this
}

// NewAuthnCertificateResultWithDefaults instantiates a new AuthnCertificateResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthnCertificateResultWithDefaults() *AuthnCertificateResult {
	this := AuthnCertificateResult{}
	return &this
}

// GetCertificate returns the Certificate field value
func (o *AuthnCertificateResult) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *AuthnCertificateResult) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *AuthnCertificateResult) SetCertificate(v string) {
	o.Certificate = v
}

func (o AuthnCertificateResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthnCertificateResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate"] = o.Certificate
	return toSerialize, nil
}

type NullableAuthnCertificateResult struct {
	value *AuthnCertificateResult
	isSet bool
}

func (v NullableAuthnCertificateResult) Get() *AuthnCertificateResult {
	return v.value
}

func (v *NullableAuthnCertificateResult) Set(val *AuthnCertificateResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthnCertificateResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthnCertificateResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthnCertificateResult(val *AuthnCertificateResult) *NullableAuthnCertificateResult {
	return &NullableAuthnCertificateResult{value: val, isSet: true}
}

func (v NullableAuthnCertificateResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthnCertificateResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


