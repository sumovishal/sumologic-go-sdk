/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ColoringThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColoringThreshold{}

// ColoringThreshold struct for ColoringThreshold
type ColoringThreshold struct {
	// Color for the threshold.
	Color string `json:"color"`
	// Absolute inclusive threshold to color by.
	Min *float64 `json:"min,omitempty"`
	// Absolute exclusive threshold to color by.
	Max *float64 `json:"max,omitempty"`
}

// NewColoringThreshold instantiates a new ColoringThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColoringThreshold(color string) *ColoringThreshold {
	this := ColoringThreshold{}
	this.Color = color
	return &this
}

// NewColoringThresholdWithDefaults instantiates a new ColoringThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColoringThresholdWithDefaults() *ColoringThreshold {
	this := ColoringThreshold{}
	return &this
}

// GetColor returns the Color field value
func (o *ColoringThreshold) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *ColoringThreshold) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *ColoringThreshold) SetColor(v string) {
	o.Color = v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *ColoringThreshold) GetMin() float64 {
	if o == nil || IsNil(o.Min) {
		var ret float64
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColoringThreshold) GetMinOk() (*float64, bool) {
	if o == nil || IsNil(o.Min) {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *ColoringThreshold) HasMin() bool {
	if o != nil && !IsNil(o.Min) {
		return true
	}

	return false
}

// SetMin gets a reference to the given float64 and assigns it to the Min field.
func (o *ColoringThreshold) SetMin(v float64) {
	o.Min = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *ColoringThreshold) GetMax() float64 {
	if o == nil || IsNil(o.Max) {
		var ret float64
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ColoringThreshold) GetMaxOk() (*float64, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *ColoringThreshold) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given float64 and assigns it to the Max field.
func (o *ColoringThreshold) SetMax(v float64) {
	o.Max = &v
}

func (o ColoringThreshold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColoringThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["color"] = o.Color
	if !IsNil(o.Min) {
		toSerialize["min"] = o.Min
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	return toSerialize, nil
}

type NullableColoringThreshold struct {
	value *ColoringThreshold
	isSet bool
}

func (v NullableColoringThreshold) Get() *ColoringThreshold {
	return v.value
}

func (v *NullableColoringThreshold) Set(val *ColoringThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableColoringThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableColoringThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColoringThreshold(val *ColoringThreshold) *NullableColoringThreshold {
	return &NullableColoringThreshold{value: val, isSet: true}
}

func (v NullableColoringThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColoringThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


