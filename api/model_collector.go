/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// Collector struct for Collector
type Collector struct {
	// Identifier of a collector.
	CollectorId string `json:"collectorId"`
	// Name of a collector.
	CollectorName string `json:"collectorName"`
}

// NewCollector instantiates a new Collector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollector(collectorId string, collectorName string) *Collector {
	this := Collector{}
	this.CollectorId = collectorId
	this.CollectorName = collectorName
	return &this
}

// NewCollectorWithDefaults instantiates a new Collector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectorWithDefaults() *Collector {
	this := Collector{}
	return &this
}

// GetCollectorId returns the CollectorId field value
func (o *Collector) GetCollectorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CollectorId
}

// GetCollectorIdOk returns a tuple with the CollectorId field value
// and a boolean to check if the value has been set.
func (o *Collector) GetCollectorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectorId, true
}

// SetCollectorId sets field value
func (o *Collector) SetCollectorId(v string) {
	o.CollectorId = v
}

// GetCollectorName returns the CollectorName field value
func (o *Collector) GetCollectorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CollectorName
}

// GetCollectorNameOk returns a tuple with the CollectorName field value
// and a boolean to check if the value has been set.
func (o *Collector) GetCollectorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectorName, true
}

// SetCollectorName sets field value
func (o *Collector) SetCollectorName(v string) {
	o.CollectorName = v
}

func (o Collector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["collectorId"] = o.CollectorId
	}
	if true {
		toSerialize["collectorName"] = o.CollectorName
	}
	return json.Marshal(toSerialize)
}

type NullableCollector struct {
	value *Collector
	isSet bool
}

func (v NullableCollector) Get() *Collector {
	return v.value
}

func (v *NullableCollector) Set(val *Collector) {
	v.value = val
	v.isSet = true
}

func (v NullableCollector) IsSet() bool {
	return v.isSet
}

func (v *NullableCollector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollector(val *Collector) *NullableCollector {
	return &NullableCollector{value: val, isSet: true}
}

func (v NullableCollector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


