/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the PasswordPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordPolicy{}

// PasswordPolicy Password Policy
type PasswordPolicy struct {
	// The minimum length of the password.
	MinLength *int32 `json:"minLength,omitempty"`
	// The maximum length of the password. (Setting this to any value other than 128 is no longer supported; this field may be deprecated in the future.)
	MaxLength *int32 `json:"maxLength,omitempty"`
	// If the password must contain lower case characters.
	MustContainLowercase *bool `json:"mustContainLowercase,omitempty"`
	// If the password must contain upper case characters.
	MustContainUppercase *bool `json:"mustContainUppercase,omitempty"`
	// If the password must contain digits.
	MustContainDigits *bool `json:"mustContainDigits,omitempty"`
	// If the password must contain special characters.
	MustContainSpecialChars *bool `json:"mustContainSpecialChars,omitempty"`
	// Maximum number of days that a password can be used before user is required to change it. Put -1 if the user should not have to change their password.
	MaxPasswordAgeInDays *int32 `json:"maxPasswordAgeInDays,omitempty"`
	// The minimum number of unique new passwords that a user must use before an old password can be reused.
	MinUniquePasswords *int32 `json:"minUniquePasswords,omitempty"`
	// Number of failed login attempts allowed before account is locked-out.
	AccountLockoutThreshold *int32 `json:"accountLockoutThreshold,omitempty"`
	// The duration of time in minutes that must elapse from the first failed login attempt after which failed login count is reset to 0.
	FailedLoginResetDurationInMins *int32 `json:"failedLoginResetDurationInMins,omitempty"`
	// The duration of time in minutes that a locked-out account remained locked before getting unlocked automatically.
	AccountLockoutDurationInMins *int32 `json:"accountLockoutDurationInMins,omitempty"`
	// If MFA should be required to log in. By default, this field is set to `false`.
	RequireMfa *bool `json:"requireMfa,omitempty"`
	// If MFA should be remembered on the browser.
	RememberMfa *bool `json:"rememberMfa,omitempty"`
}

// NewPasswordPolicy instantiates a new PasswordPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPolicy() *PasswordPolicy {
	this := PasswordPolicy{}
	var minLength int32 = 8
	this.MinLength = &minLength
	var maxLength int32 = 128
	this.MaxLength = &maxLength
	var mustContainLowercase bool = true
	this.MustContainLowercase = &mustContainLowercase
	var mustContainUppercase bool = true
	this.MustContainUppercase = &mustContainUppercase
	var mustContainDigits bool = true
	this.MustContainDigits = &mustContainDigits
	var mustContainSpecialChars bool = true
	this.MustContainSpecialChars = &mustContainSpecialChars
	var maxPasswordAgeInDays int32 = 365
	this.MaxPasswordAgeInDays = &maxPasswordAgeInDays
	var minUniquePasswords int32 = 10
	this.MinUniquePasswords = &minUniquePasswords
	var accountLockoutThreshold int32 = 6
	this.AccountLockoutThreshold = &accountLockoutThreshold
	var failedLoginResetDurationInMins int32 = 10
	this.FailedLoginResetDurationInMins = &failedLoginResetDurationInMins
	var accountLockoutDurationInMins int32 = 30
	this.AccountLockoutDurationInMins = &accountLockoutDurationInMins
	var requireMfa bool = false
	this.RequireMfa = &requireMfa
	var rememberMfa bool = true
	this.RememberMfa = &rememberMfa
	return &this
}

// NewPasswordPolicyWithDefaults instantiates a new PasswordPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPolicyWithDefaults() *PasswordPolicy {
	this := PasswordPolicy{}
	var minLength int32 = 8
	this.MinLength = &minLength
	var maxLength int32 = 128
	this.MaxLength = &maxLength
	var mustContainLowercase bool = true
	this.MustContainLowercase = &mustContainLowercase
	var mustContainUppercase bool = true
	this.MustContainUppercase = &mustContainUppercase
	var mustContainDigits bool = true
	this.MustContainDigits = &mustContainDigits
	var mustContainSpecialChars bool = true
	this.MustContainSpecialChars = &mustContainSpecialChars
	var maxPasswordAgeInDays int32 = 365
	this.MaxPasswordAgeInDays = &maxPasswordAgeInDays
	var minUniquePasswords int32 = 10
	this.MinUniquePasswords = &minUniquePasswords
	var accountLockoutThreshold int32 = 6
	this.AccountLockoutThreshold = &accountLockoutThreshold
	var failedLoginResetDurationInMins int32 = 10
	this.FailedLoginResetDurationInMins = &failedLoginResetDurationInMins
	var accountLockoutDurationInMins int32 = 30
	this.AccountLockoutDurationInMins = &accountLockoutDurationInMins
	var requireMfa bool = false
	this.RequireMfa = &requireMfa
	var rememberMfa bool = true
	this.RememberMfa = &rememberMfa
	return &this
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *PasswordPolicy) GetMinLength() int32 {
	if o == nil || IsNil(o.MinLength) {
		var ret int32
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMinLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinLength) {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *PasswordPolicy) HasMinLength() bool {
	if o != nil && !IsNil(o.MinLength) {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int32 and assigns it to the MinLength field.
func (o *PasswordPolicy) SetMinLength(v int32) {
	o.MinLength = &v
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *PasswordPolicy) GetMaxLength() int32 {
	if o == nil || IsNil(o.MaxLength) {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMaxLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxLength) {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *PasswordPolicy) HasMaxLength() bool {
	if o != nil && !IsNil(o.MaxLength) {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *PasswordPolicy) SetMaxLength(v int32) {
	o.MaxLength = &v
}

// GetMustContainLowercase returns the MustContainLowercase field value if set, zero value otherwise.
func (o *PasswordPolicy) GetMustContainLowercase() bool {
	if o == nil || IsNil(o.MustContainLowercase) {
		var ret bool
		return ret
	}
	return *o.MustContainLowercase
}

// GetMustContainLowercaseOk returns a tuple with the MustContainLowercase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMustContainLowercaseOk() (*bool, bool) {
	if o == nil || IsNil(o.MustContainLowercase) {
		return nil, false
	}
	return o.MustContainLowercase, true
}

// HasMustContainLowercase returns a boolean if a field has been set.
func (o *PasswordPolicy) HasMustContainLowercase() bool {
	if o != nil && !IsNil(o.MustContainLowercase) {
		return true
	}

	return false
}

// SetMustContainLowercase gets a reference to the given bool and assigns it to the MustContainLowercase field.
func (o *PasswordPolicy) SetMustContainLowercase(v bool) {
	o.MustContainLowercase = &v
}

// GetMustContainUppercase returns the MustContainUppercase field value if set, zero value otherwise.
func (o *PasswordPolicy) GetMustContainUppercase() bool {
	if o == nil || IsNil(o.MustContainUppercase) {
		var ret bool
		return ret
	}
	return *o.MustContainUppercase
}

// GetMustContainUppercaseOk returns a tuple with the MustContainUppercase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMustContainUppercaseOk() (*bool, bool) {
	if o == nil || IsNil(o.MustContainUppercase) {
		return nil, false
	}
	return o.MustContainUppercase, true
}

// HasMustContainUppercase returns a boolean if a field has been set.
func (o *PasswordPolicy) HasMustContainUppercase() bool {
	if o != nil && !IsNil(o.MustContainUppercase) {
		return true
	}

	return false
}

// SetMustContainUppercase gets a reference to the given bool and assigns it to the MustContainUppercase field.
func (o *PasswordPolicy) SetMustContainUppercase(v bool) {
	o.MustContainUppercase = &v
}

// GetMustContainDigits returns the MustContainDigits field value if set, zero value otherwise.
func (o *PasswordPolicy) GetMustContainDigits() bool {
	if o == nil || IsNil(o.MustContainDigits) {
		var ret bool
		return ret
	}
	return *o.MustContainDigits
}

// GetMustContainDigitsOk returns a tuple with the MustContainDigits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMustContainDigitsOk() (*bool, bool) {
	if o == nil || IsNil(o.MustContainDigits) {
		return nil, false
	}
	return o.MustContainDigits, true
}

// HasMustContainDigits returns a boolean if a field has been set.
func (o *PasswordPolicy) HasMustContainDigits() bool {
	if o != nil && !IsNil(o.MustContainDigits) {
		return true
	}

	return false
}

// SetMustContainDigits gets a reference to the given bool and assigns it to the MustContainDigits field.
func (o *PasswordPolicy) SetMustContainDigits(v bool) {
	o.MustContainDigits = &v
}

// GetMustContainSpecialChars returns the MustContainSpecialChars field value if set, zero value otherwise.
func (o *PasswordPolicy) GetMustContainSpecialChars() bool {
	if o == nil || IsNil(o.MustContainSpecialChars) {
		var ret bool
		return ret
	}
	return *o.MustContainSpecialChars
}

// GetMustContainSpecialCharsOk returns a tuple with the MustContainSpecialChars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMustContainSpecialCharsOk() (*bool, bool) {
	if o == nil || IsNil(o.MustContainSpecialChars) {
		return nil, false
	}
	return o.MustContainSpecialChars, true
}

// HasMustContainSpecialChars returns a boolean if a field has been set.
func (o *PasswordPolicy) HasMustContainSpecialChars() bool {
	if o != nil && !IsNil(o.MustContainSpecialChars) {
		return true
	}

	return false
}

// SetMustContainSpecialChars gets a reference to the given bool and assigns it to the MustContainSpecialChars field.
func (o *PasswordPolicy) SetMustContainSpecialChars(v bool) {
	o.MustContainSpecialChars = &v
}

// GetMaxPasswordAgeInDays returns the MaxPasswordAgeInDays field value if set, zero value otherwise.
func (o *PasswordPolicy) GetMaxPasswordAgeInDays() int32 {
	if o == nil || IsNil(o.MaxPasswordAgeInDays) {
		var ret int32
		return ret
	}
	return *o.MaxPasswordAgeInDays
}

// GetMaxPasswordAgeInDaysOk returns a tuple with the MaxPasswordAgeInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMaxPasswordAgeInDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxPasswordAgeInDays) {
		return nil, false
	}
	return o.MaxPasswordAgeInDays, true
}

// HasMaxPasswordAgeInDays returns a boolean if a field has been set.
func (o *PasswordPolicy) HasMaxPasswordAgeInDays() bool {
	if o != nil && !IsNil(o.MaxPasswordAgeInDays) {
		return true
	}

	return false
}

// SetMaxPasswordAgeInDays gets a reference to the given int32 and assigns it to the MaxPasswordAgeInDays field.
func (o *PasswordPolicy) SetMaxPasswordAgeInDays(v int32) {
	o.MaxPasswordAgeInDays = &v
}

// GetMinUniquePasswords returns the MinUniquePasswords field value if set, zero value otherwise.
func (o *PasswordPolicy) GetMinUniquePasswords() int32 {
	if o == nil || IsNil(o.MinUniquePasswords) {
		var ret int32
		return ret
	}
	return *o.MinUniquePasswords
}

// GetMinUniquePasswordsOk returns a tuple with the MinUniquePasswords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMinUniquePasswordsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinUniquePasswords) {
		return nil, false
	}
	return o.MinUniquePasswords, true
}

// HasMinUniquePasswords returns a boolean if a field has been set.
func (o *PasswordPolicy) HasMinUniquePasswords() bool {
	if o != nil && !IsNil(o.MinUniquePasswords) {
		return true
	}

	return false
}

// SetMinUniquePasswords gets a reference to the given int32 and assigns it to the MinUniquePasswords field.
func (o *PasswordPolicy) SetMinUniquePasswords(v int32) {
	o.MinUniquePasswords = &v
}

// GetAccountLockoutThreshold returns the AccountLockoutThreshold field value if set, zero value otherwise.
func (o *PasswordPolicy) GetAccountLockoutThreshold() int32 {
	if o == nil || IsNil(o.AccountLockoutThreshold) {
		var ret int32
		return ret
	}
	return *o.AccountLockoutThreshold
}

// GetAccountLockoutThresholdOk returns a tuple with the AccountLockoutThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetAccountLockoutThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountLockoutThreshold) {
		return nil, false
	}
	return o.AccountLockoutThreshold, true
}

// HasAccountLockoutThreshold returns a boolean if a field has been set.
func (o *PasswordPolicy) HasAccountLockoutThreshold() bool {
	if o != nil && !IsNil(o.AccountLockoutThreshold) {
		return true
	}

	return false
}

// SetAccountLockoutThreshold gets a reference to the given int32 and assigns it to the AccountLockoutThreshold field.
func (o *PasswordPolicy) SetAccountLockoutThreshold(v int32) {
	o.AccountLockoutThreshold = &v
}

// GetFailedLoginResetDurationInMins returns the FailedLoginResetDurationInMins field value if set, zero value otherwise.
func (o *PasswordPolicy) GetFailedLoginResetDurationInMins() int32 {
	if o == nil || IsNil(o.FailedLoginResetDurationInMins) {
		var ret int32
		return ret
	}
	return *o.FailedLoginResetDurationInMins
}

// GetFailedLoginResetDurationInMinsOk returns a tuple with the FailedLoginResetDurationInMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetFailedLoginResetDurationInMinsOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedLoginResetDurationInMins) {
		return nil, false
	}
	return o.FailedLoginResetDurationInMins, true
}

// HasFailedLoginResetDurationInMins returns a boolean if a field has been set.
func (o *PasswordPolicy) HasFailedLoginResetDurationInMins() bool {
	if o != nil && !IsNil(o.FailedLoginResetDurationInMins) {
		return true
	}

	return false
}

// SetFailedLoginResetDurationInMins gets a reference to the given int32 and assigns it to the FailedLoginResetDurationInMins field.
func (o *PasswordPolicy) SetFailedLoginResetDurationInMins(v int32) {
	o.FailedLoginResetDurationInMins = &v
}

// GetAccountLockoutDurationInMins returns the AccountLockoutDurationInMins field value if set, zero value otherwise.
func (o *PasswordPolicy) GetAccountLockoutDurationInMins() int32 {
	if o == nil || IsNil(o.AccountLockoutDurationInMins) {
		var ret int32
		return ret
	}
	return *o.AccountLockoutDurationInMins
}

// GetAccountLockoutDurationInMinsOk returns a tuple with the AccountLockoutDurationInMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetAccountLockoutDurationInMinsOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountLockoutDurationInMins) {
		return nil, false
	}
	return o.AccountLockoutDurationInMins, true
}

// HasAccountLockoutDurationInMins returns a boolean if a field has been set.
func (o *PasswordPolicy) HasAccountLockoutDurationInMins() bool {
	if o != nil && !IsNil(o.AccountLockoutDurationInMins) {
		return true
	}

	return false
}

// SetAccountLockoutDurationInMins gets a reference to the given int32 and assigns it to the AccountLockoutDurationInMins field.
func (o *PasswordPolicy) SetAccountLockoutDurationInMins(v int32) {
	o.AccountLockoutDurationInMins = &v
}

// GetRequireMfa returns the RequireMfa field value if set, zero value otherwise.
func (o *PasswordPolicy) GetRequireMfa() bool {
	if o == nil || IsNil(o.RequireMfa) {
		var ret bool
		return ret
	}
	return *o.RequireMfa
}

// GetRequireMfaOk returns a tuple with the RequireMfa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetRequireMfaOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireMfa) {
		return nil, false
	}
	return o.RequireMfa, true
}

// HasRequireMfa returns a boolean if a field has been set.
func (o *PasswordPolicy) HasRequireMfa() bool {
	if o != nil && !IsNil(o.RequireMfa) {
		return true
	}

	return false
}

// SetRequireMfa gets a reference to the given bool and assigns it to the RequireMfa field.
func (o *PasswordPolicy) SetRequireMfa(v bool) {
	o.RequireMfa = &v
}

// GetRememberMfa returns the RememberMfa field value if set, zero value otherwise.
func (o *PasswordPolicy) GetRememberMfa() bool {
	if o == nil || IsNil(o.RememberMfa) {
		var ret bool
		return ret
	}
	return *o.RememberMfa
}

// GetRememberMfaOk returns a tuple with the RememberMfa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetRememberMfaOk() (*bool, bool) {
	if o == nil || IsNil(o.RememberMfa) {
		return nil, false
	}
	return o.RememberMfa, true
}

// HasRememberMfa returns a boolean if a field has been set.
func (o *PasswordPolicy) HasRememberMfa() bool {
	if o != nil && !IsNil(o.RememberMfa) {
		return true
	}

	return false
}

// SetRememberMfa gets a reference to the given bool and assigns it to the RememberMfa field.
func (o *PasswordPolicy) SetRememberMfa(v bool) {
	o.RememberMfa = &v
}

func (o PasswordPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinLength) {
		toSerialize["minLength"] = o.MinLength
	}
	if !IsNil(o.MaxLength) {
		toSerialize["maxLength"] = o.MaxLength
	}
	if !IsNil(o.MustContainLowercase) {
		toSerialize["mustContainLowercase"] = o.MustContainLowercase
	}
	if !IsNil(o.MustContainUppercase) {
		toSerialize["mustContainUppercase"] = o.MustContainUppercase
	}
	if !IsNil(o.MustContainDigits) {
		toSerialize["mustContainDigits"] = o.MustContainDigits
	}
	if !IsNil(o.MustContainSpecialChars) {
		toSerialize["mustContainSpecialChars"] = o.MustContainSpecialChars
	}
	if !IsNil(o.MaxPasswordAgeInDays) {
		toSerialize["maxPasswordAgeInDays"] = o.MaxPasswordAgeInDays
	}
	if !IsNil(o.MinUniquePasswords) {
		toSerialize["minUniquePasswords"] = o.MinUniquePasswords
	}
	if !IsNil(o.AccountLockoutThreshold) {
		toSerialize["accountLockoutThreshold"] = o.AccountLockoutThreshold
	}
	if !IsNil(o.FailedLoginResetDurationInMins) {
		toSerialize["failedLoginResetDurationInMins"] = o.FailedLoginResetDurationInMins
	}
	if !IsNil(o.AccountLockoutDurationInMins) {
		toSerialize["accountLockoutDurationInMins"] = o.AccountLockoutDurationInMins
	}
	if !IsNil(o.RequireMfa) {
		toSerialize["requireMfa"] = o.RequireMfa
	}
	if !IsNil(o.RememberMfa) {
		toSerialize["rememberMfa"] = o.RememberMfa
	}
	return toSerialize, nil
}

type NullablePasswordPolicy struct {
	value *PasswordPolicy
	isSet bool
}

func (v NullablePasswordPolicy) Get() *PasswordPolicy {
	return v.value
}

func (v *NullablePasswordPolicy) Set(val *PasswordPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPolicy(val *PasswordPolicy) *NullablePasswordPolicy {
	return &NullablePasswordPolicy{value: val, isSet: true}
}

func (v NullablePasswordPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


