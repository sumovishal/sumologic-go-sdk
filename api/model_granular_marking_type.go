/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the GranularMarkingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GranularMarkingType{}

// GranularMarkingType struct for GranularMarkingType
type GranularMarkingType struct {
	// The lang property identifies the language of the text identified by this marking
	Lang *string `json:"lang,omitempty"`
	// The marking_ref property specifies the ID of the marking-definition object that describes the marking
	MarkingRef *string `json:"marking_ref,omitempty"`
	// The selectors property specifies a list of selectors for content contained within the STIX Object in which this property appears
	Selectors []string `json:"selectors"`
}

// NewGranularMarkingType instantiates a new GranularMarkingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGranularMarkingType(selectors []string) *GranularMarkingType {
	this := GranularMarkingType{}
	this.Selectors = selectors
	return &this
}

// NewGranularMarkingTypeWithDefaults instantiates a new GranularMarkingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGranularMarkingTypeWithDefaults() *GranularMarkingType {
	this := GranularMarkingType{}
	return &this
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *GranularMarkingType) GetLang() string {
	if o == nil || IsNil(o.Lang) {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GranularMarkingType) GetLangOk() (*string, bool) {
	if o == nil || IsNil(o.Lang) {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *GranularMarkingType) HasLang() bool {
	if o != nil && !IsNil(o.Lang) {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *GranularMarkingType) SetLang(v string) {
	o.Lang = &v
}

// GetMarkingRef returns the MarkingRef field value if set, zero value otherwise.
func (o *GranularMarkingType) GetMarkingRef() string {
	if o == nil || IsNil(o.MarkingRef) {
		var ret string
		return ret
	}
	return *o.MarkingRef
}

// GetMarkingRefOk returns a tuple with the MarkingRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GranularMarkingType) GetMarkingRefOk() (*string, bool) {
	if o == nil || IsNil(o.MarkingRef) {
		return nil, false
	}
	return o.MarkingRef, true
}

// HasMarkingRef returns a boolean if a field has been set.
func (o *GranularMarkingType) HasMarkingRef() bool {
	if o != nil && !IsNil(o.MarkingRef) {
		return true
	}

	return false
}

// SetMarkingRef gets a reference to the given string and assigns it to the MarkingRef field.
func (o *GranularMarkingType) SetMarkingRef(v string) {
	o.MarkingRef = &v
}

// GetSelectors returns the Selectors field value
func (o *GranularMarkingType) GetSelectors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Selectors
}

// GetSelectorsOk returns a tuple with the Selectors field value
// and a boolean to check if the value has been set.
func (o *GranularMarkingType) GetSelectorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Selectors, true
}

// SetSelectors sets field value
func (o *GranularMarkingType) SetSelectors(v []string) {
	o.Selectors = v
}

func (o GranularMarkingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GranularMarkingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Lang) {
		toSerialize["lang"] = o.Lang
	}
	if !IsNil(o.MarkingRef) {
		toSerialize["marking_ref"] = o.MarkingRef
	}
	toSerialize["selectors"] = o.Selectors
	return toSerialize, nil
}

type NullableGranularMarkingType struct {
	value *GranularMarkingType
	isSet bool
}

func (v NullableGranularMarkingType) Get() *GranularMarkingType {
	return v.value
}

func (v *NullableGranularMarkingType) Set(val *GranularMarkingType) {
	v.value = val
	v.isSet = true
}

func (v NullableGranularMarkingType) IsSet() bool {
	return v.isSet
}

func (v *NullableGranularMarkingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGranularMarkingType(val *GranularMarkingType) *NullableGranularMarkingType {
	return &NullableGranularMarkingType{value: val, isSet: true}
}

func (v NullableGranularMarkingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGranularMarkingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


