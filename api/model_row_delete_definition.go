/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the RowDeleteDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RowDeleteDefinition{}

// RowDeleteDefinition Lookup table primary key of the row to be deleted.
type RowDeleteDefinition struct {
	// A list of all the primary key field identifiers and their corresponding values which defines the row to delete.
	PrimaryKey []TableRow `json:"primaryKey"`
}

// NewRowDeleteDefinition instantiates a new RowDeleteDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRowDeleteDefinition(primaryKey []TableRow) *RowDeleteDefinition {
	this := RowDeleteDefinition{}
	this.PrimaryKey = primaryKey
	return &this
}

// NewRowDeleteDefinitionWithDefaults instantiates a new RowDeleteDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRowDeleteDefinitionWithDefaults() *RowDeleteDefinition {
	this := RowDeleteDefinition{}
	return &this
}

// GetPrimaryKey returns the PrimaryKey field value
func (o *RowDeleteDefinition) GetPrimaryKey() []TableRow {
	if o == nil {
		var ret []TableRow
		return ret
	}

	return o.PrimaryKey
}

// GetPrimaryKeyOk returns a tuple with the PrimaryKey field value
// and a boolean to check if the value has been set.
func (o *RowDeleteDefinition) GetPrimaryKeyOk() ([]TableRow, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryKey, true
}

// SetPrimaryKey sets field value
func (o *RowDeleteDefinition) SetPrimaryKey(v []TableRow) {
	o.PrimaryKey = v
}

func (o RowDeleteDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RowDeleteDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["primaryKey"] = o.PrimaryKey
	return toSerialize, nil
}

type NullableRowDeleteDefinition struct {
	value *RowDeleteDefinition
	isSet bool
}

func (v NullableRowDeleteDefinition) Get() *RowDeleteDefinition {
	return v.value
}

func (v *NullableRowDeleteDefinition) Set(val *RowDeleteDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableRowDeleteDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableRowDeleteDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRowDeleteDefinition(val *RowDeleteDefinition) *NullableRowDeleteDefinition {
	return &NullableRowDeleteDefinition{value: val, isSet: true}
}

func (v NullableRowDeleteDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRowDeleteDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


