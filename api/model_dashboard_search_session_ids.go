/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DashboardSearchSessionIds type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardSearchSessionIds{}

// DashboardSearchSessionIds struct for DashboardSearchSessionIds
type DashboardSearchSessionIds struct {
	// Map of search keys to session ids.
	Data map[string]string `json:"data"`
	// Error description for the session keys that failed validation.
	Errors *map[string]ErrorResponse `json:"errors,omitempty"`
}

// NewDashboardSearchSessionIds instantiates a new DashboardSearchSessionIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardSearchSessionIds(data map[string]string) *DashboardSearchSessionIds {
	this := DashboardSearchSessionIds{}
	this.Data = data
	return &this
}

// NewDashboardSearchSessionIdsWithDefaults instantiates a new DashboardSearchSessionIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardSearchSessionIdsWithDefaults() *DashboardSearchSessionIds {
	this := DashboardSearchSessionIds{}
	return &this
}

// GetData returns the Data field value
func (o *DashboardSearchSessionIds) GetData() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DashboardSearchSessionIds) GetDataOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DashboardSearchSessionIds) SetData(v map[string]string) {
	o.Data = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *DashboardSearchSessionIds) GetErrors() map[string]ErrorResponse {
	if o == nil || IsNil(o.Errors) {
		var ret map[string]ErrorResponse
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearchSessionIds) GetErrorsOk() (*map[string]ErrorResponse, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *DashboardSearchSessionIds) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string]ErrorResponse and assigns it to the Errors field.
func (o *DashboardSearchSessionIds) SetErrors(v map[string]ErrorResponse) {
	o.Errors = &v
}

func (o DashboardSearchSessionIds) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardSearchSessionIds) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableDashboardSearchSessionIds struct {
	value *DashboardSearchSessionIds
	isSet bool
}

func (v NullableDashboardSearchSessionIds) Get() *DashboardSearchSessionIds {
	return v.value
}

func (v *NullableDashboardSearchSessionIds) Set(val *DashboardSearchSessionIds) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardSearchSessionIds) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardSearchSessionIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardSearchSessionIds(val *DashboardSearchSessionIds) *NullableDashboardSearchSessionIds {
	return &NullableDashboardSearchSessionIds{value: val, isSet: true}
}

func (v NullableDashboardSearchSessionIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardSearchSessionIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


