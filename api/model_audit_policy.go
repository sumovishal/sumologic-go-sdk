/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// AuditPolicy Audit policy.
type AuditPolicy struct {
	// Whether the Audit policy is enabled.
	Enabled bool `json:"enabled"`
}

// NewAuditPolicy instantiates a new AuditPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditPolicy(enabled bool) *AuditPolicy {
	this := AuditPolicy{}
	this.Enabled = enabled
	return &this
}

// NewAuditPolicyWithDefaults instantiates a new AuditPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditPolicyWithDefaults() *AuditPolicy {
	this := AuditPolicy{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *AuditPolicy) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AuditPolicy) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AuditPolicy) SetEnabled(v bool) {
	o.Enabled = v
}

func (o AuditPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableAuditPolicy struct {
	value *AuditPolicy
	isSet bool
}

func (v NullableAuditPolicy) Get() *AuditPolicy {
	return v.value
}

func (v *NullableAuditPolicy) Set(val *AuditPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditPolicy(val *AuditPolicy) *NullableAuditPolicy {
	return &NullableAuditPolicy{value: val, isSet: true}
}

func (v NullableAuditPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


