/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the TextPanel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextPanel{}

// TextPanel struct for TextPanel
type TextPanel struct {
	Panel
	// Text to display in the panel.
	Text string `json:"text"`
}

// NewTextPanel instantiates a new TextPanel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextPanel(text string, key string, panelType string) *TextPanel {
	this := TextPanel{}
	this.Key = key
	var keepVisualSettingsConsistentWithParent bool = true
	this.KeepVisualSettingsConsistentWithParent = &keepVisualSettingsConsistentWithParent
	this.PanelType = panelType
	this.Text = text
	return &this
}

// NewTextPanelWithDefaults instantiates a new TextPanel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextPanelWithDefaults() *TextPanel {
	this := TextPanel{}
	return &this
}

// GetText returns the Text field value
func (o *TextPanel) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TextPanel) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TextPanel) SetText(v string) {
	o.Text = v
}

func (o TextPanel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextPanel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPanel, errPanel := json.Marshal(o.Panel)
	if errPanel != nil {
		return map[string]interface{}{}, errPanel
	}
	errPanel = json.Unmarshal([]byte(serializedPanel), &toSerialize)
	if errPanel != nil {
		return map[string]interface{}{}, errPanel
	}
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

type NullableTextPanel struct {
	value *TextPanel
	isSet bool
}

func (v NullableTextPanel) Get() *TextPanel {
	return v.value
}

func (v *NullableTextPanel) Set(val *TextPanel) {
	v.value = val
	v.isSet = true
}

func (v NullableTextPanel) IsSet() bool {
	return v.isSet
}

func (v *NullableTextPanel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextPanel(val *TextPanel) *NullableTextPanel {
	return &NullableTextPanel{value: val, isSet: true}
}

func (v NullableTextPanel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextPanel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


