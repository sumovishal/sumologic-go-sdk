/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the PreviewLookupTableField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreviewLookupTableField{}

// PreviewLookupTableField The properties of the field.
type PreviewLookupTableField struct {
	// The name of the field.
	FieldName string `json:"fieldName"`
	// The data type of the field. Supported types:   - `boolean`   - `int`   - `long`   - `double`   - `string`
	FieldType string `json:"fieldType"`
	// Identifier associated with each field of the table.
	FieldId string `json:"fieldId"`
}

// NewPreviewLookupTableField instantiates a new PreviewLookupTableField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreviewLookupTableField(fieldName string, fieldType string, fieldId string) *PreviewLookupTableField {
	this := PreviewLookupTableField{}
	this.FieldName = fieldName
	this.FieldType = fieldType
	this.FieldId = fieldId
	return &this
}

// NewPreviewLookupTableFieldWithDefaults instantiates a new PreviewLookupTableField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreviewLookupTableFieldWithDefaults() *PreviewLookupTableField {
	this := PreviewLookupTableField{}
	return &this
}

// GetFieldName returns the FieldName field value
func (o *PreviewLookupTableField) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *PreviewLookupTableField) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *PreviewLookupTableField) SetFieldName(v string) {
	o.FieldName = v
}

// GetFieldType returns the FieldType field value
func (o *PreviewLookupTableField) GetFieldType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value
// and a boolean to check if the value has been set.
func (o *PreviewLookupTableField) GetFieldTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldType, true
}

// SetFieldType sets field value
func (o *PreviewLookupTableField) SetFieldType(v string) {
	o.FieldType = v
}

// GetFieldId returns the FieldId field value
func (o *PreviewLookupTableField) GetFieldId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldId
}

// GetFieldIdOk returns a tuple with the FieldId field value
// and a boolean to check if the value has been set.
func (o *PreviewLookupTableField) GetFieldIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldId, true
}

// SetFieldId sets field value
func (o *PreviewLookupTableField) SetFieldId(v string) {
	o.FieldId = v
}

func (o PreviewLookupTableField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreviewLookupTableField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fieldName"] = o.FieldName
	toSerialize["fieldType"] = o.FieldType
	toSerialize["fieldId"] = o.FieldId
	return toSerialize, nil
}

type NullablePreviewLookupTableField struct {
	value *PreviewLookupTableField
	isSet bool
}

func (v NullablePreviewLookupTableField) Get() *PreviewLookupTableField {
	return v.value
}

func (v *NullablePreviewLookupTableField) Set(val *PreviewLookupTableField) {
	v.value = val
	v.isSet = true
}

func (v NullablePreviewLookupTableField) IsSet() bool {
	return v.isSet
}

func (v *NullablePreviewLookupTableField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreviewLookupTableField(val *PreviewLookupTableField) *NullablePreviewLookupTableField {
	return &NullablePreviewLookupTableField{value: val, isSet: true}
}

func (v NullablePreviewLookupTableField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreviewLookupTableField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


