/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the VersionRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionRange{}

// VersionRange Version range for otCollector.
type VersionRange struct {
	// Minimum version of otCollector.
	MinVersion *string `json:"minVersion,omitempty" validate:"regexp=^v(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(-sumo.+)?$"`
	// Maximum version of the collector.
	MaxVersion *string `json:"maxVersion,omitempty" validate:"regexp=^v(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)(-sumo.+)?$"`
	// Specifies how filtering should be applied when `minVersion` and `maxVersion` are defined. - `Within`: Filtering includes the specified range. - `Outside`: Filtering excludes the specified range. By default, filtering includes the specified range.
	RangeType *string `json:"rangeType,omitempty"`
}

// NewVersionRange instantiates a new VersionRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionRange() *VersionRange {
	this := VersionRange{}
	return &this
}

// NewVersionRangeWithDefaults instantiates a new VersionRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionRangeWithDefaults() *VersionRange {
	this := VersionRange{}
	return &this
}

// GetMinVersion returns the MinVersion field value if set, zero value otherwise.
func (o *VersionRange) GetMinVersion() string {
	if o == nil || IsNil(o.MinVersion) {
		var ret string
		return ret
	}
	return *o.MinVersion
}

// GetMinVersionOk returns a tuple with the MinVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionRange) GetMinVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MinVersion) {
		return nil, false
	}
	return o.MinVersion, true
}

// HasMinVersion returns a boolean if a field has been set.
func (o *VersionRange) HasMinVersion() bool {
	if o != nil && !IsNil(o.MinVersion) {
		return true
	}

	return false
}

// SetMinVersion gets a reference to the given string and assigns it to the MinVersion field.
func (o *VersionRange) SetMinVersion(v string) {
	o.MinVersion = &v
}

// GetMaxVersion returns the MaxVersion field value if set, zero value otherwise.
func (o *VersionRange) GetMaxVersion() string {
	if o == nil || IsNil(o.MaxVersion) {
		var ret string
		return ret
	}
	return *o.MaxVersion
}

// GetMaxVersionOk returns a tuple with the MaxVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionRange) GetMaxVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MaxVersion) {
		return nil, false
	}
	return o.MaxVersion, true
}

// HasMaxVersion returns a boolean if a field has been set.
func (o *VersionRange) HasMaxVersion() bool {
	if o != nil && !IsNil(o.MaxVersion) {
		return true
	}

	return false
}

// SetMaxVersion gets a reference to the given string and assigns it to the MaxVersion field.
func (o *VersionRange) SetMaxVersion(v string) {
	o.MaxVersion = &v
}

// GetRangeType returns the RangeType field value if set, zero value otherwise.
func (o *VersionRange) GetRangeType() string {
	if o == nil || IsNil(o.RangeType) {
		var ret string
		return ret
	}
	return *o.RangeType
}

// GetRangeTypeOk returns a tuple with the RangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionRange) GetRangeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RangeType) {
		return nil, false
	}
	return o.RangeType, true
}

// HasRangeType returns a boolean if a field has been set.
func (o *VersionRange) HasRangeType() bool {
	if o != nil && !IsNil(o.RangeType) {
		return true
	}

	return false
}

// SetRangeType gets a reference to the given string and assigns it to the RangeType field.
func (o *VersionRange) SetRangeType(v string) {
	o.RangeType = &v
}

func (o VersionRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinVersion) {
		toSerialize["minVersion"] = o.MinVersion
	}
	if !IsNil(o.MaxVersion) {
		toSerialize["maxVersion"] = o.MaxVersion
	}
	if !IsNil(o.RangeType) {
		toSerialize["rangeType"] = o.RangeType
	}
	return toSerialize, nil
}

type NullableVersionRange struct {
	value *VersionRange
	isSet bool
}

func (v NullableVersionRange) Get() *VersionRange {
	return v.value
}

func (v *NullableVersionRange) Set(val *VersionRange) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionRange) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionRange(val *VersionRange) *NullableVersionRange {
	return &NullableVersionRange{value: val, isSet: true}
}

func (v NullableVersionRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


