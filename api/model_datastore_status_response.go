/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreStatusResponse{}

// DatastoreStatusResponse struct for DatastoreStatusResponse
type DatastoreStatusResponse struct {
	// Total DB size in terms of disk bytes
	DiskSize int64 `json:"diskSize"`
	// Total number of indicators in the DB
	IndicatorCount int64 `json:"indicatorCount"`
	// A list of sources and their individual DB sizes and indicator counts
	SourceStatus []DatastoreSourceStatusResponse `json:"sourceStatus"`
}

// NewDatastoreStatusResponse instantiates a new DatastoreStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreStatusResponse(diskSize int64, indicatorCount int64, sourceStatus []DatastoreSourceStatusResponse) *DatastoreStatusResponse {
	this := DatastoreStatusResponse{}
	this.DiskSize = diskSize
	this.IndicatorCount = indicatorCount
	this.SourceStatus = sourceStatus
	return &this
}

// NewDatastoreStatusResponseWithDefaults instantiates a new DatastoreStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreStatusResponseWithDefaults() *DatastoreStatusResponse {
	this := DatastoreStatusResponse{}
	return &this
}

// GetDiskSize returns the DiskSize field value
func (o *DatastoreStatusResponse) GetDiskSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DiskSize
}

// GetDiskSizeOk returns a tuple with the DiskSize field value
// and a boolean to check if the value has been set.
func (o *DatastoreStatusResponse) GetDiskSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSize, true
}

// SetDiskSize sets field value
func (o *DatastoreStatusResponse) SetDiskSize(v int64) {
	o.DiskSize = v
}

// GetIndicatorCount returns the IndicatorCount field value
func (o *DatastoreStatusResponse) GetIndicatorCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IndicatorCount
}

// GetIndicatorCountOk returns a tuple with the IndicatorCount field value
// and a boolean to check if the value has been set.
func (o *DatastoreStatusResponse) GetIndicatorCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndicatorCount, true
}

// SetIndicatorCount sets field value
func (o *DatastoreStatusResponse) SetIndicatorCount(v int64) {
	o.IndicatorCount = v
}

// GetSourceStatus returns the SourceStatus field value
func (o *DatastoreStatusResponse) GetSourceStatus() []DatastoreSourceStatusResponse {
	if o == nil {
		var ret []DatastoreSourceStatusResponse
		return ret
	}

	return o.SourceStatus
}

// GetSourceStatusOk returns a tuple with the SourceStatus field value
// and a boolean to check if the value has been set.
func (o *DatastoreStatusResponse) GetSourceStatusOk() ([]DatastoreSourceStatusResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceStatus, true
}

// SetSourceStatus sets field value
func (o *DatastoreStatusResponse) SetSourceStatus(v []DatastoreSourceStatusResponse) {
	o.SourceStatus = v
}

func (o DatastoreStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["diskSize"] = o.DiskSize
	toSerialize["indicatorCount"] = o.IndicatorCount
	toSerialize["sourceStatus"] = o.SourceStatus
	return toSerialize, nil
}

type NullableDatastoreStatusResponse struct {
	value *DatastoreStatusResponse
	isSet bool
}

func (v NullableDatastoreStatusResponse) Get() *DatastoreStatusResponse {
	return v.value
}

func (v *NullableDatastoreStatusResponse) Set(val *DatastoreStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreStatusResponse(val *DatastoreStatusResponse) *NullableDatastoreStatusResponse {
	return &NullableDatastoreStatusResponse{value: val, isSet: true}
}

func (v NullableDatastoreStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


