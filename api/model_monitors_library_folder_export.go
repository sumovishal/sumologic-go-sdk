/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MonitorsLibraryFolderExport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorsLibraryFolderExport{}

// MonitorsLibraryFolderExport struct for MonitorsLibraryFolderExport
type MonitorsLibraryFolderExport struct {
	MonitorsLibraryBaseExport
	// The items in the folder. A multi-type list of types monitor or folder.
	Children []MonitorsLibraryBaseExport `json:"children,omitempty"`
}

type _MonitorsLibraryFolderExport MonitorsLibraryFolderExport

// NewMonitorsLibraryFolderExport instantiates a new MonitorsLibraryFolderExport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorsLibraryFolderExport(name string, type_ string) *MonitorsLibraryFolderExport {
	this := MonitorsLibraryFolderExport{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewMonitorsLibraryFolderExportWithDefaults instantiates a new MonitorsLibraryFolderExport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorsLibraryFolderExportWithDefaults() *MonitorsLibraryFolderExport {
	this := MonitorsLibraryFolderExport{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *MonitorsLibraryFolderExport) GetChildren() []MonitorsLibraryBaseExport {
	if o == nil || IsNil(o.Children) {
		var ret []MonitorsLibraryBaseExport
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorsLibraryFolderExport) GetChildrenOk() ([]MonitorsLibraryBaseExport, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *MonitorsLibraryFolderExport) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []MonitorsLibraryBaseExport and assigns it to the Children field.
func (o *MonitorsLibraryFolderExport) SetChildren(v []MonitorsLibraryBaseExport) {
	o.Children = v
}

func (o MonitorsLibraryFolderExport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorsLibraryFolderExport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMonitorsLibraryBaseExport, errMonitorsLibraryBaseExport := json.Marshal(o.MonitorsLibraryBaseExport)
	if errMonitorsLibraryBaseExport != nil {
		return map[string]interface{}{}, errMonitorsLibraryBaseExport
	}
	errMonitorsLibraryBaseExport = json.Unmarshal([]byte(serializedMonitorsLibraryBaseExport), &toSerialize)
	if errMonitorsLibraryBaseExport != nil {
		return map[string]interface{}{}, errMonitorsLibraryBaseExport
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

func (o *MonitorsLibraryFolderExport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMonitorsLibraryFolderExport := _MonitorsLibraryFolderExport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMonitorsLibraryFolderExport)

	if err != nil {
		return err
	}

	*o = MonitorsLibraryFolderExport(varMonitorsLibraryFolderExport)

	return err
}

type NullableMonitorsLibraryFolderExport struct {
	value *MonitorsLibraryFolderExport
	isSet bool
}

func (v NullableMonitorsLibraryFolderExport) Get() *MonitorsLibraryFolderExport {
	return v.value
}

func (v *NullableMonitorsLibraryFolderExport) Set(val *MonitorsLibraryFolderExport) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorsLibraryFolderExport) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorsLibraryFolderExport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorsLibraryFolderExport(val *MonitorsLibraryFolderExport) *NullableMonitorsLibraryFolderExport {
	return &NullableMonitorsLibraryFolderExport{value: val, isSet: true}
}

func (v NullableMonitorsLibraryFolderExport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorsLibraryFolderExport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


