/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the AsyncTraceQueryRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsyncTraceQueryRow{}

// AsyncTraceQueryRow struct for AsyncTraceQueryRow
type AsyncTraceQueryRow struct {
	Query TraceQueryExpression `json:"query"`
	// An identifier used to reference this particular row of the query request while fetching a query result. Within a query, row ids must have distinct values.
	RowId string `json:"rowId"`
	OrderBy *OrderBy `json:"orderBy,omitempty"`
}

// NewAsyncTraceQueryRow instantiates a new AsyncTraceQueryRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncTraceQueryRow(query TraceQueryExpression, rowId string) *AsyncTraceQueryRow {
	this := AsyncTraceQueryRow{}
	this.Query = query
	this.RowId = rowId
	return &this
}

// NewAsyncTraceQueryRowWithDefaults instantiates a new AsyncTraceQueryRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncTraceQueryRowWithDefaults() *AsyncTraceQueryRow {
	this := AsyncTraceQueryRow{}
	return &this
}

// GetQuery returns the Query field value
func (o *AsyncTraceQueryRow) GetQuery() TraceQueryExpression {
	if o == nil {
		var ret TraceQueryExpression
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *AsyncTraceQueryRow) GetQueryOk() (*TraceQueryExpression, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *AsyncTraceQueryRow) SetQuery(v TraceQueryExpression) {
	o.Query = v
}

// GetRowId returns the RowId field value
func (o *AsyncTraceQueryRow) GetRowId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowId
}

// GetRowIdOk returns a tuple with the RowId field value
// and a boolean to check if the value has been set.
func (o *AsyncTraceQueryRow) GetRowIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowId, true
}

// SetRowId sets field value
func (o *AsyncTraceQueryRow) SetRowId(v string) {
	o.RowId = v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *AsyncTraceQueryRow) GetOrderBy() OrderBy {
	if o == nil || IsNil(o.OrderBy) {
		var ret OrderBy
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncTraceQueryRow) GetOrderByOk() (*OrderBy, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *AsyncTraceQueryRow) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given OrderBy and assigns it to the OrderBy field.
func (o *AsyncTraceQueryRow) SetOrderBy(v OrderBy) {
	o.OrderBy = &v
}

func (o AsyncTraceQueryRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsyncTraceQueryRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	toSerialize["rowId"] = o.RowId
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	return toSerialize, nil
}

type NullableAsyncTraceQueryRow struct {
	value *AsyncTraceQueryRow
	isSet bool
}

func (v NullableAsyncTraceQueryRow) Get() *AsyncTraceQueryRow {
	return v.value
}

func (v *NullableAsyncTraceQueryRow) Set(val *AsyncTraceQueryRow) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncTraceQueryRow) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncTraceQueryRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncTraceQueryRow(val *AsyncTraceQueryRow) *NullableAsyncTraceQueryRow {
	return &NullableAsyncTraceQueryRow{value: val, isSet: true}
}

func (v NullableAsyncTraceQueryRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncTraceQueryRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


