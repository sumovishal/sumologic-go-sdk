/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReportPanelSyncDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportPanelSyncDefinition{}

// ReportPanelSyncDefinition struct for ReportPanelSyncDefinition
type ReportPanelSyncDefinition struct {
	// The title of the panel.
	Name string `json:"name"`
	// Type of [area chart](https://help.sumologic.com/Dashboards-and-Alerts/Dashboards/Chart-Panel-Types). Supported values are:   1. `table` for Table   2. `bar` for Bar Chart   3. `column` for Column Chart   4. `line` for Line Chart   5. `area` for Area Chart   6. `pie` for Pie Chart   7. `svv` for Single Value Viewer   8. `title` for Title Panel   9. `text` for Text Panel  Values 1-7 are used for Data Panels.
	ViewerType string `json:"viewerType"`
	// Supported values are:   - `1` for small   - `2` for medium   - `3` for large
	DetailLevel int32 `json:"detailLevel"`
	// The query to run, for panels associated to log searches.
	QueryString string `json:"queryString"`
	// The query or queries to run, for panels associated to metrics searches.
	MetricsQueries []MetricsQuerySyncDefinition `json:"metricsQueries"`
	TimeRange ResolvableTimeRange `json:"timeRange"`
	// The horizontal position of the panel. A sumo screen is divided into 24 columns. The value for x can be any integer from 0 to 24.
	X int32 `json:"x"`
	// The vertical position of the panel. A sumo screen is divided into 24 rows. The value for y can be any integer from 0 to 24.
	Y int32 `json:"y"`
	// The width of the panel.
	Width int32 `json:"width"`
	// The height of the panel.
	Height int32 `json:"height"`
	// Visual settings for the panel.
	Properties string `json:"properties"`
	// A string identifier that you can use to refer to the panel in filters.panelIds.
	Id string `json:"id"`
	// The quantization interval aligns your time series data to common intervals on the time axis (for example every one minute) to optimize the visualization and performance.
	DesiredQuantizationInSecs *int32 `json:"desiredQuantizationInSecs,omitempty"`
	// The parameters for parameterized searches.
	QueryParameters []QueryParameterSyncDefinition `json:"queryParameters"`
	AutoParsingInfo *ReportAutoParsingInfo `json:"autoParsingInfo,omitempty"`
}

type _ReportPanelSyncDefinition ReportPanelSyncDefinition

// NewReportPanelSyncDefinition instantiates a new ReportPanelSyncDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportPanelSyncDefinition(name string, viewerType string, detailLevel int32, queryString string, metricsQueries []MetricsQuerySyncDefinition, timeRange ResolvableTimeRange, x int32, y int32, width int32, height int32, properties string, id string, queryParameters []QueryParameterSyncDefinition) *ReportPanelSyncDefinition {
	this := ReportPanelSyncDefinition{}
	this.Name = name
	this.ViewerType = viewerType
	this.DetailLevel = detailLevel
	this.QueryString = queryString
	this.MetricsQueries = metricsQueries
	this.TimeRange = timeRange
	this.X = x
	this.Y = y
	this.Width = width
	this.Height = height
	this.Properties = properties
	this.Id = id
	this.QueryParameters = queryParameters
	return &this
}

// NewReportPanelSyncDefinitionWithDefaults instantiates a new ReportPanelSyncDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportPanelSyncDefinitionWithDefaults() *ReportPanelSyncDefinition {
	this := ReportPanelSyncDefinition{}
	return &this
}

// GetName returns the Name field value
func (o *ReportPanelSyncDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReportPanelSyncDefinition) SetName(v string) {
	o.Name = v
}

// GetViewerType returns the ViewerType field value
func (o *ReportPanelSyncDefinition) GetViewerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ViewerType
}

// GetViewerTypeOk returns a tuple with the ViewerType field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetViewerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewerType, true
}

// SetViewerType sets field value
func (o *ReportPanelSyncDefinition) SetViewerType(v string) {
	o.ViewerType = v
}

// GetDetailLevel returns the DetailLevel field value
func (o *ReportPanelSyncDefinition) GetDetailLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DetailLevel
}

// GetDetailLevelOk returns a tuple with the DetailLevel field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetDetailLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DetailLevel, true
}

// SetDetailLevel sets field value
func (o *ReportPanelSyncDefinition) SetDetailLevel(v int32) {
	o.DetailLevel = v
}

// GetQueryString returns the QueryString field value
func (o *ReportPanelSyncDefinition) GetQueryString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryString
}

// GetQueryStringOk returns a tuple with the QueryString field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetQueryStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryString, true
}

// SetQueryString sets field value
func (o *ReportPanelSyncDefinition) SetQueryString(v string) {
	o.QueryString = v
}

// GetMetricsQueries returns the MetricsQueries field value
func (o *ReportPanelSyncDefinition) GetMetricsQueries() []MetricsQuerySyncDefinition {
	if o == nil {
		var ret []MetricsQuerySyncDefinition
		return ret
	}

	return o.MetricsQueries
}

// GetMetricsQueriesOk returns a tuple with the MetricsQueries field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetMetricsQueriesOk() ([]MetricsQuerySyncDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetricsQueries, true
}

// SetMetricsQueries sets field value
func (o *ReportPanelSyncDefinition) SetMetricsQueries(v []MetricsQuerySyncDefinition) {
	o.MetricsQueries = v
}

// GetTimeRange returns the TimeRange field value
func (o *ReportPanelSyncDefinition) GetTimeRange() ResolvableTimeRange {
	if o == nil {
		var ret ResolvableTimeRange
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetTimeRangeOk() (*ResolvableTimeRange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *ReportPanelSyncDefinition) SetTimeRange(v ResolvableTimeRange) {
	o.TimeRange = v
}

// GetX returns the X field value
func (o *ReportPanelSyncDefinition) GetX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *ReportPanelSyncDefinition) SetX(v int32) {
	o.X = v
}

// GetY returns the Y field value
func (o *ReportPanelSyncDefinition) GetY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *ReportPanelSyncDefinition) SetY(v int32) {
	o.Y = v
}

// GetWidth returns the Width field value
func (o *ReportPanelSyncDefinition) GetWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *ReportPanelSyncDefinition) SetWidth(v int32) {
	o.Width = v
}

// GetHeight returns the Height field value
func (o *ReportPanelSyncDefinition) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *ReportPanelSyncDefinition) SetHeight(v int32) {
	o.Height = v
}

// GetProperties returns the Properties field value
func (o *ReportPanelSyncDefinition) GetProperties() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetPropertiesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *ReportPanelSyncDefinition) SetProperties(v string) {
	o.Properties = v
}

// GetId returns the Id field value
func (o *ReportPanelSyncDefinition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReportPanelSyncDefinition) SetId(v string) {
	o.Id = v
}

// GetDesiredQuantizationInSecs returns the DesiredQuantizationInSecs field value if set, zero value otherwise.
func (o *ReportPanelSyncDefinition) GetDesiredQuantizationInSecs() int32 {
	if o == nil || IsNil(o.DesiredQuantizationInSecs) {
		var ret int32
		return ret
	}
	return *o.DesiredQuantizationInSecs
}

// GetDesiredQuantizationInSecsOk returns a tuple with the DesiredQuantizationInSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetDesiredQuantizationInSecsOk() (*int32, bool) {
	if o == nil || IsNil(o.DesiredQuantizationInSecs) {
		return nil, false
	}
	return o.DesiredQuantizationInSecs, true
}

// HasDesiredQuantizationInSecs returns a boolean if a field has been set.
func (o *ReportPanelSyncDefinition) HasDesiredQuantizationInSecs() bool {
	if o != nil && !IsNil(o.DesiredQuantizationInSecs) {
		return true
	}

	return false
}

// SetDesiredQuantizationInSecs gets a reference to the given int32 and assigns it to the DesiredQuantizationInSecs field.
func (o *ReportPanelSyncDefinition) SetDesiredQuantizationInSecs(v int32) {
	o.DesiredQuantizationInSecs = &v
}

// GetQueryParameters returns the QueryParameters field value
func (o *ReportPanelSyncDefinition) GetQueryParameters() []QueryParameterSyncDefinition {
	if o == nil {
		var ret []QueryParameterSyncDefinition
		return ret
	}

	return o.QueryParameters
}

// GetQueryParametersOk returns a tuple with the QueryParameters field value
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetQueryParametersOk() ([]QueryParameterSyncDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueryParameters, true
}

// SetQueryParameters sets field value
func (o *ReportPanelSyncDefinition) SetQueryParameters(v []QueryParameterSyncDefinition) {
	o.QueryParameters = v
}

// GetAutoParsingInfo returns the AutoParsingInfo field value if set, zero value otherwise.
func (o *ReportPanelSyncDefinition) GetAutoParsingInfo() ReportAutoParsingInfo {
	if o == nil || IsNil(o.AutoParsingInfo) {
		var ret ReportAutoParsingInfo
		return ret
	}
	return *o.AutoParsingInfo
}

// GetAutoParsingInfoOk returns a tuple with the AutoParsingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportPanelSyncDefinition) GetAutoParsingInfoOk() (*ReportAutoParsingInfo, bool) {
	if o == nil || IsNil(o.AutoParsingInfo) {
		return nil, false
	}
	return o.AutoParsingInfo, true
}

// HasAutoParsingInfo returns a boolean if a field has been set.
func (o *ReportPanelSyncDefinition) HasAutoParsingInfo() bool {
	if o != nil && !IsNil(o.AutoParsingInfo) {
		return true
	}

	return false
}

// SetAutoParsingInfo gets a reference to the given ReportAutoParsingInfo and assigns it to the AutoParsingInfo field.
func (o *ReportPanelSyncDefinition) SetAutoParsingInfo(v ReportAutoParsingInfo) {
	o.AutoParsingInfo = &v
}

func (o ReportPanelSyncDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportPanelSyncDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["viewerType"] = o.ViewerType
	toSerialize["detailLevel"] = o.DetailLevel
	toSerialize["queryString"] = o.QueryString
	toSerialize["metricsQueries"] = o.MetricsQueries
	toSerialize["timeRange"] = o.TimeRange
	toSerialize["x"] = o.X
	toSerialize["y"] = o.Y
	toSerialize["width"] = o.Width
	toSerialize["height"] = o.Height
	toSerialize["properties"] = o.Properties
	toSerialize["id"] = o.Id
	if !IsNil(o.DesiredQuantizationInSecs) {
		toSerialize["desiredQuantizationInSecs"] = o.DesiredQuantizationInSecs
	}
	toSerialize["queryParameters"] = o.QueryParameters
	if !IsNil(o.AutoParsingInfo) {
		toSerialize["autoParsingInfo"] = o.AutoParsingInfo
	}
	return toSerialize, nil
}

func (o *ReportPanelSyncDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"viewerType",
		"detailLevel",
		"queryString",
		"metricsQueries",
		"timeRange",
		"x",
		"y",
		"width",
		"height",
		"properties",
		"id",
		"queryParameters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportPanelSyncDefinition := _ReportPanelSyncDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportPanelSyncDefinition)

	if err != nil {
		return err
	}

	*o = ReportPanelSyncDefinition(varReportPanelSyncDefinition)

	return err
}

type NullableReportPanelSyncDefinition struct {
	value *ReportPanelSyncDefinition
	isSet bool
}

func (v NullableReportPanelSyncDefinition) Get() *ReportPanelSyncDefinition {
	return v.value
}

func (v *NullableReportPanelSyncDefinition) Set(val *ReportPanelSyncDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableReportPanelSyncDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableReportPanelSyncDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportPanelSyncDefinition(val *ReportPanelSyncDefinition) *NullableReportPanelSyncDefinition {
	return &NullableReportPanelSyncDefinition{value: val, isSet: true}
}

func (v NullableReportPanelSyncDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportPanelSyncDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


