/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CorrelatedEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorrelatedEvent{}

// CorrelatedEvent Object specifying an event.
type CorrelatedEvent struct {
	// The name of the event.
	Name string `json:"name"`
	// Description of the events.
	Description *string `json:"description,omitempty"`
	// The type of event.
	EventType string `json:"eventType"`
	// The source of the event.
	EventSource string `json:"eventSource"`
	// The start time of the event.
	StartTimeMs int64 `json:"startTimeMs"`
	// JSON string containing metadata of the event.
	MetadataJson *string `json:"metadataJson,omitempty"`
}

// NewCorrelatedEvent instantiates a new CorrelatedEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorrelatedEvent(name string, eventType string, eventSource string, startTimeMs int64) *CorrelatedEvent {
	this := CorrelatedEvent{}
	this.Name = name
	this.EventType = eventType
	this.EventSource = eventSource
	this.StartTimeMs = startTimeMs
	return &this
}

// NewCorrelatedEventWithDefaults instantiates a new CorrelatedEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorrelatedEventWithDefaults() *CorrelatedEvent {
	this := CorrelatedEvent{}
	return &this
}

// GetName returns the Name field value
func (o *CorrelatedEvent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CorrelatedEvent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CorrelatedEvent) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CorrelatedEvent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorrelatedEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CorrelatedEvent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CorrelatedEvent) SetDescription(v string) {
	o.Description = &v
}

// GetEventType returns the EventType field value
func (o *CorrelatedEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *CorrelatedEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *CorrelatedEvent) SetEventType(v string) {
	o.EventType = v
}

// GetEventSource returns the EventSource field value
func (o *CorrelatedEvent) GetEventSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventSource
}

// GetEventSourceOk returns a tuple with the EventSource field value
// and a boolean to check if the value has been set.
func (o *CorrelatedEvent) GetEventSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventSource, true
}

// SetEventSource sets field value
func (o *CorrelatedEvent) SetEventSource(v string) {
	o.EventSource = v
}

// GetStartTimeMs returns the StartTimeMs field value
func (o *CorrelatedEvent) GetStartTimeMs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StartTimeMs
}

// GetStartTimeMsOk returns a tuple with the StartTimeMs field value
// and a boolean to check if the value has been set.
func (o *CorrelatedEvent) GetStartTimeMsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTimeMs, true
}

// SetStartTimeMs sets field value
func (o *CorrelatedEvent) SetStartTimeMs(v int64) {
	o.StartTimeMs = v
}

// GetMetadataJson returns the MetadataJson field value if set, zero value otherwise.
func (o *CorrelatedEvent) GetMetadataJson() string {
	if o == nil || IsNil(o.MetadataJson) {
		var ret string
		return ret
	}
	return *o.MetadataJson
}

// GetMetadataJsonOk returns a tuple with the MetadataJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorrelatedEvent) GetMetadataJsonOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataJson) {
		return nil, false
	}
	return o.MetadataJson, true
}

// HasMetadataJson returns a boolean if a field has been set.
func (o *CorrelatedEvent) HasMetadataJson() bool {
	if o != nil && !IsNil(o.MetadataJson) {
		return true
	}

	return false
}

// SetMetadataJson gets a reference to the given string and assigns it to the MetadataJson field.
func (o *CorrelatedEvent) SetMetadataJson(v string) {
	o.MetadataJson = &v
}

func (o CorrelatedEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorrelatedEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["eventType"] = o.EventType
	toSerialize["eventSource"] = o.EventSource
	toSerialize["startTimeMs"] = o.StartTimeMs
	if !IsNil(o.MetadataJson) {
		toSerialize["metadataJson"] = o.MetadataJson
	}
	return toSerialize, nil
}

type NullableCorrelatedEvent struct {
	value *CorrelatedEvent
	isSet bool
}

func (v NullableCorrelatedEvent) Get() *CorrelatedEvent {
	return v.value
}

func (v *NullableCorrelatedEvent) Set(val *CorrelatedEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCorrelatedEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCorrelatedEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorrelatedEvent(val *CorrelatedEvent) *NullableCorrelatedEvent {
	return &NullableCorrelatedEvent{value: val, isSet: true}
}

func (v NullableCorrelatedEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorrelatedEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


