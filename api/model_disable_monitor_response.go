/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DisableMonitorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisableMonitorResponse{}

// DisableMonitorResponse Response for disabling monitors.
type DisableMonitorResponse struct {
	// A map between an identifier and its monitor.
	Monitors *map[string]MonitorsLibraryMonitorResponse `json:"monitors,omitempty"`
	// Warnings from the operation.
	Warnings []DisableMonitorWarning `json:"warnings,omitempty"`
}

// NewDisableMonitorResponse instantiates a new DisableMonitorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisableMonitorResponse() *DisableMonitorResponse {
	this := DisableMonitorResponse{}
	return &this
}

// NewDisableMonitorResponseWithDefaults instantiates a new DisableMonitorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisableMonitorResponseWithDefaults() *DisableMonitorResponse {
	this := DisableMonitorResponse{}
	return &this
}

// GetMonitors returns the Monitors field value if set, zero value otherwise.
func (o *DisableMonitorResponse) GetMonitors() map[string]MonitorsLibraryMonitorResponse {
	if o == nil || IsNil(o.Monitors) {
		var ret map[string]MonitorsLibraryMonitorResponse
		return ret
	}
	return *o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisableMonitorResponse) GetMonitorsOk() (*map[string]MonitorsLibraryMonitorResponse, bool) {
	if o == nil || IsNil(o.Monitors) {
		return nil, false
	}
	return o.Monitors, true
}

// HasMonitors returns a boolean if a field has been set.
func (o *DisableMonitorResponse) HasMonitors() bool {
	if o != nil && !IsNil(o.Monitors) {
		return true
	}

	return false
}

// SetMonitors gets a reference to the given map[string]MonitorsLibraryMonitorResponse and assigns it to the Monitors field.
func (o *DisableMonitorResponse) SetMonitors(v map[string]MonitorsLibraryMonitorResponse) {
	o.Monitors = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DisableMonitorResponse) GetWarnings() []DisableMonitorWarning {
	if o == nil || IsNil(o.Warnings) {
		var ret []DisableMonitorWarning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisableMonitorResponse) GetWarningsOk() ([]DisableMonitorWarning, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DisableMonitorResponse) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []DisableMonitorWarning and assigns it to the Warnings field.
func (o *DisableMonitorResponse) SetWarnings(v []DisableMonitorWarning) {
	o.Warnings = v
}

func (o DisableMonitorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisableMonitorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Monitors) {
		toSerialize["monitors"] = o.Monitors
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableDisableMonitorResponse struct {
	value *DisableMonitorResponse
	isSet bool
}

func (v NullableDisableMonitorResponse) Get() *DisableMonitorResponse {
	return v.value
}

func (v *NullableDisableMonitorResponse) Set(val *DisableMonitorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDisableMonitorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDisableMonitorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisableMonitorResponse(val *DisableMonitorResponse) *NullableDisableMonitorResponse {
	return &NullableDisableMonitorResponse{value: val, isSet: true}
}

func (v NullableDisableMonitorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisableMonitorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


