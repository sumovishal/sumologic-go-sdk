/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MonitorsLibraryFolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorsLibraryFolder{}

// MonitorsLibraryFolder struct for MonitorsLibraryFolder
type MonitorsLibraryFolder struct {
	MonitorsLibraryBase
}

// NewMonitorsLibraryFolder instantiates a new MonitorsLibraryFolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorsLibraryFolder(name string, type_ string) *MonitorsLibraryFolder {
	this := MonitorsLibraryFolder{}
	this.Name = name
	var description string = ""
	this.Description = &description
	this.Type = type_
	return &this
}

// NewMonitorsLibraryFolderWithDefaults instantiates a new MonitorsLibraryFolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorsLibraryFolderWithDefaults() *MonitorsLibraryFolder {
	this := MonitorsLibraryFolder{}
	return &this
}

func (o MonitorsLibraryFolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorsLibraryFolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMonitorsLibraryBase, errMonitorsLibraryBase := json.Marshal(o.MonitorsLibraryBase)
	if errMonitorsLibraryBase != nil {
		return map[string]interface{}{}, errMonitorsLibraryBase
	}
	errMonitorsLibraryBase = json.Unmarshal([]byte(serializedMonitorsLibraryBase), &toSerialize)
	if errMonitorsLibraryBase != nil {
		return map[string]interface{}{}, errMonitorsLibraryBase
	}
	return toSerialize, nil
}

type NullableMonitorsLibraryFolder struct {
	value *MonitorsLibraryFolder
	isSet bool
}

func (v NullableMonitorsLibraryFolder) Get() *MonitorsLibraryFolder {
	return v.value
}

func (v *NullableMonitorsLibraryFolder) Set(val *MonitorsLibraryFolder) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorsLibraryFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorsLibraryFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorsLibraryFolder(val *MonitorsLibraryFolder) *NullableMonitorsLibraryFolder {
	return &NullableMonitorsLibraryFolder{value: val, isSet: true}
}

func (v NullableMonitorsLibraryFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorsLibraryFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


