/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// OutlierSeriesDataPointAllOf Data point of outlier series.
type OutlierSeriesDataPointAllOf struct {
	// Epoch unix time stamp.
	X int64 `json:"x"`
	Y OutlierDataValue `json:"y"`
}

// NewOutlierSeriesDataPointAllOf instantiates a new OutlierSeriesDataPointAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutlierSeriesDataPointAllOf(x int64, y OutlierDataValue) *OutlierSeriesDataPointAllOf {
	this := OutlierSeriesDataPointAllOf{}
	this.X = x
	this.Y = y
	return &this
}

// NewOutlierSeriesDataPointAllOfWithDefaults instantiates a new OutlierSeriesDataPointAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutlierSeriesDataPointAllOfWithDefaults() *OutlierSeriesDataPointAllOf {
	this := OutlierSeriesDataPointAllOf{}
	return &this
}

// GetX returns the X field value
func (o *OutlierSeriesDataPointAllOf) GetX() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.X
}

// GetXOk returns a tuple with the X field value
// and a boolean to check if the value has been set.
func (o *OutlierSeriesDataPointAllOf) GetXOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X, true
}

// SetX sets field value
func (o *OutlierSeriesDataPointAllOf) SetX(v int64) {
	o.X = v
}

// GetY returns the Y field value
func (o *OutlierSeriesDataPointAllOf) GetY() OutlierDataValue {
	if o == nil {
		var ret OutlierDataValue
		return ret
	}

	return o.Y
}

// GetYOk returns a tuple with the Y field value
// and a boolean to check if the value has been set.
func (o *OutlierSeriesDataPointAllOf) GetYOk() (*OutlierDataValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Y, true
}

// SetY sets field value
func (o *OutlierSeriesDataPointAllOf) SetY(v OutlierDataValue) {
	o.Y = v
}

func (o OutlierSeriesDataPointAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["x"] = o.X
	}
	if true {
		toSerialize["y"] = o.Y
	}
	return json.Marshal(toSerialize)
}

type NullableOutlierSeriesDataPointAllOf struct {
	value *OutlierSeriesDataPointAllOf
	isSet bool
}

func (v NullableOutlierSeriesDataPointAllOf) Get() *OutlierSeriesDataPointAllOf {
	return v.value
}

func (v *NullableOutlierSeriesDataPointAllOf) Set(val *OutlierSeriesDataPointAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOutlierSeriesDataPointAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOutlierSeriesDataPointAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutlierSeriesDataPointAllOf(val *OutlierSeriesDataPointAllOf) *NullableOutlierSeriesDataPointAllOf {
	return &NullableOutlierSeriesDataPointAllOf{value: val, isSet: true}
}

func (v NullableOutlierSeriesDataPointAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutlierSeriesDataPointAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


