/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the ChildUsageDetailsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChildUsageDetailsResponse{}

// ChildUsageDetailsResponse struct for ChildUsageDetailsResponse
type ChildUsageDetailsResponse struct {
	// Usage details of the child orgs.
	Data []ChildUsageDetail `json:"data"`
}

// NewChildUsageDetailsResponse instantiates a new ChildUsageDetailsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChildUsageDetailsResponse(data []ChildUsageDetail) *ChildUsageDetailsResponse {
	this := ChildUsageDetailsResponse{}
	this.Data = data
	return &this
}

// NewChildUsageDetailsResponseWithDefaults instantiates a new ChildUsageDetailsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChildUsageDetailsResponseWithDefaults() *ChildUsageDetailsResponse {
	this := ChildUsageDetailsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ChildUsageDetailsResponse) GetData() []ChildUsageDetail {
	if o == nil {
		var ret []ChildUsageDetail
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ChildUsageDetailsResponse) GetDataOk() ([]ChildUsageDetail, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ChildUsageDetailsResponse) SetData(v []ChildUsageDetail) {
	o.Data = v
}

func (o ChildUsageDetailsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChildUsageDetailsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableChildUsageDetailsResponse struct {
	value *ChildUsageDetailsResponse
	isSet bool
}

func (v NullableChildUsageDetailsResponse) Get() *ChildUsageDetailsResponse {
	return v.value
}

func (v *NullableChildUsageDetailsResponse) Set(val *ChildUsageDetailsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChildUsageDetailsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChildUsageDetailsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChildUsageDetailsResponse(val *ChildUsageDetailsResponse) *NullableChildUsageDetailsResponse {
	return &NullableChildUsageDetailsResponse{value: val, isSet: true}
}

func (v NullableChildUsageDetailsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChildUsageDetailsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


