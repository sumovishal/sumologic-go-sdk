/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// ExtractionRuleDefinitionAllOf struct for ExtractionRuleDefinitionAllOf
type ExtractionRuleDefinitionAllOf struct {
	// Is the field extraction rule enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewExtractionRuleDefinitionAllOf instantiates a new ExtractionRuleDefinitionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtractionRuleDefinitionAllOf() *ExtractionRuleDefinitionAllOf {
	this := ExtractionRuleDefinitionAllOf{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewExtractionRuleDefinitionAllOfWithDefaults instantiates a new ExtractionRuleDefinitionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtractionRuleDefinitionAllOfWithDefaults() *ExtractionRuleDefinitionAllOf {
	this := ExtractionRuleDefinitionAllOf{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ExtractionRuleDefinitionAllOf) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractionRuleDefinitionAllOf) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ExtractionRuleDefinitionAllOf) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ExtractionRuleDefinitionAllOf) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o ExtractionRuleDefinitionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableExtractionRuleDefinitionAllOf struct {
	value *ExtractionRuleDefinitionAllOf
	isSet bool
}

func (v NullableExtractionRuleDefinitionAllOf) Get() *ExtractionRuleDefinitionAllOf {
	return v.value
}

func (v *NullableExtractionRuleDefinitionAllOf) Set(val *ExtractionRuleDefinitionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableExtractionRuleDefinitionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableExtractionRuleDefinitionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtractionRuleDefinitionAllOf(val *ExtractionRuleDefinitionAllOf) *NullableExtractionRuleDefinitionAllOf {
	return &NullableExtractionRuleDefinitionAllOf{value: val, isSet: true}
}

func (v NullableExtractionRuleDefinitionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtractionRuleDefinitionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


