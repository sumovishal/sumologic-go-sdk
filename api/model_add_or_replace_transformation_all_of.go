/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// AddOrReplaceTransformationAllOf struct for AddOrReplaceTransformationAllOf
type AddOrReplaceTransformationAllOf struct {
	// The dimension that needs to be modified or added.
	DimensionToReplace string `json:"dimensionToReplace"`
	// The value for the dimension.
	Value string `json:"value"`
}

// NewAddOrReplaceTransformationAllOf instantiates a new AddOrReplaceTransformationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOrReplaceTransformationAllOf(dimensionToReplace string, value string) *AddOrReplaceTransformationAllOf {
	this := AddOrReplaceTransformationAllOf{}
	this.DimensionToReplace = dimensionToReplace
	this.Value = value
	return &this
}

// NewAddOrReplaceTransformationAllOfWithDefaults instantiates a new AddOrReplaceTransformationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOrReplaceTransformationAllOfWithDefaults() *AddOrReplaceTransformationAllOf {
	this := AddOrReplaceTransformationAllOf{}
	return &this
}

// GetDimensionToReplace returns the DimensionToReplace field value
func (o *AddOrReplaceTransformationAllOf) GetDimensionToReplace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DimensionToReplace
}

// GetDimensionToReplaceOk returns a tuple with the DimensionToReplace field value
// and a boolean to check if the value has been set.
func (o *AddOrReplaceTransformationAllOf) GetDimensionToReplaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DimensionToReplace, true
}

// SetDimensionToReplace sets field value
func (o *AddOrReplaceTransformationAllOf) SetDimensionToReplace(v string) {
	o.DimensionToReplace = v
}

// GetValue returns the Value field value
func (o *AddOrReplaceTransformationAllOf) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *AddOrReplaceTransformationAllOf) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *AddOrReplaceTransformationAllOf) SetValue(v string) {
	o.Value = v
}

func (o AddOrReplaceTransformationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dimensionToReplace"] = o.DimensionToReplace
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableAddOrReplaceTransformationAllOf struct {
	value *AddOrReplaceTransformationAllOf
	isSet bool
}

func (v NullableAddOrReplaceTransformationAllOf) Get() *AddOrReplaceTransformationAllOf {
	return v.value
}

func (v *NullableAddOrReplaceTransformationAllOf) Set(val *AddOrReplaceTransformationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOrReplaceTransformationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOrReplaceTransformationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOrReplaceTransformationAllOf(val *AddOrReplaceTransformationAllOf) *NullableAddOrReplaceTransformationAllOf {
	return &NullableAddOrReplaceTransformationAllOf{value: val, isSet: true}
}

func (v NullableAddOrReplaceTransformationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOrReplaceTransformationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


