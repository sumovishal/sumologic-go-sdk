/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FolderAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderAllOf{}

// FolderAllOf struct for FolderAllOf
type FolderAllOf struct {
	// The description of the folder.
	Description *string `json:"description,omitempty"`
	// A list of the content items.
	Children []Content `json:"children,omitempty"`
}

// NewFolderAllOf instantiates a new FolderAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderAllOf() *FolderAllOf {
	this := FolderAllOf{}
	return &this
}

// NewFolderAllOfWithDefaults instantiates a new FolderAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderAllOfWithDefaults() *FolderAllOf {
	this := FolderAllOf{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FolderAllOf) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FolderAllOf) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FolderAllOf) SetDescription(v string) {
	o.Description = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *FolderAllOf) GetChildren() []Content {
	if o == nil || IsNil(o.Children) {
		var ret []Content
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderAllOf) GetChildrenOk() ([]Content, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *FolderAllOf) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []Content and assigns it to the Children field.
func (o *FolderAllOf) SetChildren(v []Content) {
	o.Children = v
}

func (o FolderAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

type NullableFolderAllOf struct {
	value *FolderAllOf
	isSet bool
}

func (v NullableFolderAllOf) Get() *FolderAllOf {
	return v.value
}

func (v *NullableFolderAllOf) Set(val *FolderAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderAllOf(val *FolderAllOf) *NullableFolderAllOf {
	return &NullableFolderAllOf{value: val, isSet: true}
}

func (v NullableFolderAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


