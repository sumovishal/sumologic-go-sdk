/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
)

// checks if the DateTimeTracingValueAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateTimeTracingValueAllOf{}

// DateTimeTracingValueAllOf struct for DateTimeTracingValueAllOf
type DateTimeTracingValueAllOf struct {
	// Timestamp in UTC in the [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.
	Value time.Time `json:"value"`
}

// NewDateTimeTracingValueAllOf instantiates a new DateTimeTracingValueAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateTimeTracingValueAllOf(value time.Time) *DateTimeTracingValueAllOf {
	this := DateTimeTracingValueAllOf{}
	this.Value = value
	return &this
}

// NewDateTimeTracingValueAllOfWithDefaults instantiates a new DateTimeTracingValueAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateTimeTracingValueAllOfWithDefaults() *DateTimeTracingValueAllOf {
	this := DateTimeTracingValueAllOf{}
	return &this
}

// GetValue returns the Value field value
func (o *DateTimeTracingValueAllOf) GetValue() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *DateTimeTracingValueAllOf) GetValueOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *DateTimeTracingValueAllOf) SetValue(v time.Time) {
	o.Value = v
}

func (o DateTimeTracingValueAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateTimeTracingValueAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableDateTimeTracingValueAllOf struct {
	value *DateTimeTracingValueAllOf
	isSet bool
}

func (v NullableDateTimeTracingValueAllOf) Get() *DateTimeTracingValueAllOf {
	return v.value
}

func (v *NullableDateTimeTracingValueAllOf) Set(val *DateTimeTracingValueAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTimeTracingValueAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTimeTracingValueAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTimeTracingValueAllOf(val *DateTimeTracingValueAllOf) *NullableDateTimeTracingValueAllOf {
	return &NullableDateTimeTracingValueAllOf{value: val, isSet: true}
}

func (v NullableDateTimeTracingValueAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTimeTracingValueAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


