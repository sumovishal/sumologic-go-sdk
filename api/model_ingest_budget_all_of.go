/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the IngestBudgetAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngestBudgetAllOf{}

// IngestBudgetAllOf struct for IngestBudgetAllOf
type IngestBudgetAllOf struct {
	// Unique identifier for the ingest budget.
	Id string `json:"id"`
	// Current usage since the last reset, in bytes.
	UsageBytes *int64 `json:"usageBytes,omitempty"`
	// Status of the current usage. Can be `Normal`, `Approaching`, `Exceeded`, or `Unknown` (unable to retrieve usage).
	UsageStatus *string `json:"usageStatus,omitempty"`
	// Number of collectors assigned to the ingest budget.
	NumberOfCollectors *int64 `json:"numberOfCollectors,omitempty"`
}

// NewIngestBudgetAllOf instantiates a new IngestBudgetAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngestBudgetAllOf(id string) *IngestBudgetAllOf {
	this := IngestBudgetAllOf{}
	this.Id = id
	return &this
}

// NewIngestBudgetAllOfWithDefaults instantiates a new IngestBudgetAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngestBudgetAllOfWithDefaults() *IngestBudgetAllOf {
	this := IngestBudgetAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *IngestBudgetAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IngestBudgetAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IngestBudgetAllOf) SetId(v string) {
	o.Id = v
}

// GetUsageBytes returns the UsageBytes field value if set, zero value otherwise.
func (o *IngestBudgetAllOf) GetUsageBytes() int64 {
	if o == nil || IsNil(o.UsageBytes) {
		var ret int64
		return ret
	}
	return *o.UsageBytes
}

// GetUsageBytesOk returns a tuple with the UsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestBudgetAllOf) GetUsageBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.UsageBytes) {
		return nil, false
	}
	return o.UsageBytes, true
}

// HasUsageBytes returns a boolean if a field has been set.
func (o *IngestBudgetAllOf) HasUsageBytes() bool {
	if o != nil && !IsNil(o.UsageBytes) {
		return true
	}

	return false
}

// SetUsageBytes gets a reference to the given int64 and assigns it to the UsageBytes field.
func (o *IngestBudgetAllOf) SetUsageBytes(v int64) {
	o.UsageBytes = &v
}

// GetUsageStatus returns the UsageStatus field value if set, zero value otherwise.
func (o *IngestBudgetAllOf) GetUsageStatus() string {
	if o == nil || IsNil(o.UsageStatus) {
		var ret string
		return ret
	}
	return *o.UsageStatus
}

// GetUsageStatusOk returns a tuple with the UsageStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestBudgetAllOf) GetUsageStatusOk() (*string, bool) {
	if o == nil || IsNil(o.UsageStatus) {
		return nil, false
	}
	return o.UsageStatus, true
}

// HasUsageStatus returns a boolean if a field has been set.
func (o *IngestBudgetAllOf) HasUsageStatus() bool {
	if o != nil && !IsNil(o.UsageStatus) {
		return true
	}

	return false
}

// SetUsageStatus gets a reference to the given string and assigns it to the UsageStatus field.
func (o *IngestBudgetAllOf) SetUsageStatus(v string) {
	o.UsageStatus = &v
}

// GetNumberOfCollectors returns the NumberOfCollectors field value if set, zero value otherwise.
func (o *IngestBudgetAllOf) GetNumberOfCollectors() int64 {
	if o == nil || IsNil(o.NumberOfCollectors) {
		var ret int64
		return ret
	}
	return *o.NumberOfCollectors
}

// GetNumberOfCollectorsOk returns a tuple with the NumberOfCollectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IngestBudgetAllOf) GetNumberOfCollectorsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfCollectors) {
		return nil, false
	}
	return o.NumberOfCollectors, true
}

// HasNumberOfCollectors returns a boolean if a field has been set.
func (o *IngestBudgetAllOf) HasNumberOfCollectors() bool {
	if o != nil && !IsNil(o.NumberOfCollectors) {
		return true
	}

	return false
}

// SetNumberOfCollectors gets a reference to the given int64 and assigns it to the NumberOfCollectors field.
func (o *IngestBudgetAllOf) SetNumberOfCollectors(v int64) {
	o.NumberOfCollectors = &v
}

func (o IngestBudgetAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngestBudgetAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.UsageBytes) {
		toSerialize["usageBytes"] = o.UsageBytes
	}
	if !IsNil(o.UsageStatus) {
		toSerialize["usageStatus"] = o.UsageStatus
	}
	if !IsNil(o.NumberOfCollectors) {
		toSerialize["numberOfCollectors"] = o.NumberOfCollectors
	}
	return toSerialize, nil
}

type NullableIngestBudgetAllOf struct {
	value *IngestBudgetAllOf
	isSet bool
}

func (v NullableIngestBudgetAllOf) Get() *IngestBudgetAllOf {
	return v.value
}

func (v *NullableIngestBudgetAllOf) Set(val *IngestBudgetAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIngestBudgetAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIngestBudgetAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngestBudgetAllOf(val *IngestBudgetAllOf) *NullableIngestBudgetAllOf {
	return &NullableIngestBudgetAllOf{value: val, isSet: true}
}

func (v NullableIngestBudgetAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngestBudgetAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


