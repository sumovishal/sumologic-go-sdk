/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PartitionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionInfo{}

// PartitionInfo struct for PartitionInfo
type PartitionInfo struct {
	// The name of the partition.
	Name string `json:"name"`
	// The Data Tier where the data in the partition will reside. Possible values are:               1. `continuous`               2. `frequent`               3. `infrequent` Note: The \"infrequent\" and \"frequent\" tiers are only available to Cloud Flex Credits Enterprise Suite accounts.
	AnalyticsTier *string `json:"analyticsTier,omitempty"`
	// The Data Filter Group to which this parition belongs to. Possible values are :               1. `LOGS`               2. `SECURITY`               3. `AUDIT`
	DataFilterGroup *string `json:"dataFilterGroup,omitempty"`
}

type _PartitionInfo PartitionInfo

// NewPartitionInfo instantiates a new PartitionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionInfo(name string) *PartitionInfo {
	this := PartitionInfo{}
	this.Name = name
	return &this
}

// NewPartitionInfoWithDefaults instantiates a new PartitionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionInfoWithDefaults() *PartitionInfo {
	this := PartitionInfo{}
	return &this
}

// GetName returns the Name field value
func (o *PartitionInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PartitionInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PartitionInfo) SetName(v string) {
	o.Name = v
}

// GetAnalyticsTier returns the AnalyticsTier field value if set, zero value otherwise.
func (o *PartitionInfo) GetAnalyticsTier() string {
	if o == nil || IsNil(o.AnalyticsTier) {
		var ret string
		return ret
	}
	return *o.AnalyticsTier
}

// GetAnalyticsTierOk returns a tuple with the AnalyticsTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionInfo) GetAnalyticsTierOk() (*string, bool) {
	if o == nil || IsNil(o.AnalyticsTier) {
		return nil, false
	}
	return o.AnalyticsTier, true
}

// HasAnalyticsTier returns a boolean if a field has been set.
func (o *PartitionInfo) HasAnalyticsTier() bool {
	if o != nil && !IsNil(o.AnalyticsTier) {
		return true
	}

	return false
}

// SetAnalyticsTier gets a reference to the given string and assigns it to the AnalyticsTier field.
func (o *PartitionInfo) SetAnalyticsTier(v string) {
	o.AnalyticsTier = &v
}

// GetDataFilterGroup returns the DataFilterGroup field value if set, zero value otherwise.
func (o *PartitionInfo) GetDataFilterGroup() string {
	if o == nil || IsNil(o.DataFilterGroup) {
		var ret string
		return ret
	}
	return *o.DataFilterGroup
}

// GetDataFilterGroupOk returns a tuple with the DataFilterGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionInfo) GetDataFilterGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DataFilterGroup) {
		return nil, false
	}
	return o.DataFilterGroup, true
}

// HasDataFilterGroup returns a boolean if a field has been set.
func (o *PartitionInfo) HasDataFilterGroup() bool {
	if o != nil && !IsNil(o.DataFilterGroup) {
		return true
	}

	return false
}

// SetDataFilterGroup gets a reference to the given string and assigns it to the DataFilterGroup field.
func (o *PartitionInfo) SetDataFilterGroup(v string) {
	o.DataFilterGroup = &v
}

func (o PartitionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.AnalyticsTier) {
		toSerialize["analyticsTier"] = o.AnalyticsTier
	}
	if !IsNil(o.DataFilterGroup) {
		toSerialize["dataFilterGroup"] = o.DataFilterGroup
	}
	return toSerialize, nil
}

func (o *PartitionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPartitionInfo := _PartitionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPartitionInfo)

	if err != nil {
		return err
	}

	*o = PartitionInfo(varPartitionInfo)

	return err
}

type NullablePartitionInfo struct {
	value *PartitionInfo
	isSet bool
}

func (v NullablePartitionInfo) Get() *PartitionInfo {
	return v.value
}

func (v *NullablePartitionInfo) Set(val *PartitionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionInfo(val *PartitionInfo) *NullablePartitionInfo {
	return &NullablePartitionInfo{value: val, isSet: true}
}

func (v NullablePartitionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


