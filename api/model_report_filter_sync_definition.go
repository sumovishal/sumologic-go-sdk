/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// ReportFilterSyncDefinition struct for ReportFilterSyncDefinition
type ReportFilterSyncDefinition struct {
	// The name af the field being filtered on, as listed in PanelField.
	FieldName string `json:"fieldName"`
	// The name of the field being filtered on, as displayed to the user.
	Label string `json:"label"`
	// The default value of the parameter.
	DefaultValue *string `json:"defaultValue,omitempty"`
	// Type of filter. Can only be `numeric` or `textbox`.
	FilterType string `json:"filterType"`
	// Visual settings for the panel.
	Properties string `json:"properties"`
	// A list of panel identifiers that the filter applies to.
	PanelIds []string `json:"panelIds"`
}

// NewReportFilterSyncDefinition instantiates a new ReportFilterSyncDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportFilterSyncDefinition(fieldName string, label string, filterType string, properties string, panelIds []string) *ReportFilterSyncDefinition {
	this := ReportFilterSyncDefinition{}
	this.FieldName = fieldName
	this.Label = label
	this.FilterType = filterType
	this.Properties = properties
	this.PanelIds = panelIds
	return &this
}

// NewReportFilterSyncDefinitionWithDefaults instantiates a new ReportFilterSyncDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportFilterSyncDefinitionWithDefaults() *ReportFilterSyncDefinition {
	this := ReportFilterSyncDefinition{}
	return &this
}

// GetFieldName returns the FieldName field value
func (o *ReportFilterSyncDefinition) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *ReportFilterSyncDefinition) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *ReportFilterSyncDefinition) SetFieldName(v string) {
	o.FieldName = v
}

// GetLabel returns the Label field value
func (o *ReportFilterSyncDefinition) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ReportFilterSyncDefinition) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ReportFilterSyncDefinition) SetLabel(v string) {
	o.Label = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *ReportFilterSyncDefinition) GetDefaultValue() string {
	if o == nil || o.DefaultValue == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportFilterSyncDefinition) GetDefaultValueOk() (*string, bool) {
	if o == nil || o.DefaultValue == nil {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ReportFilterSyncDefinition) HasDefaultValue() bool {
	if o != nil && o.DefaultValue != nil {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *ReportFilterSyncDefinition) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetFilterType returns the FilterType field value
func (o *ReportFilterSyncDefinition) GetFilterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *ReportFilterSyncDefinition) GetFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *ReportFilterSyncDefinition) SetFilterType(v string) {
	o.FilterType = v
}

// GetProperties returns the Properties field value
func (o *ReportFilterSyncDefinition) GetProperties() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *ReportFilterSyncDefinition) GetPropertiesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *ReportFilterSyncDefinition) SetProperties(v string) {
	o.Properties = v
}

// GetPanelIds returns the PanelIds field value
func (o *ReportFilterSyncDefinition) GetPanelIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PanelIds
}

// GetPanelIdsOk returns a tuple with the PanelIds field value
// and a boolean to check if the value has been set.
func (o *ReportFilterSyncDefinition) GetPanelIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PanelIds, true
}

// SetPanelIds sets field value
func (o *ReportFilterSyncDefinition) SetPanelIds(v []string) {
	o.PanelIds = v
}

func (o ReportFilterSyncDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fieldName"] = o.FieldName
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if o.DefaultValue != nil {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if true {
		toSerialize["filterType"] = o.FilterType
	}
	if true {
		toSerialize["properties"] = o.Properties
	}
	if true {
		toSerialize["panelIds"] = o.PanelIds
	}
	return json.Marshal(toSerialize)
}

type NullableReportFilterSyncDefinition struct {
	value *ReportFilterSyncDefinition
	isSet bool
}

func (v NullableReportFilterSyncDefinition) Get() *ReportFilterSyncDefinition {
	return v.value
}

func (v *NullableReportFilterSyncDefinition) Set(val *ReportFilterSyncDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableReportFilterSyncDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableReportFilterSyncDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportFilterSyncDefinition(val *ReportFilterSyncDefinition) *NullableReportFilterSyncDefinition {
	return &NullableReportFilterSyncDefinition{value: val, isSet: true}
}

func (v NullableReportFilterSyncDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportFilterSyncDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


