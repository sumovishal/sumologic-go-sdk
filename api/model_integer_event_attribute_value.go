/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// IntegerEventAttributeValue struct for IntegerEventAttributeValue
type IntegerEventAttributeValue struct {
	EventAttributeValue
	Value int64 `json:"value"`
}

// NewIntegerEventAttributeValue instantiates a new IntegerEventAttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegerEventAttributeValue(value int64, type_ string) *IntegerEventAttributeValue {
	this := IntegerEventAttributeValue{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewIntegerEventAttributeValueWithDefaults instantiates a new IntegerEventAttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegerEventAttributeValueWithDefaults() *IntegerEventAttributeValue {
	this := IntegerEventAttributeValue{}
	return &this
}

// GetValue returns the Value field value
func (o *IntegerEventAttributeValue) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *IntegerEventAttributeValue) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *IntegerEventAttributeValue) SetValue(v int64) {
	o.Value = v
}

func (o IntegerEventAttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedEventAttributeValue, errEventAttributeValue := json.Marshal(o.EventAttributeValue)
	if errEventAttributeValue != nil {
		return []byte{}, errEventAttributeValue
	}
	errEventAttributeValue = json.Unmarshal([]byte(serializedEventAttributeValue), &toSerialize)
	if errEventAttributeValue != nil {
		return []byte{}, errEventAttributeValue
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableIntegerEventAttributeValue struct {
	value *IntegerEventAttributeValue
	isSet bool
}

func (v NullableIntegerEventAttributeValue) Get() *IntegerEventAttributeValue {
	return v.value
}

func (v *NullableIntegerEventAttributeValue) Set(val *IntegerEventAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegerEventAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegerEventAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegerEventAttributeValue(val *IntegerEventAttributeValue) *NullableIntegerEventAttributeValue {
	return &NullableIntegerEventAttributeValue{value: val, isSet: true}
}

func (v NullableIntegerEventAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegerEventAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


