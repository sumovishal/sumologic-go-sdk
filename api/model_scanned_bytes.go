/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the ScannedBytes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScannedBytes{}

// ScannedBytes The total number of scanned bytes from tiered data sources (ex. infrequent, continuous, frequent). See https://help.sumologic.com/docs/manage/partitions-data-tiers/data-tiers/ for a more detailed explaination. 
type ScannedBytes struct {
	// The total number of scanned bytes from infrequent tier data for the query in bytes.
	Infrequent *int64 `json:"infrequent,omitempty"`
	// The total number of scanned bytes from continuous tier data for the query in bytes.
	Continuous *int64 `json:"continuous,omitempty"`
	// The total number of scanned bytes from frequent tier data for the query in bytes.
	Frequent *int64 `json:"frequent,omitempty"`
	// The total number of scanned bytes from security tier data for the query in bytes.
	Security *int64 `json:"security,omitempty"`
	// The total number of scanned bytes from tracing tier data for the query in bytes.
	Tracing *int64 `json:"tracing,omitempty"`
	// The total number of scanned bytes from upfront tier data for the query in bytes.
	Upfront *int64 `json:"upfront,omitempty"`
	// The total number of scanned bytes from metered tier data for the query in bytes.
	Metered *int64 `json:"metered,omitempty"`
	// The total number of scanned bytes from rce tier data for the query in bytes.
	Rce *int64 `json:"rce,omitempty"`
	// The total number of scanned bytes from flex tier data for the query in bytes.
	Flex *int64 `json:"flex,omitempty"`
}

// NewScannedBytes instantiates a new ScannedBytes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScannedBytes() *ScannedBytes {
	this := ScannedBytes{}
	return &this
}

// NewScannedBytesWithDefaults instantiates a new ScannedBytes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScannedBytesWithDefaults() *ScannedBytes {
	this := ScannedBytes{}
	return &this
}

// GetInfrequent returns the Infrequent field value if set, zero value otherwise.
func (o *ScannedBytes) GetInfrequent() int64 {
	if o == nil || IsNil(o.Infrequent) {
		var ret int64
		return ret
	}
	return *o.Infrequent
}

// GetInfrequentOk returns a tuple with the Infrequent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannedBytes) GetInfrequentOk() (*int64, bool) {
	if o == nil || IsNil(o.Infrequent) {
		return nil, false
	}
	return o.Infrequent, true
}

// HasInfrequent returns a boolean if a field has been set.
func (o *ScannedBytes) HasInfrequent() bool {
	if o != nil && !IsNil(o.Infrequent) {
		return true
	}

	return false
}

// SetInfrequent gets a reference to the given int64 and assigns it to the Infrequent field.
func (o *ScannedBytes) SetInfrequent(v int64) {
	o.Infrequent = &v
}

// GetContinuous returns the Continuous field value if set, zero value otherwise.
func (o *ScannedBytes) GetContinuous() int64 {
	if o == nil || IsNil(o.Continuous) {
		var ret int64
		return ret
	}
	return *o.Continuous
}

// GetContinuousOk returns a tuple with the Continuous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannedBytes) GetContinuousOk() (*int64, bool) {
	if o == nil || IsNil(o.Continuous) {
		return nil, false
	}
	return o.Continuous, true
}

// HasContinuous returns a boolean if a field has been set.
func (o *ScannedBytes) HasContinuous() bool {
	if o != nil && !IsNil(o.Continuous) {
		return true
	}

	return false
}

// SetContinuous gets a reference to the given int64 and assigns it to the Continuous field.
func (o *ScannedBytes) SetContinuous(v int64) {
	o.Continuous = &v
}

// GetFrequent returns the Frequent field value if set, zero value otherwise.
func (o *ScannedBytes) GetFrequent() int64 {
	if o == nil || IsNil(o.Frequent) {
		var ret int64
		return ret
	}
	return *o.Frequent
}

// GetFrequentOk returns a tuple with the Frequent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannedBytes) GetFrequentOk() (*int64, bool) {
	if o == nil || IsNil(o.Frequent) {
		return nil, false
	}
	return o.Frequent, true
}

// HasFrequent returns a boolean if a field has been set.
func (o *ScannedBytes) HasFrequent() bool {
	if o != nil && !IsNil(o.Frequent) {
		return true
	}

	return false
}

// SetFrequent gets a reference to the given int64 and assigns it to the Frequent field.
func (o *ScannedBytes) SetFrequent(v int64) {
	o.Frequent = &v
}

// GetSecurity returns the Security field value if set, zero value otherwise.
func (o *ScannedBytes) GetSecurity() int64 {
	if o == nil || IsNil(o.Security) {
		var ret int64
		return ret
	}
	return *o.Security
}

// GetSecurityOk returns a tuple with the Security field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannedBytes) GetSecurityOk() (*int64, bool) {
	if o == nil || IsNil(o.Security) {
		return nil, false
	}
	return o.Security, true
}

// HasSecurity returns a boolean if a field has been set.
func (o *ScannedBytes) HasSecurity() bool {
	if o != nil && !IsNil(o.Security) {
		return true
	}

	return false
}

// SetSecurity gets a reference to the given int64 and assigns it to the Security field.
func (o *ScannedBytes) SetSecurity(v int64) {
	o.Security = &v
}

// GetTracing returns the Tracing field value if set, zero value otherwise.
func (o *ScannedBytes) GetTracing() int64 {
	if o == nil || IsNil(o.Tracing) {
		var ret int64
		return ret
	}
	return *o.Tracing
}

// GetTracingOk returns a tuple with the Tracing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannedBytes) GetTracingOk() (*int64, bool) {
	if o == nil || IsNil(o.Tracing) {
		return nil, false
	}
	return o.Tracing, true
}

// HasTracing returns a boolean if a field has been set.
func (o *ScannedBytes) HasTracing() bool {
	if o != nil && !IsNil(o.Tracing) {
		return true
	}

	return false
}

// SetTracing gets a reference to the given int64 and assigns it to the Tracing field.
func (o *ScannedBytes) SetTracing(v int64) {
	o.Tracing = &v
}

// GetUpfront returns the Upfront field value if set, zero value otherwise.
func (o *ScannedBytes) GetUpfront() int64 {
	if o == nil || IsNil(o.Upfront) {
		var ret int64
		return ret
	}
	return *o.Upfront
}

// GetUpfrontOk returns a tuple with the Upfront field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannedBytes) GetUpfrontOk() (*int64, bool) {
	if o == nil || IsNil(o.Upfront) {
		return nil, false
	}
	return o.Upfront, true
}

// HasUpfront returns a boolean if a field has been set.
func (o *ScannedBytes) HasUpfront() bool {
	if o != nil && !IsNil(o.Upfront) {
		return true
	}

	return false
}

// SetUpfront gets a reference to the given int64 and assigns it to the Upfront field.
func (o *ScannedBytes) SetUpfront(v int64) {
	o.Upfront = &v
}

// GetMetered returns the Metered field value if set, zero value otherwise.
func (o *ScannedBytes) GetMetered() int64 {
	if o == nil || IsNil(o.Metered) {
		var ret int64
		return ret
	}
	return *o.Metered
}

// GetMeteredOk returns a tuple with the Metered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannedBytes) GetMeteredOk() (*int64, bool) {
	if o == nil || IsNil(o.Metered) {
		return nil, false
	}
	return o.Metered, true
}

// HasMetered returns a boolean if a field has been set.
func (o *ScannedBytes) HasMetered() bool {
	if o != nil && !IsNil(o.Metered) {
		return true
	}

	return false
}

// SetMetered gets a reference to the given int64 and assigns it to the Metered field.
func (o *ScannedBytes) SetMetered(v int64) {
	o.Metered = &v
}

// GetRce returns the Rce field value if set, zero value otherwise.
func (o *ScannedBytes) GetRce() int64 {
	if o == nil || IsNil(o.Rce) {
		var ret int64
		return ret
	}
	return *o.Rce
}

// GetRceOk returns a tuple with the Rce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannedBytes) GetRceOk() (*int64, bool) {
	if o == nil || IsNil(o.Rce) {
		return nil, false
	}
	return o.Rce, true
}

// HasRce returns a boolean if a field has been set.
func (o *ScannedBytes) HasRce() bool {
	if o != nil && !IsNil(o.Rce) {
		return true
	}

	return false
}

// SetRce gets a reference to the given int64 and assigns it to the Rce field.
func (o *ScannedBytes) SetRce(v int64) {
	o.Rce = &v
}

// GetFlex returns the Flex field value if set, zero value otherwise.
func (o *ScannedBytes) GetFlex() int64 {
	if o == nil || IsNil(o.Flex) {
		var ret int64
		return ret
	}
	return *o.Flex
}

// GetFlexOk returns a tuple with the Flex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScannedBytes) GetFlexOk() (*int64, bool) {
	if o == nil || IsNil(o.Flex) {
		return nil, false
	}
	return o.Flex, true
}

// HasFlex returns a boolean if a field has been set.
func (o *ScannedBytes) HasFlex() bool {
	if o != nil && !IsNil(o.Flex) {
		return true
	}

	return false
}

// SetFlex gets a reference to the given int64 and assigns it to the Flex field.
func (o *ScannedBytes) SetFlex(v int64) {
	o.Flex = &v
}

func (o ScannedBytes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScannedBytes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Infrequent) {
		toSerialize["infrequent"] = o.Infrequent
	}
	if !IsNil(o.Continuous) {
		toSerialize["continuous"] = o.Continuous
	}
	if !IsNil(o.Frequent) {
		toSerialize["frequent"] = o.Frequent
	}
	if !IsNil(o.Security) {
		toSerialize["security"] = o.Security
	}
	if !IsNil(o.Tracing) {
		toSerialize["tracing"] = o.Tracing
	}
	if !IsNil(o.Upfront) {
		toSerialize["upfront"] = o.Upfront
	}
	if !IsNil(o.Metered) {
		toSerialize["metered"] = o.Metered
	}
	if !IsNil(o.Rce) {
		toSerialize["rce"] = o.Rce
	}
	if !IsNil(o.Flex) {
		toSerialize["flex"] = o.Flex
	}
	return toSerialize, nil
}

type NullableScannedBytes struct {
	value *ScannedBytes
	isSet bool
}

func (v NullableScannedBytes) Get() *ScannedBytes {
	return v.value
}

func (v *NullableScannedBytes) Set(val *ScannedBytes) {
	v.value = val
	v.isSet = true
}

func (v NullableScannedBytes) IsSet() bool {
	return v.isSet
}

func (v *NullableScannedBytes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScannedBytes(val *ScannedBytes) *NullableScannedBytes {
	return &NullableScannedBytes{value: val, isSet: true}
}

func (v NullableScannedBytes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScannedBytes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


