/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaginatedLogSearches type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedLogSearches{}

// PaginatedLogSearches struct for PaginatedLogSearches
type PaginatedLogSearches struct {
	// List of log searches.
	LogSearches []LogSearch `json:"logSearches"`
	// Next continuation token. `token` is set to null when no more pages are left.
	Token *string `json:"token,omitempty"`
}

type _PaginatedLogSearches PaginatedLogSearches

// NewPaginatedLogSearches instantiates a new PaginatedLogSearches object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedLogSearches(logSearches []LogSearch) *PaginatedLogSearches {
	this := PaginatedLogSearches{}
	this.LogSearches = logSearches
	return &this
}

// NewPaginatedLogSearchesWithDefaults instantiates a new PaginatedLogSearches object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedLogSearchesWithDefaults() *PaginatedLogSearches {
	this := PaginatedLogSearches{}
	return &this
}

// GetLogSearches returns the LogSearches field value
func (o *PaginatedLogSearches) GetLogSearches() []LogSearch {
	if o == nil {
		var ret []LogSearch
		return ret
	}

	return o.LogSearches
}

// GetLogSearchesOk returns a tuple with the LogSearches field value
// and a boolean to check if the value has been set.
func (o *PaginatedLogSearches) GetLogSearchesOk() ([]LogSearch, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogSearches, true
}

// SetLogSearches sets field value
func (o *PaginatedLogSearches) SetLogSearches(v []LogSearch) {
	o.LogSearches = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PaginatedLogSearches) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedLogSearches) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PaginatedLogSearches) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PaginatedLogSearches) SetToken(v string) {
	o.Token = &v
}

func (o PaginatedLogSearches) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedLogSearches) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["logSearches"] = o.LogSearches
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

func (o *PaginatedLogSearches) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logSearches",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaginatedLogSearches := _PaginatedLogSearches{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaginatedLogSearches)

	if err != nil {
		return err
	}

	*o = PaginatedLogSearches(varPaginatedLogSearches)

	return err
}

type NullablePaginatedLogSearches struct {
	value *PaginatedLogSearches
	isSet bool
}

func (v NullablePaginatedLogSearches) Get() *PaginatedLogSearches {
	return v.value
}

func (v *NullablePaginatedLogSearches) Set(val *PaginatedLogSearches) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedLogSearches) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedLogSearches) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedLogSearches(val *PaginatedLogSearches) *NullablePaginatedLogSearches {
	return &NullablePaginatedLogSearches{value: val, isSet: true}
}

func (v NullablePaginatedLogSearches) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedLogSearches) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


