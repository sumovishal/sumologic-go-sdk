/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CSEWindowsInvalidConfigurationTrackerAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSEWindowsInvalidConfigurationTrackerAllOf{}

// CSEWindowsInvalidConfigurationTrackerAllOf struct for CSEWindowsInvalidConfigurationTrackerAllOf
type CSEWindowsInvalidConfigurationTrackerAllOf struct {
	// The sensor ID.
	SensorId *string `json:"sensorId,omitempty"`
	// The sensor's hostname.
	SensorHostname *string `json:"sensorHostname,omitempty"`
	// The sensor's user name.
	SensorUserName *string `json:"sensorUserName,omitempty"`
}

// NewCSEWindowsInvalidConfigurationTrackerAllOf instantiates a new CSEWindowsInvalidConfigurationTrackerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSEWindowsInvalidConfigurationTrackerAllOf() *CSEWindowsInvalidConfigurationTrackerAllOf {
	this := CSEWindowsInvalidConfigurationTrackerAllOf{}
	return &this
}

// NewCSEWindowsInvalidConfigurationTrackerAllOfWithDefaults instantiates a new CSEWindowsInvalidConfigurationTrackerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSEWindowsInvalidConfigurationTrackerAllOfWithDefaults() *CSEWindowsInvalidConfigurationTrackerAllOf {
	this := CSEWindowsInvalidConfigurationTrackerAllOf{}
	return &this
}

// GetSensorId returns the SensorId field value if set, zero value otherwise.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) GetSensorId() string {
	if o == nil || IsNil(o.SensorId) {
		var ret string
		return ret
	}
	return *o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) GetSensorIdOk() (*string, bool) {
	if o == nil || IsNil(o.SensorId) {
		return nil, false
	}
	return o.SensorId, true
}

// HasSensorId returns a boolean if a field has been set.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) HasSensorId() bool {
	if o != nil && !IsNil(o.SensorId) {
		return true
	}

	return false
}

// SetSensorId gets a reference to the given string and assigns it to the SensorId field.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) SetSensorId(v string) {
	o.SensorId = &v
}

// GetSensorHostname returns the SensorHostname field value if set, zero value otherwise.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) GetSensorHostname() string {
	if o == nil || IsNil(o.SensorHostname) {
		var ret string
		return ret
	}
	return *o.SensorHostname
}

// GetSensorHostnameOk returns a tuple with the SensorHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) GetSensorHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.SensorHostname) {
		return nil, false
	}
	return o.SensorHostname, true
}

// HasSensorHostname returns a boolean if a field has been set.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) HasSensorHostname() bool {
	if o != nil && !IsNil(o.SensorHostname) {
		return true
	}

	return false
}

// SetSensorHostname gets a reference to the given string and assigns it to the SensorHostname field.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) SetSensorHostname(v string) {
	o.SensorHostname = &v
}

// GetSensorUserName returns the SensorUserName field value if set, zero value otherwise.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) GetSensorUserName() string {
	if o == nil || IsNil(o.SensorUserName) {
		var ret string
		return ret
	}
	return *o.SensorUserName
}

// GetSensorUserNameOk returns a tuple with the SensorUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) GetSensorUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.SensorUserName) {
		return nil, false
	}
	return o.SensorUserName, true
}

// HasSensorUserName returns a boolean if a field has been set.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) HasSensorUserName() bool {
	if o != nil && !IsNil(o.SensorUserName) {
		return true
	}

	return false
}

// SetSensorUserName gets a reference to the given string and assigns it to the SensorUserName field.
func (o *CSEWindowsInvalidConfigurationTrackerAllOf) SetSensorUserName(v string) {
	o.SensorUserName = &v
}

func (o CSEWindowsInvalidConfigurationTrackerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSEWindowsInvalidConfigurationTrackerAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SensorId) {
		toSerialize["sensorId"] = o.SensorId
	}
	if !IsNil(o.SensorHostname) {
		toSerialize["sensorHostname"] = o.SensorHostname
	}
	if !IsNil(o.SensorUserName) {
		toSerialize["sensorUserName"] = o.SensorUserName
	}
	return toSerialize, nil
}

type NullableCSEWindowsInvalidConfigurationTrackerAllOf struct {
	value *CSEWindowsInvalidConfigurationTrackerAllOf
	isSet bool
}

func (v NullableCSEWindowsInvalidConfigurationTrackerAllOf) Get() *CSEWindowsInvalidConfigurationTrackerAllOf {
	return v.value
}

func (v *NullableCSEWindowsInvalidConfigurationTrackerAllOf) Set(val *CSEWindowsInvalidConfigurationTrackerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCSEWindowsInvalidConfigurationTrackerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCSEWindowsInvalidConfigurationTrackerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSEWindowsInvalidConfigurationTrackerAllOf(val *CSEWindowsInvalidConfigurationTrackerAllOf) *NullableCSEWindowsInvalidConfigurationTrackerAllOf {
	return &NullableCSEWindowsInvalidConfigurationTrackerAllOf{value: val, isSet: true}
}

func (v NullableCSEWindowsInvalidConfigurationTrackerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSEWindowsInvalidConfigurationTrackerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


