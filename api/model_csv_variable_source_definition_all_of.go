/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CsvVariableSourceDefinitionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CsvVariableSourceDefinitionAllOf{}

// CsvVariableSourceDefinitionAllOf Variable with values that are powered by a csv file.
type CsvVariableSourceDefinitionAllOf struct {
	// Comma separated values for the variable.
	Values string `json:"values"`
}

// NewCsvVariableSourceDefinitionAllOf instantiates a new CsvVariableSourceDefinitionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCsvVariableSourceDefinitionAllOf(values string) *CsvVariableSourceDefinitionAllOf {
	this := CsvVariableSourceDefinitionAllOf{}
	this.Values = values
	return &this
}

// NewCsvVariableSourceDefinitionAllOfWithDefaults instantiates a new CsvVariableSourceDefinitionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCsvVariableSourceDefinitionAllOfWithDefaults() *CsvVariableSourceDefinitionAllOf {
	this := CsvVariableSourceDefinitionAllOf{}
	return &this
}

// GetValues returns the Values field value
func (o *CsvVariableSourceDefinitionAllOf) GetValues() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *CsvVariableSourceDefinitionAllOf) GetValuesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Values, true
}

// SetValues sets field value
func (o *CsvVariableSourceDefinitionAllOf) SetValues(v string) {
	o.Values = v
}

func (o CsvVariableSourceDefinitionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CsvVariableSourceDefinitionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

type NullableCsvVariableSourceDefinitionAllOf struct {
	value *CsvVariableSourceDefinitionAllOf
	isSet bool
}

func (v NullableCsvVariableSourceDefinitionAllOf) Get() *CsvVariableSourceDefinitionAllOf {
	return v.value
}

func (v *NullableCsvVariableSourceDefinitionAllOf) Set(val *CsvVariableSourceDefinitionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCsvVariableSourceDefinitionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCsvVariableSourceDefinitionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCsvVariableSourceDefinitionAllOf(val *CsvVariableSourceDefinitionAllOf) *NullableCsvVariableSourceDefinitionAllOf {
	return &NullableCsvVariableSourceDefinitionAllOf{value: val, isSet: true}
}

func (v NullableCsvVariableSourceDefinitionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCsvVariableSourceDefinitionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


