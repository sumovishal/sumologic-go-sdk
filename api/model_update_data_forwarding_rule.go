/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// UpdateDataForwardingRule struct for UpdateDataForwardingRule
type UpdateDataForwardingRule struct {
	// Data forwarding destination id.
	DestinationId *string `json:"destinationId,omitempty"`
	// True when the data forwarding rule is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Specify the path prefix to a directory in the S3 bucket and how to format the file name.
	FileFormat *string `json:"fileFormat,omitempty"`
}

// NewUpdateDataForwardingRule instantiates a new UpdateDataForwardingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDataForwardingRule() *UpdateDataForwardingRule {
	this := UpdateDataForwardingRule{}
	return &this
}

// NewUpdateDataForwardingRuleWithDefaults instantiates a new UpdateDataForwardingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDataForwardingRuleWithDefaults() *UpdateDataForwardingRule {
	this := UpdateDataForwardingRule{}
	return &this
}

// GetDestinationId returns the DestinationId field value if set, zero value otherwise.
func (o *UpdateDataForwardingRule) GetDestinationId() string {
	if o == nil || o.DestinationId == nil {
		var ret string
		return ret
	}
	return *o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataForwardingRule) GetDestinationIdOk() (*string, bool) {
	if o == nil || o.DestinationId == nil {
		return nil, false
	}
	return o.DestinationId, true
}

// HasDestinationId returns a boolean if a field has been set.
func (o *UpdateDataForwardingRule) HasDestinationId() bool {
	if o != nil && o.DestinationId != nil {
		return true
	}

	return false
}

// SetDestinationId gets a reference to the given string and assigns it to the DestinationId field.
func (o *UpdateDataForwardingRule) SetDestinationId(v string) {
	o.DestinationId = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateDataForwardingRule) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataForwardingRule) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateDataForwardingRule) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateDataForwardingRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFileFormat returns the FileFormat field value if set, zero value otherwise.
func (o *UpdateDataForwardingRule) GetFileFormat() string {
	if o == nil || o.FileFormat == nil {
		var ret string
		return ret
	}
	return *o.FileFormat
}

// GetFileFormatOk returns a tuple with the FileFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDataForwardingRule) GetFileFormatOk() (*string, bool) {
	if o == nil || o.FileFormat == nil {
		return nil, false
	}
	return o.FileFormat, true
}

// HasFileFormat returns a boolean if a field has been set.
func (o *UpdateDataForwardingRule) HasFileFormat() bool {
	if o != nil && o.FileFormat != nil {
		return true
	}

	return false
}

// SetFileFormat gets a reference to the given string and assigns it to the FileFormat field.
func (o *UpdateDataForwardingRule) SetFileFormat(v string) {
	o.FileFormat = &v
}

func (o UpdateDataForwardingRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DestinationId != nil {
		toSerialize["destinationId"] = o.DestinationId
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.FileFormat != nil {
		toSerialize["fileFormat"] = o.FileFormat
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateDataForwardingRule struct {
	value *UpdateDataForwardingRule
	isSet bool
}

func (v NullableUpdateDataForwardingRule) Get() *UpdateDataForwardingRule {
	return v.value
}

func (v *NullableUpdateDataForwardingRule) Set(val *UpdateDataForwardingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDataForwardingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDataForwardingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDataForwardingRule(val *UpdateDataForwardingRule) *NullableUpdateDataForwardingRule {
	return &NullableUpdateDataForwardingRule{value: val, isSet: true}
}

func (v NullableUpdateDataForwardingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDataForwardingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


