/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the BucketValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketValue{}

// BucketValue Base bucket value object.
type BucketValue struct {
	// Bucket value type of the object model.
	BucketValueType string `json:"bucketValueType"`
	// The number of traces per bucket.
	TraceCount int64 `json:"traceCount"`
}

// NewBucketValue instantiates a new BucketValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketValue(bucketValueType string, traceCount int64) *BucketValue {
	this := BucketValue{}
	this.BucketValueType = bucketValueType
	this.TraceCount = traceCount
	return &this
}

// NewBucketValueWithDefaults instantiates a new BucketValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketValueWithDefaults() *BucketValue {
	this := BucketValue{}
	return &this
}

// GetBucketValueType returns the BucketValueType field value
func (o *BucketValue) GetBucketValueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketValueType
}

// GetBucketValueTypeOk returns a tuple with the BucketValueType field value
// and a boolean to check if the value has been set.
func (o *BucketValue) GetBucketValueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketValueType, true
}

// SetBucketValueType sets field value
func (o *BucketValue) SetBucketValueType(v string) {
	o.BucketValueType = v
}

// GetTraceCount returns the TraceCount field value
func (o *BucketValue) GetTraceCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TraceCount
}

// GetTraceCountOk returns a tuple with the TraceCount field value
// and a boolean to check if the value has been set.
func (o *BucketValue) GetTraceCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceCount, true
}

// SetTraceCount sets field value
func (o *BucketValue) SetTraceCount(v int64) {
	o.TraceCount = v
}

func (o BucketValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BucketValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucketValueType"] = o.BucketValueType
	toSerialize["traceCount"] = o.TraceCount
	return toSerialize, nil
}

type NullableBucketValue struct {
	value *BucketValue
	isSet bool
}

func (v NullableBucketValue) Get() *BucketValue {
	return v.value
}

func (v *NullableBucketValue) Set(val *BucketValue) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketValue) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketValue(val *BucketValue) *NullableBucketValue {
	return &NullableBucketValue{value: val, isSet: true}
}

func (v NullableBucketValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


