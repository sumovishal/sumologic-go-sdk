/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SpanCalculationPctAggregatorAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanCalculationPctAggregatorAllOf{}

// SpanCalculationPctAggregatorAllOf struct for SpanCalculationPctAggregatorAllOf
type SpanCalculationPctAggregatorAllOf struct {
	// The specified percentile of a given field.
	Percentile float64 `json:"percentile"`
}

// NewSpanCalculationPctAggregatorAllOf instantiates a new SpanCalculationPctAggregatorAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanCalculationPctAggregatorAllOf(percentile float64) *SpanCalculationPctAggregatorAllOf {
	this := SpanCalculationPctAggregatorAllOf{}
	this.Percentile = percentile
	return &this
}

// NewSpanCalculationPctAggregatorAllOfWithDefaults instantiates a new SpanCalculationPctAggregatorAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanCalculationPctAggregatorAllOfWithDefaults() *SpanCalculationPctAggregatorAllOf {
	this := SpanCalculationPctAggregatorAllOf{}
	return &this
}

// GetPercentile returns the Percentile field value
func (o *SpanCalculationPctAggregatorAllOf) GetPercentile() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Percentile
}

// GetPercentileOk returns a tuple with the Percentile field value
// and a boolean to check if the value has been set.
func (o *SpanCalculationPctAggregatorAllOf) GetPercentileOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentile, true
}

// SetPercentile sets field value
func (o *SpanCalculationPctAggregatorAllOf) SetPercentile(v float64) {
	o.Percentile = v
}

func (o SpanCalculationPctAggregatorAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanCalculationPctAggregatorAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["percentile"] = o.Percentile
	return toSerialize, nil
}

type NullableSpanCalculationPctAggregatorAllOf struct {
	value *SpanCalculationPctAggregatorAllOf
	isSet bool
}

func (v NullableSpanCalculationPctAggregatorAllOf) Get() *SpanCalculationPctAggregatorAllOf {
	return v.value
}

func (v *NullableSpanCalculationPctAggregatorAllOf) Set(val *SpanCalculationPctAggregatorAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanCalculationPctAggregatorAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanCalculationPctAggregatorAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanCalculationPctAggregatorAllOf(val *SpanCalculationPctAggregatorAllOf) *NullableSpanCalculationPctAggregatorAllOf {
	return &NullableSpanCalculationPctAggregatorAllOf{value: val, isSet: true}
}

func (v NullableSpanCalculationPctAggregatorAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanCalculationPctAggregatorAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


