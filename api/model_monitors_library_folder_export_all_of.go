/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// MonitorsLibraryFolderExportAllOf struct for MonitorsLibraryFolderExportAllOf
type MonitorsLibraryFolderExportAllOf struct {
	// The items in the folder. A multi-type list of types monitor or folder.
	Children []MonitorsLibraryBaseExport `json:"children,omitempty"`
}

// NewMonitorsLibraryFolderExportAllOf instantiates a new MonitorsLibraryFolderExportAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorsLibraryFolderExportAllOf() *MonitorsLibraryFolderExportAllOf {
	this := MonitorsLibraryFolderExportAllOf{}
	return &this
}

// NewMonitorsLibraryFolderExportAllOfWithDefaults instantiates a new MonitorsLibraryFolderExportAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorsLibraryFolderExportAllOfWithDefaults() *MonitorsLibraryFolderExportAllOf {
	this := MonitorsLibraryFolderExportAllOf{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *MonitorsLibraryFolderExportAllOf) GetChildren() []MonitorsLibraryBaseExport {
	if o == nil || o.Children == nil {
		var ret []MonitorsLibraryBaseExport
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorsLibraryFolderExportAllOf) GetChildrenOk() ([]MonitorsLibraryBaseExport, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *MonitorsLibraryFolderExportAllOf) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []MonitorsLibraryBaseExport and assigns it to the Children field.
func (o *MonitorsLibraryFolderExportAllOf) SetChildren(v []MonitorsLibraryBaseExport) {
	o.Children = v
}

func (o MonitorsLibraryFolderExportAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorsLibraryFolderExportAllOf struct {
	value *MonitorsLibraryFolderExportAllOf
	isSet bool
}

func (v NullableMonitorsLibraryFolderExportAllOf) Get() *MonitorsLibraryFolderExportAllOf {
	return v.value
}

func (v *NullableMonitorsLibraryFolderExportAllOf) Set(val *MonitorsLibraryFolderExportAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorsLibraryFolderExportAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorsLibraryFolderExportAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorsLibraryFolderExportAllOf(val *MonitorsLibraryFolderExportAllOf) *NullableMonitorsLibraryFolderExportAllOf {
	return &NullableMonitorsLibraryFolderExportAllOf{value: val, isSet: true}
}

func (v NullableMonitorsLibraryFolderExportAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorsLibraryFolderExportAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


