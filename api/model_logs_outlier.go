/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LogsOutlier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsOutlier{}

// LogsOutlier The parameters extracted from the logs outlier query.
type LogsOutlier struct {
	// The query string after trimming out the outlier clause.
	TrimmedQuery *string `json:"trimmedQuery,omitempty"`
	// Sets the trailing number of data points to calculate mean and sigma.
	Window *int64 `json:"window,omitempty"`
	// Sets the required number of consecutive indicator data points (outliers) to trigger a violation.
	Consecutive *int64 `json:"consecutive,omitempty"`
	// Specifies which direction should trigger violations. Valid values:   1. `Both`: Both positive and negative deviations   2. `Up`: Positive deviations only   3. `Down`: Negative deviations only example: \"Up\" pattern: \"^(Both|Up|Down)$\" default: \"Both\" x-pattern-message: \"should be one of the following: 'Both', 'Up', 'Down'\"
	Direction *string `json:"direction,omitempty"`
	// Sets the number of standard deviations for calculating violations.
	Threshold *float64 `json:"threshold,omitempty"`
	// The name of the field that the trigger condition will alert on.
	Field *string `json:"field,omitempty"`
}

// NewLogsOutlier instantiates a new LogsOutlier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsOutlier() *LogsOutlier {
	this := LogsOutlier{}
	var window int64 = 10
	this.Window = &window
	var consecutive int64 = 1
	this.Consecutive = &consecutive
	var threshold float64 = 3.0
	this.Threshold = &threshold
	return &this
}

// NewLogsOutlierWithDefaults instantiates a new LogsOutlier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsOutlierWithDefaults() *LogsOutlier {
	this := LogsOutlier{}
	var window int64 = 10
	this.Window = &window
	var consecutive int64 = 1
	this.Consecutive = &consecutive
	var threshold float64 = 3.0
	this.Threshold = &threshold
	return &this
}

// GetTrimmedQuery returns the TrimmedQuery field value if set, zero value otherwise.
func (o *LogsOutlier) GetTrimmedQuery() string {
	if o == nil || IsNil(o.TrimmedQuery) {
		var ret string
		return ret
	}
	return *o.TrimmedQuery
}

// GetTrimmedQueryOk returns a tuple with the TrimmedQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlier) GetTrimmedQueryOk() (*string, bool) {
	if o == nil || IsNil(o.TrimmedQuery) {
		return nil, false
	}
	return o.TrimmedQuery, true
}

// HasTrimmedQuery returns a boolean if a field has been set.
func (o *LogsOutlier) HasTrimmedQuery() bool {
	if o != nil && !IsNil(o.TrimmedQuery) {
		return true
	}

	return false
}

// SetTrimmedQuery gets a reference to the given string and assigns it to the TrimmedQuery field.
func (o *LogsOutlier) SetTrimmedQuery(v string) {
	o.TrimmedQuery = &v
}

// GetWindow returns the Window field value if set, zero value otherwise.
func (o *LogsOutlier) GetWindow() int64 {
	if o == nil || IsNil(o.Window) {
		var ret int64
		return ret
	}
	return *o.Window
}

// GetWindowOk returns a tuple with the Window field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlier) GetWindowOk() (*int64, bool) {
	if o == nil || IsNil(o.Window) {
		return nil, false
	}
	return o.Window, true
}

// HasWindow returns a boolean if a field has been set.
func (o *LogsOutlier) HasWindow() bool {
	if o != nil && !IsNil(o.Window) {
		return true
	}

	return false
}

// SetWindow gets a reference to the given int64 and assigns it to the Window field.
func (o *LogsOutlier) SetWindow(v int64) {
	o.Window = &v
}

// GetConsecutive returns the Consecutive field value if set, zero value otherwise.
func (o *LogsOutlier) GetConsecutive() int64 {
	if o == nil || IsNil(o.Consecutive) {
		var ret int64
		return ret
	}
	return *o.Consecutive
}

// GetConsecutiveOk returns a tuple with the Consecutive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlier) GetConsecutiveOk() (*int64, bool) {
	if o == nil || IsNil(o.Consecutive) {
		return nil, false
	}
	return o.Consecutive, true
}

// HasConsecutive returns a boolean if a field has been set.
func (o *LogsOutlier) HasConsecutive() bool {
	if o != nil && !IsNil(o.Consecutive) {
		return true
	}

	return false
}

// SetConsecutive gets a reference to the given int64 and assigns it to the Consecutive field.
func (o *LogsOutlier) SetConsecutive(v int64) {
	o.Consecutive = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *LogsOutlier) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlier) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *LogsOutlier) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *LogsOutlier) SetDirection(v string) {
	o.Direction = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *LogsOutlier) GetThreshold() float64 {
	if o == nil || IsNil(o.Threshold) {
		var ret float64
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlier) GetThresholdOk() (*float64, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *LogsOutlier) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float64 and assigns it to the Threshold field.
func (o *LogsOutlier) SetThreshold(v float64) {
	o.Threshold = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *LogsOutlier) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogsOutlier) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *LogsOutlier) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *LogsOutlier) SetField(v string) {
	o.Field = &v
}

func (o LogsOutlier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsOutlier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrimmedQuery) {
		toSerialize["trimmedQuery"] = o.TrimmedQuery
	}
	if !IsNil(o.Window) {
		toSerialize["window"] = o.Window
	}
	if !IsNil(o.Consecutive) {
		toSerialize["consecutive"] = o.Consecutive
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	return toSerialize, nil
}

type NullableLogsOutlier struct {
	value *LogsOutlier
	isSet bool
}

func (v NullableLogsOutlier) Get() *LogsOutlier {
	return v.value
}

func (v *NullableLogsOutlier) Set(val *LogsOutlier) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsOutlier) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsOutlier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsOutlier(val *LogsOutlier) *NullableLogsOutlier {
	return &NullableLogsOutlier{value: val, isSet: true}
}

func (v NullableLogsOutlier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsOutlier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


