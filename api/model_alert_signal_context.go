/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlertSignalContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertSignalContext{}

// AlertSignalContext Details of the alert signal context.
type AlertSignalContext struct {
	SignalContext
	// Alert Identifier.
	AlertId string `json:"alertId"`
}

type _AlertSignalContext AlertSignalContext

// NewAlertSignalContext instantiates a new AlertSignalContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertSignalContext(alertId string, contextType string) *AlertSignalContext {
	this := AlertSignalContext{}
	this.ContextType = contextType
	this.AlertId = alertId
	return &this
}

// NewAlertSignalContextWithDefaults instantiates a new AlertSignalContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertSignalContextWithDefaults() *AlertSignalContext {
	this := AlertSignalContext{}
	return &this
}

// GetAlertId returns the AlertId field value
func (o *AlertSignalContext) GetAlertId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlertId
}

// GetAlertIdOk returns a tuple with the AlertId field value
// and a boolean to check if the value has been set.
func (o *AlertSignalContext) GetAlertIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertId, true
}

// SetAlertId sets field value
func (o *AlertSignalContext) SetAlertId(v string) {
	o.AlertId = v
}

func (o AlertSignalContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertSignalContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["alertId"] = o.AlertId
	return toSerialize, nil
}

func (o *AlertSignalContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"alertId",
		"contextType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertSignalContext := _AlertSignalContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertSignalContext)

	if err != nil {
		return err
	}

	*o = AlertSignalContext(varAlertSignalContext)

	return err
}

type NullableAlertSignalContext struct {
	value *AlertSignalContext
	isSet bool
}

func (v NullableAlertSignalContext) Get() *AlertSignalContext {
	return v.value
}

func (v *NullableAlertSignalContext) Set(val *AlertSignalContext) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertSignalContext) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertSignalContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertSignalContext(val *AlertSignalContext) *NullableAlertSignalContext {
	return &NullableAlertSignalContext{value: val, isSet: true}
}

func (v NullableAlertSignalContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertSignalContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


