/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// CreateUserDefinition struct for CreateUserDefinition
type CreateUserDefinition struct {
	// First name of the user.
	FirstName string `json:"firstName"`
	// Last name of the user.
	LastName string `json:"lastName"`
	// Email address of the user.
	Email string `json:"email"`
	// List of roleIds associated with the user.
	RoleIds []string `json:"roleIds"`
}

// NewCreateUserDefinition instantiates a new CreateUserDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserDefinition(firstName string, lastName string, email string, roleIds []string) *CreateUserDefinition {
	this := CreateUserDefinition{}
	this.FirstName = firstName
	this.LastName = lastName
	this.Email = email
	this.RoleIds = roleIds
	return &this
}

// NewCreateUserDefinitionWithDefaults instantiates a new CreateUserDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserDefinitionWithDefaults() *CreateUserDefinition {
	this := CreateUserDefinition{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *CreateUserDefinition) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *CreateUserDefinition) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *CreateUserDefinition) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *CreateUserDefinition) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *CreateUserDefinition) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *CreateUserDefinition) SetLastName(v string) {
	o.LastName = v
}

// GetEmail returns the Email field value
func (o *CreateUserDefinition) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateUserDefinition) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateUserDefinition) SetEmail(v string) {
	o.Email = v
}

// GetRoleIds returns the RoleIds field value
func (o *CreateUserDefinition) GetRoleIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value
// and a boolean to check if the value has been set.
func (o *CreateUserDefinition) GetRoleIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoleIds, true
}

// SetRoleIds sets field value
func (o *CreateUserDefinition) SetRoleIds(v []string) {
	o.RoleIds = v
}

func (o CreateUserDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["firstName"] = o.FirstName
	}
	if true {
		toSerialize["lastName"] = o.LastName
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["roleIds"] = o.RoleIds
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUserDefinition struct {
	value *CreateUserDefinition
	isSet bool
}

func (v NullableCreateUserDefinition) Get() *CreateUserDefinition {
	return v.value
}

func (v *NullableCreateUserDefinition) Set(val *CreateUserDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserDefinition(val *CreateUserDefinition) *NullableCreateUserDefinition {
	return &NullableCreateUserDefinition{value: val, isSet: true}
}

func (v NullableCreateUserDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


