/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KeyValuePair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyValuePair{}

// KeyValuePair struct for KeyValuePair
type KeyValuePair struct {
	// Name of the key.
	Key *string `json:"key,omitempty"`
	// Value of the key.
	Value *string `json:"value,omitempty"`
}

// NewKeyValuePair instantiates a new KeyValuePair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyValuePair() *KeyValuePair {
	this := KeyValuePair{}
	return &this
}

// NewKeyValuePairWithDefaults instantiates a new KeyValuePair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyValuePairWithDefaults() *KeyValuePair {
	this := KeyValuePair{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *KeyValuePair) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyValuePair) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *KeyValuePair) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *KeyValuePair) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *KeyValuePair) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyValuePair) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *KeyValuePair) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *KeyValuePair) SetValue(v string) {
	o.Value = &v
}

func (o KeyValuePair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyValuePair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableKeyValuePair struct {
	value *KeyValuePair
	isSet bool
}

func (v NullableKeyValuePair) Get() *KeyValuePair {
	return v.value
}

func (v *NullableKeyValuePair) Set(val *KeyValuePair) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyValuePair) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyValuePair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyValuePair(val *KeyValuePair) *NullableKeyValuePair {
	return &NullableKeyValuePair{value: val, isSet: true}
}

func (v NullableKeyValuePair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyValuePair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


