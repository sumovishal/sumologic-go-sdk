/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// OTCExporterErrorTracker struct for OTCExporterErrorTracker
type OTCExporterErrorTracker struct {
	// Event type.
	EventType *string `json:"eventType,omitempty"`
}

// NewOTCExporterErrorTracker instantiates a new OTCExporterErrorTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOTCExporterErrorTracker() *OTCExporterErrorTracker {
	this := OTCExporterErrorTracker{}
	return &this
}

// NewOTCExporterErrorTrackerWithDefaults instantiates a new OTCExporterErrorTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOTCExporterErrorTrackerWithDefaults() *OTCExporterErrorTracker {
	this := OTCExporterErrorTracker{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *OTCExporterErrorTracker) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCExporterErrorTracker) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *OTCExporterErrorTracker) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *OTCExporterErrorTracker) SetEventType(v string) {
	o.EventType = &v
}

func (o OTCExporterErrorTracker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	return json.Marshal(toSerialize)
}

type NullableOTCExporterErrorTracker struct {
	value *OTCExporterErrorTracker
	isSet bool
}

func (v NullableOTCExporterErrorTracker) Get() *OTCExporterErrorTracker {
	return v.value
}

func (v *NullableOTCExporterErrorTracker) Set(val *OTCExporterErrorTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableOTCExporterErrorTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableOTCExporterErrorTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOTCExporterErrorTracker(val *OTCExporterErrorTracker) *NullableOTCExporterErrorTracker {
	return &NullableOTCExporterErrorTracker{value: val, isSet: true}
}

func (v NullableOTCExporterErrorTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOTCExporterErrorTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


