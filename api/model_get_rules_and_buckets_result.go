/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// GetRulesAndBucketsResult struct for GetRulesAndBucketsResult
type GetRulesAndBucketsResult struct {
	// List of S3 data forwarding rules.
	Data []RuleAndBucketDetail `json:"data,omitempty"`
	// Next continuation token.
	NextToken *string `json:"nextToken,omitempty"`
}

// NewGetRulesAndBucketsResult instantiates a new GetRulesAndBucketsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRulesAndBucketsResult() *GetRulesAndBucketsResult {
	this := GetRulesAndBucketsResult{}
	return &this
}

// NewGetRulesAndBucketsResultWithDefaults instantiates a new GetRulesAndBucketsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRulesAndBucketsResultWithDefaults() *GetRulesAndBucketsResult {
	this := GetRulesAndBucketsResult{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetRulesAndBucketsResult) GetData() []RuleAndBucketDetail {
	if o == nil || o.Data == nil {
		var ret []RuleAndBucketDetail
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRulesAndBucketsResult) GetDataOk() ([]RuleAndBucketDetail, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetRulesAndBucketsResult) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []RuleAndBucketDetail and assigns it to the Data field.
func (o *GetRulesAndBucketsResult) SetData(v []RuleAndBucketDetail) {
	o.Data = v
}

// GetNextToken returns the NextToken field value if set, zero value otherwise.
func (o *GetRulesAndBucketsResult) GetNextToken() string {
	if o == nil || o.NextToken == nil {
		var ret string
		return ret
	}
	return *o.NextToken
}

// GetNextTokenOk returns a tuple with the NextToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRulesAndBucketsResult) GetNextTokenOk() (*string, bool) {
	if o == nil || o.NextToken == nil {
		return nil, false
	}
	return o.NextToken, true
}

// HasNextToken returns a boolean if a field has been set.
func (o *GetRulesAndBucketsResult) HasNextToken() bool {
	if o != nil && o.NextToken != nil {
		return true
	}

	return false
}

// SetNextToken gets a reference to the given string and assigns it to the NextToken field.
func (o *GetRulesAndBucketsResult) SetNextToken(v string) {
	o.NextToken = &v
}

func (o GetRulesAndBucketsResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.NextToken != nil {
		toSerialize["nextToken"] = o.NextToken
	}
	return json.Marshal(toSerialize)
}

type NullableGetRulesAndBucketsResult struct {
	value *GetRulesAndBucketsResult
	isSet bool
}

func (v NullableGetRulesAndBucketsResult) Get() *GetRulesAndBucketsResult {
	return v.value
}

func (v *NullableGetRulesAndBucketsResult) Set(val *GetRulesAndBucketsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRulesAndBucketsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRulesAndBucketsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRulesAndBucketsResult(val *GetRulesAndBucketsResult) *NullableGetRulesAndBucketsResult {
	return &NullableGetRulesAndBucketsResult{value: val, isSet: true}
}

func (v NullableGetRulesAndBucketsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRulesAndBucketsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


