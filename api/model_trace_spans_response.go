/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TraceSpansResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceSpansResponse{}

// TraceSpansResponse struct for TraceSpansResponse
type TraceSpansResponse struct {
	// List of trace spans.
	SpanPage []TraceSpan `json:"spanPage,omitempty"`
	// Total count of spans for this trace.
	TotalCount int64 `json:"totalCount"`
	// Next continuation token.
	Next *string `json:"next,omitempty"`
}

// NewTraceSpansResponse instantiates a new TraceSpansResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceSpansResponse(totalCount int64) *TraceSpansResponse {
	this := TraceSpansResponse{}
	this.TotalCount = totalCount
	return &this
}

// NewTraceSpansResponseWithDefaults instantiates a new TraceSpansResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceSpansResponseWithDefaults() *TraceSpansResponse {
	this := TraceSpansResponse{}
	return &this
}

// GetSpanPage returns the SpanPage field value if set, zero value otherwise.
func (o *TraceSpansResponse) GetSpanPage() []TraceSpan {
	if o == nil || IsNil(o.SpanPage) {
		var ret []TraceSpan
		return ret
	}
	return o.SpanPage
}

// GetSpanPageOk returns a tuple with the SpanPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSpansResponse) GetSpanPageOk() ([]TraceSpan, bool) {
	if o == nil || IsNil(o.SpanPage) {
		return nil, false
	}
	return o.SpanPage, true
}

// HasSpanPage returns a boolean if a field has been set.
func (o *TraceSpansResponse) HasSpanPage() bool {
	if o != nil && !IsNil(o.SpanPage) {
		return true
	}

	return false
}

// SetSpanPage gets a reference to the given []TraceSpan and assigns it to the SpanPage field.
func (o *TraceSpansResponse) SetSpanPage(v []TraceSpan) {
	o.SpanPage = v
}

// GetTotalCount returns the TotalCount field value
func (o *TraceSpansResponse) GetTotalCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *TraceSpansResponse) GetTotalCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *TraceSpansResponse) SetTotalCount(v int64) {
	o.TotalCount = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *TraceSpansResponse) GetNext() string {
	if o == nil || IsNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSpansResponse) GetNextOk() (*string, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *TraceSpansResponse) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *TraceSpansResponse) SetNext(v string) {
	o.Next = &v
}

func (o TraceSpansResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceSpansResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SpanPage) {
		toSerialize["spanPage"] = o.SpanPage
	}
	toSerialize["totalCount"] = o.TotalCount
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

type NullableTraceSpansResponse struct {
	value *TraceSpansResponse
	isSet bool
}

func (v NullableTraceSpansResponse) Get() *TraceSpansResponse {
	return v.value
}

func (v *NullableTraceSpansResponse) Set(val *TraceSpansResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceSpansResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceSpansResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceSpansResponse(val *TraceSpansResponse) *NullableTraceSpansResponse {
	return &NullableTraceSpansResponse{value: val, isSet: true}
}

func (v NullableTraceSpansResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceSpansResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


