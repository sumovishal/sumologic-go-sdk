/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the Email type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Email{}

// Email struct for Email
type Email struct {
	Action
	// A list of email addresses to send to when the rule fires.
	Recipients []string `json:"recipients"`
	// The subject line of the email.
	Subject string `json:"subject"`
	// The message body of the email to send.
	MessageBody *string `json:"messageBody,omitempty"`
	// Time zone for the email content. All dates/times will be displayed in this timeZone in the email payload. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
	TimeZone string `json:"timeZone"`
}

// NewEmail instantiates a new Email object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmail(recipients []string, subject string, timeZone string, connectionType string) *Email {
	this := Email{}
	this.ConnectionType = connectionType
	this.Recipients = recipients
	this.Subject = subject
	this.TimeZone = timeZone
	return &this
}

// NewEmailWithDefaults instantiates a new Email object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailWithDefaults() *Email {
	this := Email{}
	return &this
}

// GetRecipients returns the Recipients field value
func (o *Email) GetRecipients() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value
// and a boolean to check if the value has been set.
func (o *Email) GetRecipientsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recipients, true
}

// SetRecipients sets field value
func (o *Email) SetRecipients(v []string) {
	o.Recipients = v
}

// GetSubject returns the Subject field value
func (o *Email) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *Email) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *Email) SetSubject(v string) {
	o.Subject = v
}

// GetMessageBody returns the MessageBody field value if set, zero value otherwise.
func (o *Email) GetMessageBody() string {
	if o == nil || IsNil(o.MessageBody) {
		var ret string
		return ret
	}
	return *o.MessageBody
}

// GetMessageBodyOk returns a tuple with the MessageBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetMessageBodyOk() (*string, bool) {
	if o == nil || IsNil(o.MessageBody) {
		return nil, false
	}
	return o.MessageBody, true
}

// HasMessageBody returns a boolean if a field has been set.
func (o *Email) HasMessageBody() bool {
	if o != nil && !IsNil(o.MessageBody) {
		return true
	}

	return false
}

// SetMessageBody gets a reference to the given string and assigns it to the MessageBody field.
func (o *Email) SetMessageBody(v string) {
	o.MessageBody = &v
}

// GetTimeZone returns the TimeZone field value
func (o *Email) GetTimeZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value
// and a boolean to check if the value has been set.
func (o *Email) GetTimeZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeZone, true
}

// SetTimeZone sets field value
func (o *Email) SetTimeZone(v string) {
	o.TimeZone = v
}

func (o Email) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Email) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedAction, errAction := json.Marshal(o.Action)
	if errAction != nil {
		return map[string]interface{}{}, errAction
	}
	errAction = json.Unmarshal([]byte(serializedAction), &toSerialize)
	if errAction != nil {
		return map[string]interface{}{}, errAction
	}
	toSerialize["recipients"] = o.Recipients
	toSerialize["subject"] = o.Subject
	if !IsNil(o.MessageBody) {
		toSerialize["messageBody"] = o.MessageBody
	}
	toSerialize["timeZone"] = o.TimeZone
	return toSerialize, nil
}

type NullableEmail struct {
	value *Email
	isSet bool
}

func (v NullableEmail) Get() *Email {
	return v.value
}

func (v *NullableEmail) Set(val *Email) {
	v.value = val
	v.isSet = true
}

func (v NullableEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmail(val *Email) *NullableEmail {
	return &NullableEmail{value: val, isSet: true}
}

func (v NullableEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


