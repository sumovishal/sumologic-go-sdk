/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PaginatedOTCollectorsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedOTCollectorsResponse{}

// PaginatedOTCollectorsResponse struct for PaginatedOTCollectorsResponse
type PaginatedOTCollectorsResponse struct {
	// paginated list of OT Collectors.
	Data []OTCollector `json:"data"`
	// next page token.
	Next *string `json:"next,omitempty"`
	// count of otCollectors in response.
	Count *int32 `json:"count,omitempty"`
}

// NewPaginatedOTCollectorsResponse instantiates a new PaginatedOTCollectorsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedOTCollectorsResponse(data []OTCollector) *PaginatedOTCollectorsResponse {
	this := PaginatedOTCollectorsResponse{}
	this.Data = data
	return &this
}

// NewPaginatedOTCollectorsResponseWithDefaults instantiates a new PaginatedOTCollectorsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedOTCollectorsResponseWithDefaults() *PaginatedOTCollectorsResponse {
	this := PaginatedOTCollectorsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *PaginatedOTCollectorsResponse) GetData() []OTCollector {
	if o == nil {
		var ret []OTCollector
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PaginatedOTCollectorsResponse) GetDataOk() ([]OTCollector, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *PaginatedOTCollectorsResponse) SetData(v []OTCollector) {
	o.Data = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *PaginatedOTCollectorsResponse) GetNext() string {
	if o == nil || IsNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedOTCollectorsResponse) GetNextOk() (*string, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *PaginatedOTCollectorsResponse) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *PaginatedOTCollectorsResponse) SetNext(v string) {
	o.Next = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PaginatedOTCollectorsResponse) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedOTCollectorsResponse) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PaginatedOTCollectorsResponse) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *PaginatedOTCollectorsResponse) SetCount(v int32) {
	o.Count = &v
}

func (o PaginatedOTCollectorsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedOTCollectorsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullablePaginatedOTCollectorsResponse struct {
	value *PaginatedOTCollectorsResponse
	isSet bool
}

func (v NullablePaginatedOTCollectorsResponse) Get() *PaginatedOTCollectorsResponse {
	return v.value
}

func (v *NullablePaginatedOTCollectorsResponse) Set(val *PaginatedOTCollectorsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedOTCollectorsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedOTCollectorsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedOTCollectorsResponse(val *PaginatedOTCollectorsResponse) *NullablePaginatedOTCollectorsResponse {
	return &NullablePaginatedOTCollectorsResponse{value: val, isSet: true}
}

func (v NullablePaginatedOTCollectorsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedOTCollectorsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


