/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// AggregateOnTransformationAllOf struct for AggregateOnTransformationAllOf
type AggregateOnTransformationAllOf struct {
	// A list of dimensions that should be aggregated on.
	AggregateOn []string `json:"aggregateOn"`
}

// NewAggregateOnTransformationAllOf instantiates a new AggregateOnTransformationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregateOnTransformationAllOf(aggregateOn []string) *AggregateOnTransformationAllOf {
	this := AggregateOnTransformationAllOf{}
	this.AggregateOn = aggregateOn
	return &this
}

// NewAggregateOnTransformationAllOfWithDefaults instantiates a new AggregateOnTransformationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregateOnTransformationAllOfWithDefaults() *AggregateOnTransformationAllOf {
	this := AggregateOnTransformationAllOf{}
	return &this
}

// GetAggregateOn returns the AggregateOn field value
func (o *AggregateOnTransformationAllOf) GetAggregateOn() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AggregateOn
}

// GetAggregateOnOk returns a tuple with the AggregateOn field value
// and a boolean to check if the value has been set.
func (o *AggregateOnTransformationAllOf) GetAggregateOnOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AggregateOn, true
}

// SetAggregateOn sets field value
func (o *AggregateOnTransformationAllOf) SetAggregateOn(v []string) {
	o.AggregateOn = v
}

func (o AggregateOnTransformationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["aggregateOn"] = o.AggregateOn
	}
	return json.Marshal(toSerialize)
}

type NullableAggregateOnTransformationAllOf struct {
	value *AggregateOnTransformationAllOf
	isSet bool
}

func (v NullableAggregateOnTransformationAllOf) Get() *AggregateOnTransformationAllOf {
	return v.value
}

func (v *NullableAggregateOnTransformationAllOf) Set(val *AggregateOnTransformationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateOnTransformationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateOnTransformationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateOnTransformationAllOf(val *AggregateOnTransformationAllOf) *NullableAggregateOnTransformationAllOf {
	return &NullableAggregateOnTransformationAllOf{value: val, isSet: true}
}

func (v NullableAggregateOnTransformationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateOnTransformationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


