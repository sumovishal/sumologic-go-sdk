/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaginatedDashboards type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedDashboards{}

// PaginatedDashboards struct for PaginatedDashboards
type PaginatedDashboards struct {
	// List of dashboards.
	Dashboards []Dashboard `json:"dashboards"`
	// Next continuation token. `token` is set to null when no more pages are left.
	Next *string `json:"next,omitempty"`
}

type _PaginatedDashboards PaginatedDashboards

// NewPaginatedDashboards instantiates a new PaginatedDashboards object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedDashboards(dashboards []Dashboard) *PaginatedDashboards {
	this := PaginatedDashboards{}
	this.Dashboards = dashboards
	return &this
}

// NewPaginatedDashboardsWithDefaults instantiates a new PaginatedDashboards object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedDashboardsWithDefaults() *PaginatedDashboards {
	this := PaginatedDashboards{}
	return &this
}

// GetDashboards returns the Dashboards field value
func (o *PaginatedDashboards) GetDashboards() []Dashboard {
	if o == nil {
		var ret []Dashboard
		return ret
	}

	return o.Dashboards
}

// GetDashboardsOk returns a tuple with the Dashboards field value
// and a boolean to check if the value has been set.
func (o *PaginatedDashboards) GetDashboardsOk() ([]Dashboard, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dashboards, true
}

// SetDashboards sets field value
func (o *PaginatedDashboards) SetDashboards(v []Dashboard) {
	o.Dashboards = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *PaginatedDashboards) GetNext() string {
	if o == nil || IsNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedDashboards) GetNextOk() (*string, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *PaginatedDashboards) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *PaginatedDashboards) SetNext(v string) {
	o.Next = &v
}

func (o PaginatedDashboards) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedDashboards) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dashboards"] = o.Dashboards
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

func (o *PaginatedDashboards) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dashboards",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaginatedDashboards := _PaginatedDashboards{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaginatedDashboards)

	if err != nil {
		return err
	}

	*o = PaginatedDashboards(varPaginatedDashboards)

	return err
}

type NullablePaginatedDashboards struct {
	value *PaginatedDashboards
	isSet bool
}

func (v NullablePaginatedDashboards) Get() *PaginatedDashboards {
	return v.value
}

func (v *NullablePaginatedDashboards) Set(val *PaginatedDashboards) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedDashboards) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedDashboards) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedDashboards(val *PaginatedDashboards) *NullablePaginatedDashboards {
	return &NullablePaginatedDashboards{value: val, isSet: true}
}

func (v NullablePaginatedDashboards) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedDashboards) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


