/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the DashboardMigrationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardMigrationResult{}

// DashboardMigrationResult struct for DashboardMigrationResult
type DashboardMigrationResult struct {
	// A mapping of Legacy Dashboard Content Ids to migrated Dashboard(New) Content Ids. Only successful migration are shown here, see errors field for failed migrations and the failure reason. 
	Data map[string]string `json:"data"`
	// A mapping of Legacy Dashboard Content Ids to migrated Dashboard(New) info. Only successful migration are shown here, see errors field for failed migrations and the failure reason. 
	RichData *map[string]MigratedDashboardInfo `json:"richData,omitempty"`
	Status DashboardMigrationStatus `json:"status"`
	// A mapping of Legacy Dashboards Content Identifiers that failed validation to the failure reason(s).
	Errors *map[string][]ErrorDescription `json:"errors,omitempty"`
	// A mapping of Legacy Dashboards Content Identifiers to warnings.
	Warnings *map[string][]ErrorDescription `json:"warnings,omitempty"`
}

// NewDashboardMigrationResult instantiates a new DashboardMigrationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardMigrationResult(data map[string]string, status DashboardMigrationStatus) *DashboardMigrationResult {
	this := DashboardMigrationResult{}
	this.Data = data
	this.Status = status
	return &this
}

// NewDashboardMigrationResultWithDefaults instantiates a new DashboardMigrationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardMigrationResultWithDefaults() *DashboardMigrationResult {
	this := DashboardMigrationResult{}
	return &this
}

// GetData returns the Data field value
func (o *DashboardMigrationResult) GetData() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DashboardMigrationResult) GetDataOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DashboardMigrationResult) SetData(v map[string]string) {
	o.Data = v
}

// GetRichData returns the RichData field value if set, zero value otherwise.
func (o *DashboardMigrationResult) GetRichData() map[string]MigratedDashboardInfo {
	if o == nil || IsNil(o.RichData) {
		var ret map[string]MigratedDashboardInfo
		return ret
	}
	return *o.RichData
}

// GetRichDataOk returns a tuple with the RichData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardMigrationResult) GetRichDataOk() (*map[string]MigratedDashboardInfo, bool) {
	if o == nil || IsNil(o.RichData) {
		return nil, false
	}
	return o.RichData, true
}

// HasRichData returns a boolean if a field has been set.
func (o *DashboardMigrationResult) HasRichData() bool {
	if o != nil && !IsNil(o.RichData) {
		return true
	}

	return false
}

// SetRichData gets a reference to the given map[string]MigratedDashboardInfo and assigns it to the RichData field.
func (o *DashboardMigrationResult) SetRichData(v map[string]MigratedDashboardInfo) {
	o.RichData = &v
}

// GetStatus returns the Status field value
func (o *DashboardMigrationResult) GetStatus() DashboardMigrationStatus {
	if o == nil {
		var ret DashboardMigrationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DashboardMigrationResult) GetStatusOk() (*DashboardMigrationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DashboardMigrationResult) SetStatus(v DashboardMigrationStatus) {
	o.Status = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *DashboardMigrationResult) GetErrors() map[string][]ErrorDescription {
	if o == nil || IsNil(o.Errors) {
		var ret map[string][]ErrorDescription
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardMigrationResult) GetErrorsOk() (*map[string][]ErrorDescription, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *DashboardMigrationResult) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string][]ErrorDescription and assigns it to the Errors field.
func (o *DashboardMigrationResult) SetErrors(v map[string][]ErrorDescription) {
	o.Errors = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DashboardMigrationResult) GetWarnings() map[string][]ErrorDescription {
	if o == nil || IsNil(o.Warnings) {
		var ret map[string][]ErrorDescription
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardMigrationResult) GetWarningsOk() (*map[string][]ErrorDescription, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DashboardMigrationResult) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given map[string][]ErrorDescription and assigns it to the Warnings field.
func (o *DashboardMigrationResult) SetWarnings(v map[string][]ErrorDescription) {
	o.Warnings = &v
}

func (o DashboardMigrationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardMigrationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.RichData) {
		toSerialize["richData"] = o.RichData
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableDashboardMigrationResult struct {
	value *DashboardMigrationResult
	isSet bool
}

func (v NullableDashboardMigrationResult) Get() *DashboardMigrationResult {
	return v.value
}

func (v *NullableDashboardMigrationResult) Set(val *DashboardMigrationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardMigrationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardMigrationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardMigrationResult(val *DashboardMigrationResult) *NullableDashboardMigrationResult {
	return &NullableDashboardMigrationResult{value: val, isSet: true}
}

func (v NullableDashboardMigrationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardMigrationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


