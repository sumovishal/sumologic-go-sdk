/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SliQueryGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SliQueryGroup{}

// SliQueryGroup struct for SliQueryGroup
type SliQueryGroup struct {
	// Type of Query (successful/unsuccessful/total/threshold).
	QueryGroupType string `json:"queryGroupType"`
	// Group of queries to allow for query arithmetic.
	QueryGroup []SliQuery `json:"queryGroup"`
}

// NewSliQueryGroup instantiates a new SliQueryGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSliQueryGroup(queryGroupType string, queryGroup []SliQuery) *SliQueryGroup {
	this := SliQueryGroup{}
	this.QueryGroupType = queryGroupType
	this.QueryGroup = queryGroup
	return &this
}

// NewSliQueryGroupWithDefaults instantiates a new SliQueryGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSliQueryGroupWithDefaults() *SliQueryGroup {
	this := SliQueryGroup{}
	return &this
}

// GetQueryGroupType returns the QueryGroupType field value
func (o *SliQueryGroup) GetQueryGroupType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryGroupType
}

// GetQueryGroupTypeOk returns a tuple with the QueryGroupType field value
// and a boolean to check if the value has been set.
func (o *SliQueryGroup) GetQueryGroupTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryGroupType, true
}

// SetQueryGroupType sets field value
func (o *SliQueryGroup) SetQueryGroupType(v string) {
	o.QueryGroupType = v
}

// GetQueryGroup returns the QueryGroup field value
func (o *SliQueryGroup) GetQueryGroup() []SliQuery {
	if o == nil {
		var ret []SliQuery
		return ret
	}

	return o.QueryGroup
}

// GetQueryGroupOk returns a tuple with the QueryGroup field value
// and a boolean to check if the value has been set.
func (o *SliQueryGroup) GetQueryGroupOk() ([]SliQuery, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueryGroup, true
}

// SetQueryGroup sets field value
func (o *SliQueryGroup) SetQueryGroup(v []SliQuery) {
	o.QueryGroup = v
}

func (o SliQueryGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SliQueryGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queryGroupType"] = o.QueryGroupType
	toSerialize["queryGroup"] = o.QueryGroup
	return toSerialize, nil
}

type NullableSliQueryGroup struct {
	value *SliQueryGroup
	isSet bool
}

func (v NullableSliQueryGroup) Get() *SliQueryGroup {
	return v.value
}

func (v *NullableSliQueryGroup) Set(val *SliQueryGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableSliQueryGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableSliQueryGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSliQueryGroup(val *SliQueryGroup) *NullableSliQueryGroup {
	return &NullableSliQueryGroup{value: val, isSet: true}
}

func (v NullableSliQueryGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSliQueryGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


