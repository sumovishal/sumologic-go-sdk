/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// TracesFilter The filter for traces query.
type TracesFilter struct {
	// The type of the filter.
	Type string `json:"type"`
}

// NewTracesFilter instantiates a new TracesFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracesFilter(type_ string) *TracesFilter {
	this := TracesFilter{}
	this.Type = type_
	return &this
}

// NewTracesFilterWithDefaults instantiates a new TracesFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracesFilterWithDefaults() *TracesFilter {
	this := TracesFilter{}
	return &this
}

// GetType returns the Type field value
func (o *TracesFilter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TracesFilter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TracesFilter) SetType(v string) {
	o.Type = v
}

func (o TracesFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTracesFilter struct {
	value *TracesFilter
	isSet bool
}

func (v NullableTracesFilter) Get() *TracesFilter {
	return v.value
}

func (v *NullableTracesFilter) Set(val *TracesFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableTracesFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableTracesFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracesFilter(val *TracesFilter) *NullableTracesFilter {
	return &NullableTracesFilter{value: val, isSet: true}
}

func (v NullableTracesFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracesFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


