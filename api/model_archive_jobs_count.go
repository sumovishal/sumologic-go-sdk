/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// ArchiveJobsCount struct for ArchiveJobsCount
type ArchiveJobsCount struct {
	// Identifier for the archive source.
	SourceId string `json:"sourceId"`
	// The total number of archive jobs with pending status for the archive source.
	Pending int64 `json:"pending"`
	// The total number of archive jobs with scanning status for the archive source.
	Scanning int64 `json:"scanning"`
	// The total number of archive jobs with ingesting status for the archive source.
	Ingesting int64 `json:"ingesting"`
	// The total number of archive jobs with failed status for the archive source.
	Failed int64 `json:"failed"`
	// The total number of archive jobs with succeeded status for the archive source.
	Succeeded int64 `json:"succeeded"`
}

// NewArchiveJobsCount instantiates a new ArchiveJobsCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchiveJobsCount(sourceId string, pending int64, scanning int64, ingesting int64, failed int64, succeeded int64) *ArchiveJobsCount {
	this := ArchiveJobsCount{}
	this.SourceId = sourceId
	this.Pending = pending
	this.Scanning = scanning
	this.Ingesting = ingesting
	this.Failed = failed
	this.Succeeded = succeeded
	return &this
}

// NewArchiveJobsCountWithDefaults instantiates a new ArchiveJobsCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchiveJobsCountWithDefaults() *ArchiveJobsCount {
	this := ArchiveJobsCount{}
	return &this
}

// GetSourceId returns the SourceId field value
func (o *ArchiveJobsCount) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *ArchiveJobsCount) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *ArchiveJobsCount) SetSourceId(v string) {
	o.SourceId = v
}

// GetPending returns the Pending field value
func (o *ArchiveJobsCount) GetPending() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Pending
}

// GetPendingOk returns a tuple with the Pending field value
// and a boolean to check if the value has been set.
func (o *ArchiveJobsCount) GetPendingOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pending, true
}

// SetPending sets field value
func (o *ArchiveJobsCount) SetPending(v int64) {
	o.Pending = v
}

// GetScanning returns the Scanning field value
func (o *ArchiveJobsCount) GetScanning() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Scanning
}

// GetScanningOk returns a tuple with the Scanning field value
// and a boolean to check if the value has been set.
func (o *ArchiveJobsCount) GetScanningOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scanning, true
}

// SetScanning sets field value
func (o *ArchiveJobsCount) SetScanning(v int64) {
	o.Scanning = v
}

// GetIngesting returns the Ingesting field value
func (o *ArchiveJobsCount) GetIngesting() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Ingesting
}

// GetIngestingOk returns a tuple with the Ingesting field value
// and a boolean to check if the value has been set.
func (o *ArchiveJobsCount) GetIngestingOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ingesting, true
}

// SetIngesting sets field value
func (o *ArchiveJobsCount) SetIngesting(v int64) {
	o.Ingesting = v
}

// GetFailed returns the Failed field value
func (o *ArchiveJobsCount) GetFailed() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value
// and a boolean to check if the value has been set.
func (o *ArchiveJobsCount) GetFailedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Failed, true
}

// SetFailed sets field value
func (o *ArchiveJobsCount) SetFailed(v int64) {
	o.Failed = v
}

// GetSucceeded returns the Succeeded field value
func (o *ArchiveJobsCount) GetSucceeded() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Succeeded
}

// GetSucceededOk returns a tuple with the Succeeded field value
// and a boolean to check if the value has been set.
func (o *ArchiveJobsCount) GetSucceededOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Succeeded, true
}

// SetSucceeded sets field value
func (o *ArchiveJobsCount) SetSucceeded(v int64) {
	o.Succeeded = v
}

func (o ArchiveJobsCount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sourceId"] = o.SourceId
	}
	if true {
		toSerialize["pending"] = o.Pending
	}
	if true {
		toSerialize["scanning"] = o.Scanning
	}
	if true {
		toSerialize["ingesting"] = o.Ingesting
	}
	if true {
		toSerialize["failed"] = o.Failed
	}
	if true {
		toSerialize["succeeded"] = o.Succeeded
	}
	return json.Marshal(toSerialize)
}

type NullableArchiveJobsCount struct {
	value *ArchiveJobsCount
	isSet bool
}

func (v NullableArchiveJobsCount) Get() *ArchiveJobsCount {
	return v.value
}

func (v *NullableArchiveJobsCount) Set(val *ArchiveJobsCount) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveJobsCount) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveJobsCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveJobsCount(val *ArchiveJobsCount) *NullableArchiveJobsCount {
	return &NullableArchiveJobsCount{value: val, isSet: true}
}

func (v NullableArchiveJobsCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveJobsCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


