/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChartDataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChartDataRequest{}

// ChartDataRequest Request payload for monitor chart data visualization.
type ChartDataRequest struct {
	// The type of monitor. Valid values:   1. `Logs`: A logs query monitor.   2. `Metrics`: A metrics query monitor.
	MonitorType string `json:"monitorType" validate:"regexp=^(Logs|Metrics)$"`
	// All queries from the monitor.
	Queries []MonitorQuery `json:"queries"`
	// Defines the conditions of when to send notifications.
	Triggers []TriggerCondition `json:"triggers,omitempty"`
	TimeRange *ResolvableTimeRange `json:"timeRange,omitempty"`
}

type _ChartDataRequest ChartDataRequest

// NewChartDataRequest instantiates a new ChartDataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartDataRequest(monitorType string, queries []MonitorQuery) *ChartDataRequest {
	this := ChartDataRequest{}
	this.MonitorType = monitorType
	this.Queries = queries
	return &this
}

// NewChartDataRequestWithDefaults instantiates a new ChartDataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartDataRequestWithDefaults() *ChartDataRequest {
	this := ChartDataRequest{}
	return &this
}

// GetMonitorType returns the MonitorType field value
func (o *ChartDataRequest) GetMonitorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MonitorType
}

// GetMonitorTypeOk returns a tuple with the MonitorType field value
// and a boolean to check if the value has been set.
func (o *ChartDataRequest) GetMonitorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MonitorType, true
}

// SetMonitorType sets field value
func (o *ChartDataRequest) SetMonitorType(v string) {
	o.MonitorType = v
}

// GetQueries returns the Queries field value
func (o *ChartDataRequest) GetQueries() []MonitorQuery {
	if o == nil {
		var ret []MonitorQuery
		return ret
	}

	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value
// and a boolean to check if the value has been set.
func (o *ChartDataRequest) GetQueriesOk() ([]MonitorQuery, bool) {
	if o == nil {
		return nil, false
	}
	return o.Queries, true
}

// SetQueries sets field value
func (o *ChartDataRequest) SetQueries(v []MonitorQuery) {
	o.Queries = v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *ChartDataRequest) GetTriggers() []TriggerCondition {
	if o == nil || IsNil(o.Triggers) {
		var ret []TriggerCondition
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartDataRequest) GetTriggersOk() ([]TriggerCondition, bool) {
	if o == nil || IsNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *ChartDataRequest) HasTriggers() bool {
	if o != nil && !IsNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []TriggerCondition and assigns it to the Triggers field.
func (o *ChartDataRequest) SetTriggers(v []TriggerCondition) {
	o.Triggers = v
}

// GetTimeRange returns the TimeRange field value if set, zero value otherwise.
func (o *ChartDataRequest) GetTimeRange() ResolvableTimeRange {
	if o == nil || IsNil(o.TimeRange) {
		var ret ResolvableTimeRange
		return ret
	}
	return *o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartDataRequest) GetTimeRangeOk() (*ResolvableTimeRange, bool) {
	if o == nil || IsNil(o.TimeRange) {
		return nil, false
	}
	return o.TimeRange, true
}

// HasTimeRange returns a boolean if a field has been set.
func (o *ChartDataRequest) HasTimeRange() bool {
	if o != nil && !IsNil(o.TimeRange) {
		return true
	}

	return false
}

// SetTimeRange gets a reference to the given ResolvableTimeRange and assigns it to the TimeRange field.
func (o *ChartDataRequest) SetTimeRange(v ResolvableTimeRange) {
	o.TimeRange = &v
}

func (o ChartDataRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChartDataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["monitorType"] = o.MonitorType
	toSerialize["queries"] = o.Queries
	if !IsNil(o.Triggers) {
		toSerialize["triggers"] = o.Triggers
	}
	if !IsNil(o.TimeRange) {
		toSerialize["timeRange"] = o.TimeRange
	}
	return toSerialize, nil
}

func (o *ChartDataRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"monitorType",
		"queries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChartDataRequest := _ChartDataRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChartDataRequest)

	if err != nil {
		return err
	}

	*o = ChartDataRequest(varChartDataRequest)

	return err
}

type NullableChartDataRequest struct {
	value *ChartDataRequest
	isSet bool
}

func (v NullableChartDataRequest) Get() *ChartDataRequest {
	return v.value
}

func (v *NullableChartDataRequest) Set(val *ChartDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChartDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChartDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartDataRequest(val *ChartDataRequest) *NullableChartDataRequest {
	return &NullableChartDataRequest{value: val, isSet: true}
}

func (v NullableChartDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


