/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// CSEWindowsExcessiveFilesPendingUploadTracker struct for CSEWindowsExcessiveFilesPendingUploadTracker
type CSEWindowsExcessiveFilesPendingUploadTracker struct {
	TrackerIdentity
	// Event type.
	EventType *string `json:"eventType,omitempty"`
	// The sensor ID.
	SensorId *string `json:"sensorId,omitempty"`
	// The sensor's hostname.
	SensorHostname *string `json:"sensorHostname,omitempty"`
	// The HostName + EventLog name for EventLogs and Domain name for Directory.
	Source *string `json:"source,omitempty"`
	// The last error message.
	LastErrorMessage *string `json:"lastErrorMessage,omitempty"`
	// The number of files pending upload.
	NumberOfFilesPending *string `json:"numberOfFilesPending,omitempty"`
	// The oldest timestamp in the queue.
	OldestTimestampInQueue *string `json:"oldestTimestampInQueue,omitempty"`
}

// NewCSEWindowsExcessiveFilesPendingUploadTracker instantiates a new CSEWindowsExcessiveFilesPendingUploadTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSEWindowsExcessiveFilesPendingUploadTracker(trackerId string, error_ string, description string) *CSEWindowsExcessiveFilesPendingUploadTracker {
	this := CSEWindowsExcessiveFilesPendingUploadTracker{}
	this.TrackerId = trackerId
	this.Error = error_
	this.Description = description
	return &this
}

// NewCSEWindowsExcessiveFilesPendingUploadTrackerWithDefaults instantiates a new CSEWindowsExcessiveFilesPendingUploadTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSEWindowsExcessiveFilesPendingUploadTrackerWithDefaults() *CSEWindowsExcessiveFilesPendingUploadTracker {
	this := CSEWindowsExcessiveFilesPendingUploadTracker{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) SetEventType(v string) {
	o.EventType = &v
}

// GetSensorId returns the SensorId field value if set, zero value otherwise.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetSensorId() string {
	if o == nil || o.SensorId == nil {
		var ret string
		return ret
	}
	return *o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetSensorIdOk() (*string, bool) {
	if o == nil || o.SensorId == nil {
		return nil, false
	}
	return o.SensorId, true
}

// HasSensorId returns a boolean if a field has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) HasSensorId() bool {
	if o != nil && o.SensorId != nil {
		return true
	}

	return false
}

// SetSensorId gets a reference to the given string and assigns it to the SensorId field.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) SetSensorId(v string) {
	o.SensorId = &v
}

// GetSensorHostname returns the SensorHostname field value if set, zero value otherwise.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetSensorHostname() string {
	if o == nil || o.SensorHostname == nil {
		var ret string
		return ret
	}
	return *o.SensorHostname
}

// GetSensorHostnameOk returns a tuple with the SensorHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetSensorHostnameOk() (*string, bool) {
	if o == nil || o.SensorHostname == nil {
		return nil, false
	}
	return o.SensorHostname, true
}

// HasSensorHostname returns a boolean if a field has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) HasSensorHostname() bool {
	if o != nil && o.SensorHostname != nil {
		return true
	}

	return false
}

// SetSensorHostname gets a reference to the given string and assigns it to the SensorHostname field.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) SetSensorHostname(v string) {
	o.SensorHostname = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) SetSource(v string) {
	o.Source = &v
}

// GetLastErrorMessage returns the LastErrorMessage field value if set, zero value otherwise.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetLastErrorMessage() string {
	if o == nil || o.LastErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.LastErrorMessage
}

// GetLastErrorMessageOk returns a tuple with the LastErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetLastErrorMessageOk() (*string, bool) {
	if o == nil || o.LastErrorMessage == nil {
		return nil, false
	}
	return o.LastErrorMessage, true
}

// HasLastErrorMessage returns a boolean if a field has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) HasLastErrorMessage() bool {
	if o != nil && o.LastErrorMessage != nil {
		return true
	}

	return false
}

// SetLastErrorMessage gets a reference to the given string and assigns it to the LastErrorMessage field.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) SetLastErrorMessage(v string) {
	o.LastErrorMessage = &v
}

// GetNumberOfFilesPending returns the NumberOfFilesPending field value if set, zero value otherwise.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetNumberOfFilesPending() string {
	if o == nil || o.NumberOfFilesPending == nil {
		var ret string
		return ret
	}
	return *o.NumberOfFilesPending
}

// GetNumberOfFilesPendingOk returns a tuple with the NumberOfFilesPending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetNumberOfFilesPendingOk() (*string, bool) {
	if o == nil || o.NumberOfFilesPending == nil {
		return nil, false
	}
	return o.NumberOfFilesPending, true
}

// HasNumberOfFilesPending returns a boolean if a field has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) HasNumberOfFilesPending() bool {
	if o != nil && o.NumberOfFilesPending != nil {
		return true
	}

	return false
}

// SetNumberOfFilesPending gets a reference to the given string and assigns it to the NumberOfFilesPending field.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) SetNumberOfFilesPending(v string) {
	o.NumberOfFilesPending = &v
}

// GetOldestTimestampInQueue returns the OldestTimestampInQueue field value if set, zero value otherwise.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetOldestTimestampInQueue() string {
	if o == nil || o.OldestTimestampInQueue == nil {
		var ret string
		return ret
	}
	return *o.OldestTimestampInQueue
}

// GetOldestTimestampInQueueOk returns a tuple with the OldestTimestampInQueue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) GetOldestTimestampInQueueOk() (*string, bool) {
	if o == nil || o.OldestTimestampInQueue == nil {
		return nil, false
	}
	return o.OldestTimestampInQueue, true
}

// HasOldestTimestampInQueue returns a boolean if a field has been set.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) HasOldestTimestampInQueue() bool {
	if o != nil && o.OldestTimestampInQueue != nil {
		return true
	}

	return false
}

// SetOldestTimestampInQueue gets a reference to the given string and assigns it to the OldestTimestampInQueue field.
func (o *CSEWindowsExcessiveFilesPendingUploadTracker) SetOldestTimestampInQueue(v string) {
	o.OldestTimestampInQueue = &v
}

func (o CSEWindowsExcessiveFilesPendingUploadTracker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTrackerIdentity, errTrackerIdentity := json.Marshal(o.TrackerIdentity)
	if errTrackerIdentity != nil {
		return []byte{}, errTrackerIdentity
	}
	errTrackerIdentity = json.Unmarshal([]byte(serializedTrackerIdentity), &toSerialize)
	if errTrackerIdentity != nil {
		return []byte{}, errTrackerIdentity
	}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if o.SensorId != nil {
		toSerialize["sensorId"] = o.SensorId
	}
	if o.SensorHostname != nil {
		toSerialize["sensorHostname"] = o.SensorHostname
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.LastErrorMessage != nil {
		toSerialize["lastErrorMessage"] = o.LastErrorMessage
	}
	if o.NumberOfFilesPending != nil {
		toSerialize["numberOfFilesPending"] = o.NumberOfFilesPending
	}
	if o.OldestTimestampInQueue != nil {
		toSerialize["oldestTimestampInQueue"] = o.OldestTimestampInQueue
	}
	return json.Marshal(toSerialize)
}

type NullableCSEWindowsExcessiveFilesPendingUploadTracker struct {
	value *CSEWindowsExcessiveFilesPendingUploadTracker
	isSet bool
}

func (v NullableCSEWindowsExcessiveFilesPendingUploadTracker) Get() *CSEWindowsExcessiveFilesPendingUploadTracker {
	return v.value
}

func (v *NullableCSEWindowsExcessiveFilesPendingUploadTracker) Set(val *CSEWindowsExcessiveFilesPendingUploadTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableCSEWindowsExcessiveFilesPendingUploadTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableCSEWindowsExcessiveFilesPendingUploadTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSEWindowsExcessiveFilesPendingUploadTracker(val *CSEWindowsExcessiveFilesPendingUploadTracker) *NullableCSEWindowsExcessiveFilesPendingUploadTracker {
	return &NullableCSEWindowsExcessiveFilesPendingUploadTracker{value: val, isSet: true}
}

func (v NullableCSEWindowsExcessiveFilesPendingUploadTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSEWindowsExcessiveFilesPendingUploadTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


