/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContentPermissionUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentPermissionUpdateRequest{}

// ContentPermissionUpdateRequest struct for ContentPermissionUpdateRequest
type ContentPermissionUpdateRequest struct {
	// Content permissions to be updated.
	ContentPermissionAssignments []ContentPermissionAssignment `json:"contentPermissionAssignments"`
	// Set this to \"true\" to notify the users who had a permission update.
	NotifyRecipients bool `json:"notifyRecipients"`
	// The notification message sent to the users who had a permission update.
	NotificationMessage string `json:"notificationMessage"`
}

// NewContentPermissionUpdateRequest instantiates a new ContentPermissionUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentPermissionUpdateRequest(contentPermissionAssignments []ContentPermissionAssignment, notifyRecipients bool, notificationMessage string) *ContentPermissionUpdateRequest {
	this := ContentPermissionUpdateRequest{}
	this.ContentPermissionAssignments = contentPermissionAssignments
	this.NotifyRecipients = notifyRecipients
	this.NotificationMessage = notificationMessage
	return &this
}

// NewContentPermissionUpdateRequestWithDefaults instantiates a new ContentPermissionUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentPermissionUpdateRequestWithDefaults() *ContentPermissionUpdateRequest {
	this := ContentPermissionUpdateRequest{}
	return &this
}

// GetContentPermissionAssignments returns the ContentPermissionAssignments field value
func (o *ContentPermissionUpdateRequest) GetContentPermissionAssignments() []ContentPermissionAssignment {
	if o == nil {
		var ret []ContentPermissionAssignment
		return ret
	}

	return o.ContentPermissionAssignments
}

// GetContentPermissionAssignmentsOk returns a tuple with the ContentPermissionAssignments field value
// and a boolean to check if the value has been set.
func (o *ContentPermissionUpdateRequest) GetContentPermissionAssignmentsOk() ([]ContentPermissionAssignment, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentPermissionAssignments, true
}

// SetContentPermissionAssignments sets field value
func (o *ContentPermissionUpdateRequest) SetContentPermissionAssignments(v []ContentPermissionAssignment) {
	o.ContentPermissionAssignments = v
}

// GetNotifyRecipients returns the NotifyRecipients field value
func (o *ContentPermissionUpdateRequest) GetNotifyRecipients() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NotifyRecipients
}

// GetNotifyRecipientsOk returns a tuple with the NotifyRecipients field value
// and a boolean to check if the value has been set.
func (o *ContentPermissionUpdateRequest) GetNotifyRecipientsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyRecipients, true
}

// SetNotifyRecipients sets field value
func (o *ContentPermissionUpdateRequest) SetNotifyRecipients(v bool) {
	o.NotifyRecipients = v
}

// GetNotificationMessage returns the NotificationMessage field value
func (o *ContentPermissionUpdateRequest) GetNotificationMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationMessage
}

// GetNotificationMessageOk returns a tuple with the NotificationMessage field value
// and a boolean to check if the value has been set.
func (o *ContentPermissionUpdateRequest) GetNotificationMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationMessage, true
}

// SetNotificationMessage sets field value
func (o *ContentPermissionUpdateRequest) SetNotificationMessage(v string) {
	o.NotificationMessage = v
}

func (o ContentPermissionUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentPermissionUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contentPermissionAssignments"] = o.ContentPermissionAssignments
	toSerialize["notifyRecipients"] = o.NotifyRecipients
	toSerialize["notificationMessage"] = o.NotificationMessage
	return toSerialize, nil
}

type NullableContentPermissionUpdateRequest struct {
	value *ContentPermissionUpdateRequest
	isSet bool
}

func (v NullableContentPermissionUpdateRequest) Get() *ContentPermissionUpdateRequest {
	return v.value
}

func (v *NullableContentPermissionUpdateRequest) Set(val *ContentPermissionUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableContentPermissionUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableContentPermissionUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentPermissionUpdateRequest(val *ContentPermissionUpdateRequest) *NullableContentPermissionUpdateRequest {
	return &NullableContentPermissionUpdateRequest{value: val, isSet: true}
}

func (v NullableContentPermissionUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentPermissionUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


