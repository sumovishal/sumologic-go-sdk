/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SignalsJobResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignalsJobResult{}

// SignalsJobResult The job result containing the job status, computed signals and any warnings.
type SignalsJobResult struct {
	// Whether the signal computing job finished.
	IsComplete bool `json:"isComplete"`
	// Sequence of computed signals.
	Signals []SignalsResponse `json:"signals"`
	// List of warnings while computing signals.
	Warnings []WarningDetails `json:"warnings"`
}

// NewSignalsJobResult instantiates a new SignalsJobResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalsJobResult(isComplete bool, signals []SignalsResponse, warnings []WarningDetails) *SignalsJobResult {
	this := SignalsJobResult{}
	this.IsComplete = isComplete
	this.Signals = signals
	this.Warnings = warnings
	return &this
}

// NewSignalsJobResultWithDefaults instantiates a new SignalsJobResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalsJobResultWithDefaults() *SignalsJobResult {
	this := SignalsJobResult{}
	return &this
}

// GetIsComplete returns the IsComplete field value
func (o *SignalsJobResult) GetIsComplete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsComplete
}

// GetIsCompleteOk returns a tuple with the IsComplete field value
// and a boolean to check if the value has been set.
func (o *SignalsJobResult) GetIsCompleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsComplete, true
}

// SetIsComplete sets field value
func (o *SignalsJobResult) SetIsComplete(v bool) {
	o.IsComplete = v
}

// GetSignals returns the Signals field value
func (o *SignalsJobResult) GetSignals() []SignalsResponse {
	if o == nil {
		var ret []SignalsResponse
		return ret
	}

	return o.Signals
}

// GetSignalsOk returns a tuple with the Signals field value
// and a boolean to check if the value has been set.
func (o *SignalsJobResult) GetSignalsOk() ([]SignalsResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signals, true
}

// SetSignals sets field value
func (o *SignalsJobResult) SetSignals(v []SignalsResponse) {
	o.Signals = v
}

// GetWarnings returns the Warnings field value
func (o *SignalsJobResult) GetWarnings() []WarningDetails {
	if o == nil {
		var ret []WarningDetails
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *SignalsJobResult) GetWarningsOk() ([]WarningDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.Warnings, true
}

// SetWarnings sets field value
func (o *SignalsJobResult) SetWarnings(v []WarningDetails) {
	o.Warnings = v
}

func (o SignalsJobResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignalsJobResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isComplete"] = o.IsComplete
	toSerialize["signals"] = o.Signals
	toSerialize["warnings"] = o.Warnings
	return toSerialize, nil
}

type NullableSignalsJobResult struct {
	value *SignalsJobResult
	isSet bool
}

func (v NullableSignalsJobResult) Get() *SignalsJobResult {
	return v.value
}

func (v *NullableSignalsJobResult) Set(val *SignalsJobResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalsJobResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalsJobResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalsJobResult(val *SignalsJobResult) *NullableSignalsJobResult {
	return &NullableSignalsJobResult{value: val, isSet: true}
}

func (v NullableSignalsJobResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalsJobResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


