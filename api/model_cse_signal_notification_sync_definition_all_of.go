/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CseSignalNotificationSyncDefinitionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CseSignalNotificationSyncDefinitionAllOf{}

// CseSignalNotificationSyncDefinitionAllOf struct for CseSignalNotificationSyncDefinitionAllOf
type CseSignalNotificationSyncDefinitionAllOf struct {
	// Name of the Cloud SIEM Enterprise Record to be created.
	RecordType string `json:"recordType"`
}

// NewCseSignalNotificationSyncDefinitionAllOf instantiates a new CseSignalNotificationSyncDefinitionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCseSignalNotificationSyncDefinitionAllOf(recordType string) *CseSignalNotificationSyncDefinitionAllOf {
	this := CseSignalNotificationSyncDefinitionAllOf{}
	this.RecordType = recordType
	return &this
}

// NewCseSignalNotificationSyncDefinitionAllOfWithDefaults instantiates a new CseSignalNotificationSyncDefinitionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCseSignalNotificationSyncDefinitionAllOfWithDefaults() *CseSignalNotificationSyncDefinitionAllOf {
	this := CseSignalNotificationSyncDefinitionAllOf{}
	return &this
}

// GetRecordType returns the RecordType field value
func (o *CseSignalNotificationSyncDefinitionAllOf) GetRecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *CseSignalNotificationSyncDefinitionAllOf) GetRecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *CseSignalNotificationSyncDefinitionAllOf) SetRecordType(v string) {
	o.RecordType = v
}

func (o CseSignalNotificationSyncDefinitionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CseSignalNotificationSyncDefinitionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recordType"] = o.RecordType
	return toSerialize, nil
}

type NullableCseSignalNotificationSyncDefinitionAllOf struct {
	value *CseSignalNotificationSyncDefinitionAllOf
	isSet bool
}

func (v NullableCseSignalNotificationSyncDefinitionAllOf) Get() *CseSignalNotificationSyncDefinitionAllOf {
	return v.value
}

func (v *NullableCseSignalNotificationSyncDefinitionAllOf) Set(val *CseSignalNotificationSyncDefinitionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCseSignalNotificationSyncDefinitionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCseSignalNotificationSyncDefinitionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCseSignalNotificationSyncDefinitionAllOf(val *CseSignalNotificationSyncDefinitionAllOf) *NullableCseSignalNotificationSyncDefinitionAllOf {
	return &NullableCseSignalNotificationSyncDefinitionAllOf{value: val, isSet: true}
}

func (v NullableCseSignalNotificationSyncDefinitionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCseSignalNotificationSyncDefinitionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


