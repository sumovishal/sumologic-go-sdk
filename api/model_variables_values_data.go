/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VariablesValuesData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariablesValuesData{}

// VariablesValuesData struct for VariablesValuesData
type VariablesValuesData struct {
	// Data for variable values.
	Data map[string][]string `json:"data"`
	// A rich form of data for the variable search, including variable values, status and variable type. This field is different from `data` in that it includes an object instead of list as the value in the map. The `data` field is kept for backwards compatibility, please use `richData` for all usages going forward.
	RichData *map[string]VariableValuesData `json:"richData,omitempty"`
}

type _VariablesValuesData VariablesValuesData

// NewVariablesValuesData instantiates a new VariablesValuesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariablesValuesData(data map[string][]string) *VariablesValuesData {
	this := VariablesValuesData{}
	this.Data = data
	return &this
}

// NewVariablesValuesDataWithDefaults instantiates a new VariablesValuesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariablesValuesDataWithDefaults() *VariablesValuesData {
	this := VariablesValuesData{}
	return &this
}

// GetData returns the Data field value
func (o *VariablesValuesData) GetData() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *VariablesValuesData) GetDataOk() (*map[string][]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *VariablesValuesData) SetData(v map[string][]string) {
	o.Data = v
}

// GetRichData returns the RichData field value if set, zero value otherwise.
func (o *VariablesValuesData) GetRichData() map[string]VariableValuesData {
	if o == nil || IsNil(o.RichData) {
		var ret map[string]VariableValuesData
		return ret
	}
	return *o.RichData
}

// GetRichDataOk returns a tuple with the RichData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariablesValuesData) GetRichDataOk() (*map[string]VariableValuesData, bool) {
	if o == nil || IsNil(o.RichData) {
		return nil, false
	}
	return o.RichData, true
}

// HasRichData returns a boolean if a field has been set.
func (o *VariablesValuesData) HasRichData() bool {
	if o != nil && !IsNil(o.RichData) {
		return true
	}

	return false
}

// SetRichData gets a reference to the given map[string]VariableValuesData and assigns it to the RichData field.
func (o *VariablesValuesData) SetRichData(v map[string]VariableValuesData) {
	o.RichData = &v
}

func (o VariablesValuesData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariablesValuesData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.RichData) {
		toSerialize["richData"] = o.RichData
	}
	return toSerialize, nil
}

func (o *VariablesValuesData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVariablesValuesData := _VariablesValuesData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVariablesValuesData)

	if err != nil {
		return err
	}

	*o = VariablesValuesData(varVariablesValuesData)

	return err
}

type NullableVariablesValuesData struct {
	value *VariablesValuesData
	isSet bool
}

func (v NullableVariablesValuesData) Get() *VariablesValuesData {
	return v.value
}

func (v *NullableVariablesValuesData) Set(val *VariablesValuesData) {
	v.value = val
	v.isSet = true
}

func (v NullableVariablesValuesData) IsSet() bool {
	return v.isSet
}

func (v *NullableVariablesValuesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariablesValuesData(val *VariablesValuesData) *NullableVariablesValuesData {
	return &NullableVariablesValuesData{value: val, isSet: true}
}

func (v NullableVariablesValuesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariablesValuesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


