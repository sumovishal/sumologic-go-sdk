/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the UsageReportResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageReportResponse{}

// UsageReportResponse Export Usage response containing the jobId
type UsageReportResponse struct {
	// Job Id for export
	JobId *string `json:"jobId,omitempty"`
}

// NewUsageReportResponse instantiates a new UsageReportResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageReportResponse() *UsageReportResponse {
	this := UsageReportResponse{}
	return &this
}

// NewUsageReportResponseWithDefaults instantiates a new UsageReportResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageReportResponseWithDefaults() *UsageReportResponse {
	this := UsageReportResponse{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *UsageReportResponse) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageReportResponse) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *UsageReportResponse) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *UsageReportResponse) SetJobId(v string) {
	o.JobId = &v
}

func (o UsageReportResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageReportResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	return toSerialize, nil
}

type NullableUsageReportResponse struct {
	value *UsageReportResponse
	isSet bool
}

func (v NullableUsageReportResponse) Get() *UsageReportResponse {
	return v.value
}

func (v *NullableUsageReportResponse) Set(val *UsageReportResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageReportResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageReportResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageReportResponse(val *UsageReportResponse) *NullableUsageReportResponse {
	return &NullableUsageReportResponse{value: val, isSet: true}
}

func (v NullableUsageReportResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageReportResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


