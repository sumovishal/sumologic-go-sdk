/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AggregationQueryResultResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregationQueryResultResponse{}

// AggregationQueryResultResponse struct for AggregationQueryResultResponse
type AggregationQueryResultResponse struct {
	// A list of an aggregation query results on a per bucket basis.  Each bucket result corresponds to the number of trace query results falling into the bucket.
	Buckets []AggregationQueryBucketResult `json:"buckets"`
}

type _AggregationQueryResultResponse AggregationQueryResultResponse

// NewAggregationQueryResultResponse instantiates a new AggregationQueryResultResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregationQueryResultResponse(buckets []AggregationQueryBucketResult) *AggregationQueryResultResponse {
	this := AggregationQueryResultResponse{}
	this.Buckets = buckets
	return &this
}

// NewAggregationQueryResultResponseWithDefaults instantiates a new AggregationQueryResultResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregationQueryResultResponseWithDefaults() *AggregationQueryResultResponse {
	this := AggregationQueryResultResponse{}
	return &this
}

// GetBuckets returns the Buckets field value
func (o *AggregationQueryResultResponse) GetBuckets() []AggregationQueryBucketResult {
	if o == nil {
		var ret []AggregationQueryBucketResult
		return ret
	}

	return o.Buckets
}

// GetBucketsOk returns a tuple with the Buckets field value
// and a boolean to check if the value has been set.
func (o *AggregationQueryResultResponse) GetBucketsOk() ([]AggregationQueryBucketResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Buckets, true
}

// SetBuckets sets field value
func (o *AggregationQueryResultResponse) SetBuckets(v []AggregationQueryBucketResult) {
	o.Buckets = v
}

func (o AggregationQueryResultResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregationQueryResultResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["buckets"] = o.Buckets
	return toSerialize, nil
}

func (o *AggregationQueryResultResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"buckets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAggregationQueryResultResponse := _AggregationQueryResultResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAggregationQueryResultResponse)

	if err != nil {
		return err
	}

	*o = AggregationQueryResultResponse(varAggregationQueryResultResponse)

	return err
}

type NullableAggregationQueryResultResponse struct {
	value *AggregationQueryResultResponse
	isSet bool
}

func (v NullableAggregationQueryResultResponse) Get() *AggregationQueryResultResponse {
	return v.value
}

func (v *NullableAggregationQueryResultResponse) Set(val *AggregationQueryResultResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationQueryResultResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationQueryResultResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationQueryResultResponse(val *AggregationQueryResultResponse) *NullableAggregationQueryResultResponse {
	return &NullableAggregationQueryResultResponse{value: val, isSet: true}
}

func (v NullableAggregationQueryResultResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationQueryResultResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


