/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OTCErrorProcessingSpansTrackerAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OTCErrorProcessingSpansTrackerAllOf{}

// OTCErrorProcessingSpansTrackerAllOf struct for OTCErrorProcessingSpansTrackerAllOf
type OTCErrorProcessingSpansTrackerAllOf struct {
	// The collector instance ID, e.g. `974b444b-4b45-4f32-aa03-1dbf2a16826d`.
	InstanceId *string `json:"instanceId,omitempty"`
	// The collector instance address, e.g. `172.16.1.14`.
	InstanceAddress *string `json:"instanceAddress,omitempty"`
	// The collector processor ID, e.g. `cascading_filter`.
	ProcessorId *string `json:"processorId,omitempty"`
	// The error message.
	Message *string `json:"message,omitempty"`
}

// NewOTCErrorProcessingSpansTrackerAllOf instantiates a new OTCErrorProcessingSpansTrackerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOTCErrorProcessingSpansTrackerAllOf() *OTCErrorProcessingSpansTrackerAllOf {
	this := OTCErrorProcessingSpansTrackerAllOf{}
	return &this
}

// NewOTCErrorProcessingSpansTrackerAllOfWithDefaults instantiates a new OTCErrorProcessingSpansTrackerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOTCErrorProcessingSpansTrackerAllOfWithDefaults() *OTCErrorProcessingSpansTrackerAllOf {
	this := OTCErrorProcessingSpansTrackerAllOf{}
	return &this
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *OTCErrorProcessingSpansTrackerAllOf) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCErrorProcessingSpansTrackerAllOf) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *OTCErrorProcessingSpansTrackerAllOf) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *OTCErrorProcessingSpansTrackerAllOf) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetInstanceAddress returns the InstanceAddress field value if set, zero value otherwise.
func (o *OTCErrorProcessingSpansTrackerAllOf) GetInstanceAddress() string {
	if o == nil || IsNil(o.InstanceAddress) {
		var ret string
		return ret
	}
	return *o.InstanceAddress
}

// GetInstanceAddressOk returns a tuple with the InstanceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCErrorProcessingSpansTrackerAllOf) GetInstanceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceAddress) {
		return nil, false
	}
	return o.InstanceAddress, true
}

// HasInstanceAddress returns a boolean if a field has been set.
func (o *OTCErrorProcessingSpansTrackerAllOf) HasInstanceAddress() bool {
	if o != nil && !IsNil(o.InstanceAddress) {
		return true
	}

	return false
}

// SetInstanceAddress gets a reference to the given string and assigns it to the InstanceAddress field.
func (o *OTCErrorProcessingSpansTrackerAllOf) SetInstanceAddress(v string) {
	o.InstanceAddress = &v
}

// GetProcessorId returns the ProcessorId field value if set, zero value otherwise.
func (o *OTCErrorProcessingSpansTrackerAllOf) GetProcessorId() string {
	if o == nil || IsNil(o.ProcessorId) {
		var ret string
		return ret
	}
	return *o.ProcessorId
}

// GetProcessorIdOk returns a tuple with the ProcessorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCErrorProcessingSpansTrackerAllOf) GetProcessorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessorId) {
		return nil, false
	}
	return o.ProcessorId, true
}

// HasProcessorId returns a boolean if a field has been set.
func (o *OTCErrorProcessingSpansTrackerAllOf) HasProcessorId() bool {
	if o != nil && !IsNil(o.ProcessorId) {
		return true
	}

	return false
}

// SetProcessorId gets a reference to the given string and assigns it to the ProcessorId field.
func (o *OTCErrorProcessingSpansTrackerAllOf) SetProcessorId(v string) {
	o.ProcessorId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *OTCErrorProcessingSpansTrackerAllOf) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCErrorProcessingSpansTrackerAllOf) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *OTCErrorProcessingSpansTrackerAllOf) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *OTCErrorProcessingSpansTrackerAllOf) SetMessage(v string) {
	o.Message = &v
}

func (o OTCErrorProcessingSpansTrackerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OTCErrorProcessingSpansTrackerAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstanceId) {
		toSerialize["instanceId"] = o.InstanceId
	}
	if !IsNil(o.InstanceAddress) {
		toSerialize["instanceAddress"] = o.InstanceAddress
	}
	if !IsNil(o.ProcessorId) {
		toSerialize["processorId"] = o.ProcessorId
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableOTCErrorProcessingSpansTrackerAllOf struct {
	value *OTCErrorProcessingSpansTrackerAllOf
	isSet bool
}

func (v NullableOTCErrorProcessingSpansTrackerAllOf) Get() *OTCErrorProcessingSpansTrackerAllOf {
	return v.value
}

func (v *NullableOTCErrorProcessingSpansTrackerAllOf) Set(val *OTCErrorProcessingSpansTrackerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOTCErrorProcessingSpansTrackerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOTCErrorProcessingSpansTrackerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOTCErrorProcessingSpansTrackerAllOf(val *OTCErrorProcessingSpansTrackerAllOf) *NullableOTCErrorProcessingSpansTrackerAllOf {
	return &NullableOTCErrorProcessingSpansTrackerAllOf{value: val, isSet: true}
}

func (v NullableOTCErrorProcessingSpansTrackerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOTCErrorProcessingSpansTrackerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


