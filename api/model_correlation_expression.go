/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CorrelationExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorrelationExpression{}

// CorrelationExpression struct for CorrelationExpression
type CorrelationExpression struct {
	// The type of correlation expression.
	CorrelationExpressionType string `json:"correlationExpressionType" validate:"regexp=^(StringMatch|And|Or)$"`
}

type _CorrelationExpression CorrelationExpression

// NewCorrelationExpression instantiates a new CorrelationExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorrelationExpression(correlationExpressionType string) *CorrelationExpression {
	this := CorrelationExpression{}
	this.CorrelationExpressionType = correlationExpressionType
	return &this
}

// NewCorrelationExpressionWithDefaults instantiates a new CorrelationExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorrelationExpressionWithDefaults() *CorrelationExpression {
	this := CorrelationExpression{}
	return &this
}

// GetCorrelationExpressionType returns the CorrelationExpressionType field value
func (o *CorrelationExpression) GetCorrelationExpressionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CorrelationExpressionType
}

// GetCorrelationExpressionTypeOk returns a tuple with the CorrelationExpressionType field value
// and a boolean to check if the value has been set.
func (o *CorrelationExpression) GetCorrelationExpressionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CorrelationExpressionType, true
}

// SetCorrelationExpressionType sets field value
func (o *CorrelationExpression) SetCorrelationExpressionType(v string) {
	o.CorrelationExpressionType = v
}

func (o CorrelationExpression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorrelationExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["correlationExpressionType"] = o.CorrelationExpressionType
	return toSerialize, nil
}

func (o *CorrelationExpression) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"correlationExpressionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCorrelationExpression := _CorrelationExpression{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCorrelationExpression)

	if err != nil {
		return err
	}

	*o = CorrelationExpression(varCorrelationExpression)

	return err
}

type NullableCorrelationExpression struct {
	value *CorrelationExpression
	isSet bool
}

func (v NullableCorrelationExpression) Get() *CorrelationExpression {
	return v.value
}

func (v *NullableCorrelationExpression) Set(val *CorrelationExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableCorrelationExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableCorrelationExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorrelationExpression(val *CorrelationExpression) *NullableCorrelationExpression {
	return &NullableCorrelationExpression{value: val, isSet: true}
}

func (v NullableCorrelationExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorrelationExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


