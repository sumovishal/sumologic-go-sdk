/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OTCErrorProcessingSpansTracker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OTCErrorProcessingSpansTracker{}

// OTCErrorProcessingSpansTracker struct for OTCErrorProcessingSpansTracker
type OTCErrorProcessingSpansTracker struct {
	TrackerIdentity
	// Event type.
	EventType *string `json:"eventType,omitempty"`
	// The collector instance ID, e.g. `974b444b-4b45-4f32-aa03-1dbf2a16826d`.
	InstanceId *string `json:"instanceId,omitempty"`
	// The collector instance address, e.g. `172.16.1.14`.
	InstanceAddress *string `json:"instanceAddress,omitempty"`
	// The collector processor ID, e.g. `cascading_filter`.
	ProcessorId *string `json:"processorId,omitempty"`
	// The error message.
	Message *string `json:"message,omitempty"`
}

// NewOTCErrorProcessingSpansTracker instantiates a new OTCErrorProcessingSpansTracker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOTCErrorProcessingSpansTracker(trackerId string, error_ string, description string) *OTCErrorProcessingSpansTracker {
	this := OTCErrorProcessingSpansTracker{}
	this.TrackerId = trackerId
	this.Error = error_
	this.Description = description
	return &this
}

// NewOTCErrorProcessingSpansTrackerWithDefaults instantiates a new OTCErrorProcessingSpansTracker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOTCErrorProcessingSpansTrackerWithDefaults() *OTCErrorProcessingSpansTracker {
	this := OTCErrorProcessingSpansTracker{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *OTCErrorProcessingSpansTracker) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCErrorProcessingSpansTracker) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *OTCErrorProcessingSpansTracker) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *OTCErrorProcessingSpansTracker) SetEventType(v string) {
	o.EventType = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *OTCErrorProcessingSpansTracker) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCErrorProcessingSpansTracker) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *OTCErrorProcessingSpansTracker) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *OTCErrorProcessingSpansTracker) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetInstanceAddress returns the InstanceAddress field value if set, zero value otherwise.
func (o *OTCErrorProcessingSpansTracker) GetInstanceAddress() string {
	if o == nil || IsNil(o.InstanceAddress) {
		var ret string
		return ret
	}
	return *o.InstanceAddress
}

// GetInstanceAddressOk returns a tuple with the InstanceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCErrorProcessingSpansTracker) GetInstanceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceAddress) {
		return nil, false
	}
	return o.InstanceAddress, true
}

// HasInstanceAddress returns a boolean if a field has been set.
func (o *OTCErrorProcessingSpansTracker) HasInstanceAddress() bool {
	if o != nil && !IsNil(o.InstanceAddress) {
		return true
	}

	return false
}

// SetInstanceAddress gets a reference to the given string and assigns it to the InstanceAddress field.
func (o *OTCErrorProcessingSpansTracker) SetInstanceAddress(v string) {
	o.InstanceAddress = &v
}

// GetProcessorId returns the ProcessorId field value if set, zero value otherwise.
func (o *OTCErrorProcessingSpansTracker) GetProcessorId() string {
	if o == nil || IsNil(o.ProcessorId) {
		var ret string
		return ret
	}
	return *o.ProcessorId
}

// GetProcessorIdOk returns a tuple with the ProcessorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCErrorProcessingSpansTracker) GetProcessorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessorId) {
		return nil, false
	}
	return o.ProcessorId, true
}

// HasProcessorId returns a boolean if a field has been set.
func (o *OTCErrorProcessingSpansTracker) HasProcessorId() bool {
	if o != nil && !IsNil(o.ProcessorId) {
		return true
	}

	return false
}

// SetProcessorId gets a reference to the given string and assigns it to the ProcessorId field.
func (o *OTCErrorProcessingSpansTracker) SetProcessorId(v string) {
	o.ProcessorId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *OTCErrorProcessingSpansTracker) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTCErrorProcessingSpansTracker) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *OTCErrorProcessingSpansTracker) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *OTCErrorProcessingSpansTracker) SetMessage(v string) {
	o.Message = &v
}

func (o OTCErrorProcessingSpansTracker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OTCErrorProcessingSpansTracker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedTrackerIdentity, errTrackerIdentity := json.Marshal(o.TrackerIdentity)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	errTrackerIdentity = json.Unmarshal([]byte(serializedTrackerIdentity), &toSerialize)
	if errTrackerIdentity != nil {
		return map[string]interface{}{}, errTrackerIdentity
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.InstanceId) {
		toSerialize["instanceId"] = o.InstanceId
	}
	if !IsNil(o.InstanceAddress) {
		toSerialize["instanceAddress"] = o.InstanceAddress
	}
	if !IsNil(o.ProcessorId) {
		toSerialize["processorId"] = o.ProcessorId
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableOTCErrorProcessingSpansTracker struct {
	value *OTCErrorProcessingSpansTracker
	isSet bool
}

func (v NullableOTCErrorProcessingSpansTracker) Get() *OTCErrorProcessingSpansTracker {
	return v.value
}

func (v *NullableOTCErrorProcessingSpansTracker) Set(val *OTCErrorProcessingSpansTracker) {
	v.value = val
	v.isSet = true
}

func (v NullableOTCErrorProcessingSpansTracker) IsSet() bool {
	return v.isSet
}

func (v *NullableOTCErrorProcessingSpansTracker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOTCErrorProcessingSpansTracker(val *OTCErrorProcessingSpansTracker) *NullableOTCErrorProcessingSpansTracker {
	return &NullableOTCErrorProcessingSpansTracker{value: val, isSet: true}
}

func (v NullableOTCErrorProcessingSpansTracker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOTCErrorProcessingSpansTracker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


