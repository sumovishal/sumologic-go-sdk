/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AzureEventHubConnectionErrorTrackerAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureEventHubConnectionErrorTrackerAllOf{}

// AzureEventHubConnectionErrorTrackerAllOf struct for AzureEventHubConnectionErrorTrackerAllOf
type AzureEventHubConnectionErrorTrackerAllOf struct {
	// The namespace of the associated source.
	FullyQualifiedNamespace *string `json:"fullyQualifiedNamespace,omitempty"`
	// The event hub name of the associated source.
	EventHub *string `json:"eventHub,omitempty"`
}

// NewAzureEventHubConnectionErrorTrackerAllOf instantiates a new AzureEventHubConnectionErrorTrackerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureEventHubConnectionErrorTrackerAllOf() *AzureEventHubConnectionErrorTrackerAllOf {
	this := AzureEventHubConnectionErrorTrackerAllOf{}
	return &this
}

// NewAzureEventHubConnectionErrorTrackerAllOfWithDefaults instantiates a new AzureEventHubConnectionErrorTrackerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureEventHubConnectionErrorTrackerAllOfWithDefaults() *AzureEventHubConnectionErrorTrackerAllOf {
	this := AzureEventHubConnectionErrorTrackerAllOf{}
	return &this
}

// GetFullyQualifiedNamespace returns the FullyQualifiedNamespace field value if set, zero value otherwise.
func (o *AzureEventHubConnectionErrorTrackerAllOf) GetFullyQualifiedNamespace() string {
	if o == nil || IsNil(o.FullyQualifiedNamespace) {
		var ret string
		return ret
	}
	return *o.FullyQualifiedNamespace
}

// GetFullyQualifiedNamespaceOk returns a tuple with the FullyQualifiedNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureEventHubConnectionErrorTrackerAllOf) GetFullyQualifiedNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.FullyQualifiedNamespace) {
		return nil, false
	}
	return o.FullyQualifiedNamespace, true
}

// HasFullyQualifiedNamespace returns a boolean if a field has been set.
func (o *AzureEventHubConnectionErrorTrackerAllOf) HasFullyQualifiedNamespace() bool {
	if o != nil && !IsNil(o.FullyQualifiedNamespace) {
		return true
	}

	return false
}

// SetFullyQualifiedNamespace gets a reference to the given string and assigns it to the FullyQualifiedNamespace field.
func (o *AzureEventHubConnectionErrorTrackerAllOf) SetFullyQualifiedNamespace(v string) {
	o.FullyQualifiedNamespace = &v
}

// GetEventHub returns the EventHub field value if set, zero value otherwise.
func (o *AzureEventHubConnectionErrorTrackerAllOf) GetEventHub() string {
	if o == nil || IsNil(o.EventHub) {
		var ret string
		return ret
	}
	return *o.EventHub
}

// GetEventHubOk returns a tuple with the EventHub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureEventHubConnectionErrorTrackerAllOf) GetEventHubOk() (*string, bool) {
	if o == nil || IsNil(o.EventHub) {
		return nil, false
	}
	return o.EventHub, true
}

// HasEventHub returns a boolean if a field has been set.
func (o *AzureEventHubConnectionErrorTrackerAllOf) HasEventHub() bool {
	if o != nil && !IsNil(o.EventHub) {
		return true
	}

	return false
}

// SetEventHub gets a reference to the given string and assigns it to the EventHub field.
func (o *AzureEventHubConnectionErrorTrackerAllOf) SetEventHub(v string) {
	o.EventHub = &v
}

func (o AzureEventHubConnectionErrorTrackerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureEventHubConnectionErrorTrackerAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FullyQualifiedNamespace) {
		toSerialize["fullyQualifiedNamespace"] = o.FullyQualifiedNamespace
	}
	if !IsNil(o.EventHub) {
		toSerialize["eventHub"] = o.EventHub
	}
	return toSerialize, nil
}

type NullableAzureEventHubConnectionErrorTrackerAllOf struct {
	value *AzureEventHubConnectionErrorTrackerAllOf
	isSet bool
}

func (v NullableAzureEventHubConnectionErrorTrackerAllOf) Get() *AzureEventHubConnectionErrorTrackerAllOf {
	return v.value
}

func (v *NullableAzureEventHubConnectionErrorTrackerAllOf) Set(val *AzureEventHubConnectionErrorTrackerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureEventHubConnectionErrorTrackerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureEventHubConnectionErrorTrackerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureEventHubConnectionErrorTrackerAllOf(val *AzureEventHubConnectionErrorTrackerAllOf) *NullableAzureEventHubConnectionErrorTrackerAllOf {
	return &NullableAzureEventHubConnectionErrorTrackerAllOf{value: val, isSet: true}
}

func (v NullableAzureEventHubConnectionErrorTrackerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureEventHubConnectionErrorTrackerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


