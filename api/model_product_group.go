/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// ProductGroup Details of product group and its quantity.
type ProductGroup struct {
	// Name of the Product group: 
	ProductGroupName string `json:"productGroupName"`
	// Different product variables of the product group
	ProductVariables []ProductVariable `json:"productVariables"`
}

// NewProductGroup instantiates a new ProductGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductGroup(productGroupName string, productVariables []ProductVariable) *ProductGroup {
	this := ProductGroup{}
	this.ProductGroupName = productGroupName
	this.ProductVariables = productVariables
	return &this
}

// NewProductGroupWithDefaults instantiates a new ProductGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductGroupWithDefaults() *ProductGroup {
	this := ProductGroup{}
	return &this
}

// GetProductGroupName returns the ProductGroupName field value
func (o *ProductGroup) GetProductGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductGroupName
}

// GetProductGroupNameOk returns a tuple with the ProductGroupName field value
// and a boolean to check if the value has been set.
func (o *ProductGroup) GetProductGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductGroupName, true
}

// SetProductGroupName sets field value
func (o *ProductGroup) SetProductGroupName(v string) {
	o.ProductGroupName = v
}

// GetProductVariables returns the ProductVariables field value
func (o *ProductGroup) GetProductVariables() []ProductVariable {
	if o == nil {
		var ret []ProductVariable
		return ret
	}

	return o.ProductVariables
}

// GetProductVariablesOk returns a tuple with the ProductVariables field value
// and a boolean to check if the value has been set.
func (o *ProductGroup) GetProductVariablesOk() ([]ProductVariable, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductVariables, true
}

// SetProductVariables sets field value
func (o *ProductGroup) SetProductVariables(v []ProductVariable) {
	o.ProductVariables = v
}

func (o ProductGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["productGroupName"] = o.ProductGroupName
	}
	if true {
		toSerialize["productVariables"] = o.ProductVariables
	}
	return json.Marshal(toSerialize)
}

type NullableProductGroup struct {
	value *ProductGroup
	isSet bool
}

func (v NullableProductGroup) Get() *ProductGroup {
	return v.value
}

func (v *NullableProductGroup) Set(val *ProductGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableProductGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableProductGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductGroup(val *ProductGroup) *NullableProductGroup {
	return &NullableProductGroup{value: val, isSet: true}
}

func (v NullableProductGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


