/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductGroup{}

// ProductGroup Details of product group and its quantity.
type ProductGroup struct {
	// Name of the Product group: 
	ProductGroupName string `json:"productGroupName"`
	// Id of the Product group
	ProductGroupId *string `json:"productGroupId,omitempty"`
	// Different product variables of the product group
	ProductVariables []ProductVariable `json:"productVariables"`
	// Is provisioning supported on this Product Group. This is applicable for product variables which are not enabled by default.
	ProvisioningSupported *bool `json:"provisioningSupported,omitempty"`
	// Description about the Product group
	Description *string `json:"description,omitempty"`
	// Link to learn more about the Product group
	LearnMoreLink *string `json:"learnMoreLink,omitempty"`
}

type _ProductGroup ProductGroup

// NewProductGroup instantiates a new ProductGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductGroup(productGroupName string, productVariables []ProductVariable) *ProductGroup {
	this := ProductGroup{}
	this.ProductGroupName = productGroupName
	this.ProductVariables = productVariables
	return &this
}

// NewProductGroupWithDefaults instantiates a new ProductGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductGroupWithDefaults() *ProductGroup {
	this := ProductGroup{}
	return &this
}

// GetProductGroupName returns the ProductGroupName field value
func (o *ProductGroup) GetProductGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductGroupName
}

// GetProductGroupNameOk returns a tuple with the ProductGroupName field value
// and a boolean to check if the value has been set.
func (o *ProductGroup) GetProductGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductGroupName, true
}

// SetProductGroupName sets field value
func (o *ProductGroup) SetProductGroupName(v string) {
	o.ProductGroupName = v
}

// GetProductGroupId returns the ProductGroupId field value if set, zero value otherwise.
func (o *ProductGroup) GetProductGroupId() string {
	if o == nil || IsNil(o.ProductGroupId) {
		var ret string
		return ret
	}
	return *o.ProductGroupId
}

// GetProductGroupIdOk returns a tuple with the ProductGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductGroup) GetProductGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductGroupId) {
		return nil, false
	}
	return o.ProductGroupId, true
}

// HasProductGroupId returns a boolean if a field has been set.
func (o *ProductGroup) HasProductGroupId() bool {
	if o != nil && !IsNil(o.ProductGroupId) {
		return true
	}

	return false
}

// SetProductGroupId gets a reference to the given string and assigns it to the ProductGroupId field.
func (o *ProductGroup) SetProductGroupId(v string) {
	o.ProductGroupId = &v
}

// GetProductVariables returns the ProductVariables field value
func (o *ProductGroup) GetProductVariables() []ProductVariable {
	if o == nil {
		var ret []ProductVariable
		return ret
	}

	return o.ProductVariables
}

// GetProductVariablesOk returns a tuple with the ProductVariables field value
// and a boolean to check if the value has been set.
func (o *ProductGroup) GetProductVariablesOk() ([]ProductVariable, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductVariables, true
}

// SetProductVariables sets field value
func (o *ProductGroup) SetProductVariables(v []ProductVariable) {
	o.ProductVariables = v
}

// GetProvisioningSupported returns the ProvisioningSupported field value if set, zero value otherwise.
func (o *ProductGroup) GetProvisioningSupported() bool {
	if o == nil || IsNil(o.ProvisioningSupported) {
		var ret bool
		return ret
	}
	return *o.ProvisioningSupported
}

// GetProvisioningSupportedOk returns a tuple with the ProvisioningSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductGroup) GetProvisioningSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.ProvisioningSupported) {
		return nil, false
	}
	return o.ProvisioningSupported, true
}

// HasProvisioningSupported returns a boolean if a field has been set.
func (o *ProductGroup) HasProvisioningSupported() bool {
	if o != nil && !IsNil(o.ProvisioningSupported) {
		return true
	}

	return false
}

// SetProvisioningSupported gets a reference to the given bool and assigns it to the ProvisioningSupported field.
func (o *ProductGroup) SetProvisioningSupported(v bool) {
	o.ProvisioningSupported = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProductGroup) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductGroup) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProductGroup) SetDescription(v string) {
	o.Description = &v
}

// GetLearnMoreLink returns the LearnMoreLink field value if set, zero value otherwise.
func (o *ProductGroup) GetLearnMoreLink() string {
	if o == nil || IsNil(o.LearnMoreLink) {
		var ret string
		return ret
	}
	return *o.LearnMoreLink
}

// GetLearnMoreLinkOk returns a tuple with the LearnMoreLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductGroup) GetLearnMoreLinkOk() (*string, bool) {
	if o == nil || IsNil(o.LearnMoreLink) {
		return nil, false
	}
	return o.LearnMoreLink, true
}

// HasLearnMoreLink returns a boolean if a field has been set.
func (o *ProductGroup) HasLearnMoreLink() bool {
	if o != nil && !IsNil(o.LearnMoreLink) {
		return true
	}

	return false
}

// SetLearnMoreLink gets a reference to the given string and assigns it to the LearnMoreLink field.
func (o *ProductGroup) SetLearnMoreLink(v string) {
	o.LearnMoreLink = &v
}

func (o ProductGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["productGroupName"] = o.ProductGroupName
	if !IsNil(o.ProductGroupId) {
		toSerialize["productGroupId"] = o.ProductGroupId
	}
	toSerialize["productVariables"] = o.ProductVariables
	if !IsNil(o.ProvisioningSupported) {
		toSerialize["provisioningSupported"] = o.ProvisioningSupported
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LearnMoreLink) {
		toSerialize["learnMoreLink"] = o.LearnMoreLink
	}
	return toSerialize, nil
}

func (o *ProductGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productGroupName",
		"productVariables",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductGroup := _ProductGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductGroup)

	if err != nil {
		return err
	}

	*o = ProductGroup(varProductGroup)

	return err
}

type NullableProductGroup struct {
	value *ProductGroup
	isSet bool
}

func (v NullableProductGroup) Get() *ProductGroup {
	return v.value
}

func (v *NullableProductGroup) Set(val *ProductGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableProductGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableProductGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductGroup(val *ProductGroup) *NullableProductGroup {
	return &NullableProductGroup{value: val, isSet: true}
}

func (v NullableProductGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


