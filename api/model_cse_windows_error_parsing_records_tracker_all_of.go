/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the CSEWindowsErrorParsingRecordsTrackerAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CSEWindowsErrorParsingRecordsTrackerAllOf{}

// CSEWindowsErrorParsingRecordsTrackerAllOf struct for CSEWindowsErrorParsingRecordsTrackerAllOf
type CSEWindowsErrorParsingRecordsTrackerAllOf struct {
	// The sensor ID.
	SensorId *string `json:"sensorId,omitempty"`
	// The sensor's hostname.
	SensorHostname *string `json:"sensorHostname,omitempty"`
	// The HostName + EventLog name for EventLogs and Domain name for Directory.
	Source *string `json:"source,omitempty"`
	// The error count.
	ErrorCount *string `json:"errorCount,omitempty"`
	// The last error message.
	LastErrorMessage *string `json:"lastErrorMessage,omitempty"`
}

// NewCSEWindowsErrorParsingRecordsTrackerAllOf instantiates a new CSEWindowsErrorParsingRecordsTrackerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCSEWindowsErrorParsingRecordsTrackerAllOf() *CSEWindowsErrorParsingRecordsTrackerAllOf {
	this := CSEWindowsErrorParsingRecordsTrackerAllOf{}
	return &this
}

// NewCSEWindowsErrorParsingRecordsTrackerAllOfWithDefaults instantiates a new CSEWindowsErrorParsingRecordsTrackerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCSEWindowsErrorParsingRecordsTrackerAllOfWithDefaults() *CSEWindowsErrorParsingRecordsTrackerAllOf {
	this := CSEWindowsErrorParsingRecordsTrackerAllOf{}
	return &this
}

// GetSensorId returns the SensorId field value if set, zero value otherwise.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) GetSensorId() string {
	if o == nil || IsNil(o.SensorId) {
		var ret string
		return ret
	}
	return *o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) GetSensorIdOk() (*string, bool) {
	if o == nil || IsNil(o.SensorId) {
		return nil, false
	}
	return o.SensorId, true
}

// HasSensorId returns a boolean if a field has been set.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) HasSensorId() bool {
	if o != nil && !IsNil(o.SensorId) {
		return true
	}

	return false
}

// SetSensorId gets a reference to the given string and assigns it to the SensorId field.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) SetSensorId(v string) {
	o.SensorId = &v
}

// GetSensorHostname returns the SensorHostname field value if set, zero value otherwise.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) GetSensorHostname() string {
	if o == nil || IsNil(o.SensorHostname) {
		var ret string
		return ret
	}
	return *o.SensorHostname
}

// GetSensorHostnameOk returns a tuple with the SensorHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) GetSensorHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.SensorHostname) {
		return nil, false
	}
	return o.SensorHostname, true
}

// HasSensorHostname returns a boolean if a field has been set.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) HasSensorHostname() bool {
	if o != nil && !IsNil(o.SensorHostname) {
		return true
	}

	return false
}

// SetSensorHostname gets a reference to the given string and assigns it to the SensorHostname field.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) SetSensorHostname(v string) {
	o.SensorHostname = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) SetSource(v string) {
	o.Source = &v
}

// GetErrorCount returns the ErrorCount field value if set, zero value otherwise.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) GetErrorCount() string {
	if o == nil || IsNil(o.ErrorCount) {
		var ret string
		return ret
	}
	return *o.ErrorCount
}

// GetErrorCountOk returns a tuple with the ErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) GetErrorCountOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCount) {
		return nil, false
	}
	return o.ErrorCount, true
}

// HasErrorCount returns a boolean if a field has been set.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) HasErrorCount() bool {
	if o != nil && !IsNil(o.ErrorCount) {
		return true
	}

	return false
}

// SetErrorCount gets a reference to the given string and assigns it to the ErrorCount field.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) SetErrorCount(v string) {
	o.ErrorCount = &v
}

// GetLastErrorMessage returns the LastErrorMessage field value if set, zero value otherwise.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) GetLastErrorMessage() string {
	if o == nil || IsNil(o.LastErrorMessage) {
		var ret string
		return ret
	}
	return *o.LastErrorMessage
}

// GetLastErrorMessageOk returns a tuple with the LastErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) GetLastErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.LastErrorMessage) {
		return nil, false
	}
	return o.LastErrorMessage, true
}

// HasLastErrorMessage returns a boolean if a field has been set.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) HasLastErrorMessage() bool {
	if o != nil && !IsNil(o.LastErrorMessage) {
		return true
	}

	return false
}

// SetLastErrorMessage gets a reference to the given string and assigns it to the LastErrorMessage field.
func (o *CSEWindowsErrorParsingRecordsTrackerAllOf) SetLastErrorMessage(v string) {
	o.LastErrorMessage = &v
}

func (o CSEWindowsErrorParsingRecordsTrackerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CSEWindowsErrorParsingRecordsTrackerAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SensorId) {
		toSerialize["sensorId"] = o.SensorId
	}
	if !IsNil(o.SensorHostname) {
		toSerialize["sensorHostname"] = o.SensorHostname
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.ErrorCount) {
		toSerialize["errorCount"] = o.ErrorCount
	}
	if !IsNil(o.LastErrorMessage) {
		toSerialize["lastErrorMessage"] = o.LastErrorMessage
	}
	return toSerialize, nil
}

type NullableCSEWindowsErrorParsingRecordsTrackerAllOf struct {
	value *CSEWindowsErrorParsingRecordsTrackerAllOf
	isSet bool
}

func (v NullableCSEWindowsErrorParsingRecordsTrackerAllOf) Get() *CSEWindowsErrorParsingRecordsTrackerAllOf {
	return v.value
}

func (v *NullableCSEWindowsErrorParsingRecordsTrackerAllOf) Set(val *CSEWindowsErrorParsingRecordsTrackerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCSEWindowsErrorParsingRecordsTrackerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCSEWindowsErrorParsingRecordsTrackerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCSEWindowsErrorParsingRecordsTrackerAllOf(val *CSEWindowsErrorParsingRecordsTrackerAllOf) *NullableCSEWindowsErrorParsingRecordsTrackerAllOf {
	return &NullableCSEWindowsErrorParsingRecordsTrackerAllOf{value: val, isSet: true}
}

func (v NullableCSEWindowsErrorParsingRecordsTrackerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCSEWindowsErrorParsingRecordsTrackerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


