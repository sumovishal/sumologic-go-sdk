/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
)

// checks if the ScanBudget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScanBudget{}

// ScanBudget struct for ScanBudget
type ScanBudget struct {
	// Name of the budget.
	Name string `json:"name"`
	// Capacity of the budget.
	Capacity int64 `json:"capacity"`
	// Unit of the budget.
	Unit string `json:"unit"`
	// Type of the budget.
	BudgetType string `json:"budgetType"`
	Scope ScanBudgetScope `json:"scope"`
	// Window of the budget.
	Window string `json:"window"`
	// Grouping of the budget.
	ApplicableOn string `json:"applicableOn"`
	// Grouping Entity of the budget.
	GroupBy string `json:"groupBy"`
	// Actions allowed in the budget.
	Actions []string `json:"actions"`
	// Signifies the state of the budget. (Active/Inactive)
	Status *string `json:"status,omitempty"`
	// Id of the budget.
	Id string `json:"id"`
	// Org Id of the org for the budget.
	OrgId string `json:"orgId"`
	// Date & time when budget was last modified.
	LastModified time.Time `json:"lastModified"`
}

// NewScanBudget instantiates a new ScanBudget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanBudget(name string, capacity int64, unit string, budgetType string, scope ScanBudgetScope, window string, applicableOn string, groupBy string, actions []string, id string, orgId string, lastModified time.Time) *ScanBudget {
	this := ScanBudget{}
	this.Name = name
	this.Capacity = capacity
	this.Unit = unit
	this.BudgetType = budgetType
	this.Scope = scope
	this.Window = window
	this.ApplicableOn = applicableOn
	this.GroupBy = groupBy
	this.Actions = actions
	this.Id = id
	this.OrgId = orgId
	this.LastModified = lastModified
	return &this
}

// NewScanBudgetWithDefaults instantiates a new ScanBudget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanBudgetWithDefaults() *ScanBudget {
	this := ScanBudget{}
	return &this
}

// GetName returns the Name field value
func (o *ScanBudget) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ScanBudget) SetName(v string) {
	o.Name = v
}

// GetCapacity returns the Capacity field value
func (o *ScanBudget) GetCapacity() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetCapacityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *ScanBudget) SetCapacity(v int64) {
	o.Capacity = v
}

// GetUnit returns the Unit field value
func (o *ScanBudget) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *ScanBudget) SetUnit(v string) {
	o.Unit = v
}

// GetBudgetType returns the BudgetType field value
func (o *ScanBudget) GetBudgetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BudgetType
}

// GetBudgetTypeOk returns a tuple with the BudgetType field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetBudgetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BudgetType, true
}

// SetBudgetType sets field value
func (o *ScanBudget) SetBudgetType(v string) {
	o.BudgetType = v
}

// GetScope returns the Scope field value
func (o *ScanBudget) GetScope() ScanBudgetScope {
	if o == nil {
		var ret ScanBudgetScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetScopeOk() (*ScanBudgetScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *ScanBudget) SetScope(v ScanBudgetScope) {
	o.Scope = v
}

// GetWindow returns the Window field value
func (o *ScanBudget) GetWindow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Window
}

// GetWindowOk returns a tuple with the Window field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetWindowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Window, true
}

// SetWindow sets field value
func (o *ScanBudget) SetWindow(v string) {
	o.Window = v
}

// GetApplicableOn returns the ApplicableOn field value
func (o *ScanBudget) GetApplicableOn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicableOn
}

// GetApplicableOnOk returns a tuple with the ApplicableOn field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetApplicableOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicableOn, true
}

// SetApplicableOn sets field value
func (o *ScanBudget) SetApplicableOn(v string) {
	o.ApplicableOn = v
}

// GetGroupBy returns the GroupBy field value
func (o *ScanBudget) GetGroupBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetGroupByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupBy, true
}

// SetGroupBy sets field value
func (o *ScanBudget) SetGroupBy(v string) {
	o.GroupBy = v
}

// GetActions returns the Actions field value
func (o *ScanBudget) GetActions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetActionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *ScanBudget) SetActions(v []string) {
	o.Actions = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ScanBudget) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ScanBudget) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ScanBudget) SetStatus(v string) {
	o.Status = &v
}

// GetId returns the Id field value
func (o *ScanBudget) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ScanBudget) SetId(v string) {
	o.Id = v
}

// GetOrgId returns the OrgId field value
func (o *ScanBudget) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *ScanBudget) SetOrgId(v string) {
	o.OrgId = v
}

// GetLastModified returns the LastModified field value
func (o *ScanBudget) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *ScanBudget) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *ScanBudget) SetLastModified(v time.Time) {
	o.LastModified = v
}

func (o ScanBudget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanBudget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["capacity"] = o.Capacity
	toSerialize["unit"] = o.Unit
	toSerialize["budgetType"] = o.BudgetType
	toSerialize["scope"] = o.Scope
	toSerialize["window"] = o.Window
	toSerialize["applicableOn"] = o.ApplicableOn
	toSerialize["groupBy"] = o.GroupBy
	toSerialize["actions"] = o.Actions
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["id"] = o.Id
	toSerialize["orgId"] = o.OrgId
	toSerialize["lastModified"] = o.LastModified
	return toSerialize, nil
}

type NullableScanBudget struct {
	value *ScanBudget
	isSet bool
}

func (v NullableScanBudget) Get() *ScanBudget {
	return v.value
}

func (v *NullableScanBudget) Set(val *ScanBudget) {
	v.value = val
	v.isSet = true
}

func (v NullableScanBudget) IsSet() bool {
	return v.isSet
}

func (v *NullableScanBudget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanBudget(val *ScanBudget) *NullableScanBudget {
	return &NullableScanBudget{value: val, isSet: true}
}

func (v NullableScanBudget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanBudget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


