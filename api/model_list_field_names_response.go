/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// ListFieldNamesResponse struct for ListFieldNamesResponse
type ListFieldNamesResponse struct {
	// List of all built-in and custom field names.
	Data []FieldName `json:"data"`
}

// NewListFieldNamesResponse instantiates a new ListFieldNamesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListFieldNamesResponse(data []FieldName) *ListFieldNamesResponse {
	this := ListFieldNamesResponse{}
	this.Data = data
	return &this
}

// NewListFieldNamesResponseWithDefaults instantiates a new ListFieldNamesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListFieldNamesResponseWithDefaults() *ListFieldNamesResponse {
	this := ListFieldNamesResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ListFieldNamesResponse) GetData() []FieldName {
	if o == nil {
		var ret []FieldName
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListFieldNamesResponse) GetDataOk() ([]FieldName, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListFieldNamesResponse) SetData(v []FieldName) {
	o.Data = v
}

func (o ListFieldNamesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableListFieldNamesResponse struct {
	value *ListFieldNamesResponse
	isSet bool
}

func (v NullableListFieldNamesResponse) Get() *ListFieldNamesResponse {
	return v.value
}

func (v *NullableListFieldNamesResponse) Set(val *ListFieldNamesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFieldNamesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFieldNamesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFieldNamesResponse(val *ListFieldNamesResponse) *NullableListFieldNamesResponse {
	return &NullableListFieldNamesResponse{value: val, isSet: true}
}

func (v NullableListFieldNamesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFieldNamesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


