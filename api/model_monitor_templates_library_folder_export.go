/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MonitorTemplatesLibraryFolderExport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitorTemplatesLibraryFolderExport{}

// MonitorTemplatesLibraryFolderExport struct for MonitorTemplatesLibraryFolderExport
type MonitorTemplatesLibraryFolderExport struct {
	MonitorTemplatesLibraryBaseExport
	// The items in the folder. A multi-type list of types monitortemplate or folder.
	Children []MonitorTemplatesLibraryBaseExport `json:"children,omitempty"`
}

type _MonitorTemplatesLibraryFolderExport MonitorTemplatesLibraryFolderExport

// NewMonitorTemplatesLibraryFolderExport instantiates a new MonitorTemplatesLibraryFolderExport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorTemplatesLibraryFolderExport(name string, type_ string) *MonitorTemplatesLibraryFolderExport {
	this := MonitorTemplatesLibraryFolderExport{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewMonitorTemplatesLibraryFolderExportWithDefaults instantiates a new MonitorTemplatesLibraryFolderExport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorTemplatesLibraryFolderExportWithDefaults() *MonitorTemplatesLibraryFolderExport {
	this := MonitorTemplatesLibraryFolderExport{}
	return &this
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *MonitorTemplatesLibraryFolderExport) GetChildren() []MonitorTemplatesLibraryBaseExport {
	if o == nil || IsNil(o.Children) {
		var ret []MonitorTemplatesLibraryBaseExport
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorTemplatesLibraryFolderExport) GetChildrenOk() ([]MonitorTemplatesLibraryBaseExport, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *MonitorTemplatesLibraryFolderExport) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []MonitorTemplatesLibraryBaseExport and assigns it to the Children field.
func (o *MonitorTemplatesLibraryFolderExport) SetChildren(v []MonitorTemplatesLibraryBaseExport) {
	o.Children = v
}

func (o MonitorTemplatesLibraryFolderExport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitorTemplatesLibraryFolderExport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedMonitorTemplatesLibraryBaseExport, errMonitorTemplatesLibraryBaseExport := json.Marshal(o.MonitorTemplatesLibraryBaseExport)
	if errMonitorTemplatesLibraryBaseExport != nil {
		return map[string]interface{}{}, errMonitorTemplatesLibraryBaseExport
	}
	errMonitorTemplatesLibraryBaseExport = json.Unmarshal([]byte(serializedMonitorTemplatesLibraryBaseExport), &toSerialize)
	if errMonitorTemplatesLibraryBaseExport != nil {
		return map[string]interface{}{}, errMonitorTemplatesLibraryBaseExport
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	return toSerialize, nil
}

func (o *MonitorTemplatesLibraryFolderExport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMonitorTemplatesLibraryFolderExport := _MonitorTemplatesLibraryFolderExport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMonitorTemplatesLibraryFolderExport)

	if err != nil {
		return err
	}

	*o = MonitorTemplatesLibraryFolderExport(varMonitorTemplatesLibraryFolderExport)

	return err
}

type NullableMonitorTemplatesLibraryFolderExport struct {
	value *MonitorTemplatesLibraryFolderExport
	isSet bool
}

func (v NullableMonitorTemplatesLibraryFolderExport) Get() *MonitorTemplatesLibraryFolderExport {
	return v.value
}

func (v *NullableMonitorTemplatesLibraryFolderExport) Set(val *MonitorTemplatesLibraryFolderExport) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorTemplatesLibraryFolderExport) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorTemplatesLibraryFolderExport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorTemplatesLibraryFolderExport(val *MonitorTemplatesLibraryFolderExport) *NullableMonitorTemplatesLibraryFolderExport {
	return &NullableMonitorTemplatesLibraryFolderExport{value: val, isSet: true}
}

func (v NullableMonitorTemplatesLibraryFolderExport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorTemplatesLibraryFolderExport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


