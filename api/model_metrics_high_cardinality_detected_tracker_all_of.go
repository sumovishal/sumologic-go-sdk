/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the MetricsHighCardinalityDetectedTrackerAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsHighCardinalityDetectedTrackerAllOf{}

// MetricsHighCardinalityDetectedTrackerAllOf struct for MetricsHighCardinalityDetectedTrackerAllOf
type MetricsHighCardinalityDetectedTrackerAllOf struct {
	// The retention of metrics that approached the limit.
	Retention *string `json:"retention,omitempty"`
}

// NewMetricsHighCardinalityDetectedTrackerAllOf instantiates a new MetricsHighCardinalityDetectedTrackerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsHighCardinalityDetectedTrackerAllOf() *MetricsHighCardinalityDetectedTrackerAllOf {
	this := MetricsHighCardinalityDetectedTrackerAllOf{}
	return &this
}

// NewMetricsHighCardinalityDetectedTrackerAllOfWithDefaults instantiates a new MetricsHighCardinalityDetectedTrackerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsHighCardinalityDetectedTrackerAllOfWithDefaults() *MetricsHighCardinalityDetectedTrackerAllOf {
	this := MetricsHighCardinalityDetectedTrackerAllOf{}
	return &this
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *MetricsHighCardinalityDetectedTrackerAllOf) GetRetention() string {
	if o == nil || IsNil(o.Retention) {
		var ret string
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsHighCardinalityDetectedTrackerAllOf) GetRetentionOk() (*string, bool) {
	if o == nil || IsNil(o.Retention) {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *MetricsHighCardinalityDetectedTrackerAllOf) HasRetention() bool {
	if o != nil && !IsNil(o.Retention) {
		return true
	}

	return false
}

// SetRetention gets a reference to the given string and assigns it to the Retention field.
func (o *MetricsHighCardinalityDetectedTrackerAllOf) SetRetention(v string) {
	o.Retention = &v
}

func (o MetricsHighCardinalityDetectedTrackerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsHighCardinalityDetectedTrackerAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Retention) {
		toSerialize["retention"] = o.Retention
	}
	return toSerialize, nil
}

type NullableMetricsHighCardinalityDetectedTrackerAllOf struct {
	value *MetricsHighCardinalityDetectedTrackerAllOf
	isSet bool
}

func (v NullableMetricsHighCardinalityDetectedTrackerAllOf) Get() *MetricsHighCardinalityDetectedTrackerAllOf {
	return v.value
}

func (v *NullableMetricsHighCardinalityDetectedTrackerAllOf) Set(val *MetricsHighCardinalityDetectedTrackerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsHighCardinalityDetectedTrackerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsHighCardinalityDetectedTrackerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsHighCardinalityDetectedTrackerAllOf(val *MetricsHighCardinalityDetectedTrackerAllOf) *NullableMetricsHighCardinalityDetectedTrackerAllOf {
	return &NullableMetricsHighCardinalityDetectedTrackerAllOf{value: val, isSet: true}
}

func (v NullableMetricsHighCardinalityDetectedTrackerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsHighCardinalityDetectedTrackerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


