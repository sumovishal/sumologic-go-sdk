/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CapabilityMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapabilityMap{}

// CapabilityMap struct for CapabilityMap
type CapabilityMap struct {
	// Map of capabilities to their attributes
	Capabilities map[string]CapabilityDefinition `json:"capabilities"`
}

type _CapabilityMap CapabilityMap

// NewCapabilityMap instantiates a new CapabilityMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapabilityMap(capabilities map[string]CapabilityDefinition) *CapabilityMap {
	this := CapabilityMap{}
	this.Capabilities = capabilities
	return &this
}

// NewCapabilityMapWithDefaults instantiates a new CapabilityMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapabilityMapWithDefaults() *CapabilityMap {
	this := CapabilityMap{}
	return &this
}

// GetCapabilities returns the Capabilities field value
func (o *CapabilityMap) GetCapabilities() map[string]CapabilityDefinition {
	if o == nil {
		var ret map[string]CapabilityDefinition
		return ret
	}

	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value
// and a boolean to check if the value has been set.
func (o *CapabilityMap) GetCapabilitiesOk() (*map[string]CapabilityDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capabilities, true
}

// SetCapabilities sets field value
func (o *CapabilityMap) SetCapabilities(v map[string]CapabilityDefinition) {
	o.Capabilities = v
}

func (o CapabilityMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapabilityMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capabilities"] = o.Capabilities
	return toSerialize, nil
}

func (o *CapabilityMap) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capabilities",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCapabilityMap := _CapabilityMap{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCapabilityMap)

	if err != nil {
		return err
	}

	*o = CapabilityMap(varCapabilityMap)

	return err
}

type NullableCapabilityMap struct {
	value *CapabilityMap
	isSet bool
}

func (v NullableCapabilityMap) Get() *CapabilityMap {
	return v.value
}

func (v *NullableCapabilityMap) Set(val *CapabilityMap) {
	v.value = val
	v.isSet = true
}

func (v NullableCapabilityMap) IsSet() bool {
	return v.isSet
}

func (v *NullableCapabilityMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapabilityMap(val *CapabilityMap) *NullableCapabilityMap {
	return &NullableCapabilityMap{value: val, isSet: true}
}

func (v NullableCapabilityMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapabilityMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


