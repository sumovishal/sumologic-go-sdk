/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// TopologySearchLabel Topology label to search for. Each label has a key and a list of values. If a value is `*`, it means we want to match for all values of the label's key. 
type TopologySearchLabel struct {
	// Key of a topology label to search for.
	Key string `json:"key"`
	// Value of a topology label to search for.
	Value string `json:"value"`
	// Whether the content item is required to contain this label in order to be matched. If true, content items without this label will not be matched. If false, content items without this label will be matched. 
	IsRequired *bool `json:"isRequired,omitempty"`
}

// NewTopologySearchLabel instantiates a new TopologySearchLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopologySearchLabel(key string, value string) *TopologySearchLabel {
	this := TopologySearchLabel{}
	this.Key = key
	this.Value = value
	return &this
}

// NewTopologySearchLabelWithDefaults instantiates a new TopologySearchLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopologySearchLabelWithDefaults() *TopologySearchLabel {
	this := TopologySearchLabel{}
	return &this
}

// GetKey returns the Key field value
func (o *TopologySearchLabel) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TopologySearchLabel) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TopologySearchLabel) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *TopologySearchLabel) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TopologySearchLabel) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TopologySearchLabel) SetValue(v string) {
	o.Value = v
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *TopologySearchLabel) GetIsRequired() bool {
	if o == nil || o.IsRequired == nil {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologySearchLabel) GetIsRequiredOk() (*bool, bool) {
	if o == nil || o.IsRequired == nil {
		return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *TopologySearchLabel) HasIsRequired() bool {
	if o != nil && o.IsRequired != nil {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *TopologySearchLabel) SetIsRequired(v bool) {
	o.IsRequired = &v
}

func (o TopologySearchLabel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if o.IsRequired != nil {
		toSerialize["isRequired"] = o.IsRequired
	}
	return json.Marshal(toSerialize)
}

type NullableTopologySearchLabel struct {
	value *TopologySearchLabel
	isSet bool
}

func (v NullableTopologySearchLabel) Get() *TopologySearchLabel {
	return v.value
}

func (v *NullableTopologySearchLabel) Set(val *TopologySearchLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableTopologySearchLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableTopologySearchLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopologySearchLabel(val *TopologySearchLabel) *NullableTopologySearchLabel {
	return &NullableTopologySearchLabel{value: val, isSet: true}
}

func (v NullableTopologySearchLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopologySearchLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


