/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateDataForwardingRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDataForwardingRule{}

// CreateDataForwardingRule struct for CreateDataForwardingRule
type CreateDataForwardingRule struct {
	// The `id` of the Partition or Scheduled View the rule applies to.
	IndexId string `json:"indexId"`
	// The data forwarding destination id.
	DestinationId string `json:"destinationId"`
	// True when the data forwarding rule is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Specify the path prefix to a directory in the S3 bucket and how to format the file name.
	FileFormat *string `json:"fileFormat,omitempty"`
	// Format of the payload.
	Format *string `json:"format,omitempty" validate:"regexp=^(csv|raw|json)$"`
}

type _CreateDataForwardingRule CreateDataForwardingRule

// NewCreateDataForwardingRule instantiates a new CreateDataForwardingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDataForwardingRule(indexId string, destinationId string) *CreateDataForwardingRule {
	this := CreateDataForwardingRule{}
	this.IndexId = indexId
	this.DestinationId = destinationId
	var format string = "csv"
	this.Format = &format
	return &this
}

// NewCreateDataForwardingRuleWithDefaults instantiates a new CreateDataForwardingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDataForwardingRuleWithDefaults() *CreateDataForwardingRule {
	this := CreateDataForwardingRule{}
	var format string = "csv"
	this.Format = &format
	return &this
}

// GetIndexId returns the IndexId field value
func (o *CreateDataForwardingRule) GetIndexId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexId
}

// GetIndexIdOk returns a tuple with the IndexId field value
// and a boolean to check if the value has been set.
func (o *CreateDataForwardingRule) GetIndexIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexId, true
}

// SetIndexId sets field value
func (o *CreateDataForwardingRule) SetIndexId(v string) {
	o.IndexId = v
}

// GetDestinationId returns the DestinationId field value
func (o *CreateDataForwardingRule) GetDestinationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
func (o *CreateDataForwardingRule) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationId, true
}

// SetDestinationId sets field value
func (o *CreateDataForwardingRule) SetDestinationId(v string) {
	o.DestinationId = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CreateDataForwardingRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataForwardingRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CreateDataForwardingRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CreateDataForwardingRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFileFormat returns the FileFormat field value if set, zero value otherwise.
func (o *CreateDataForwardingRule) GetFileFormat() string {
	if o == nil || IsNil(o.FileFormat) {
		var ret string
		return ret
	}
	return *o.FileFormat
}

// GetFileFormatOk returns a tuple with the FileFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataForwardingRule) GetFileFormatOk() (*string, bool) {
	if o == nil || IsNil(o.FileFormat) {
		return nil, false
	}
	return o.FileFormat, true
}

// HasFileFormat returns a boolean if a field has been set.
func (o *CreateDataForwardingRule) HasFileFormat() bool {
	if o != nil && !IsNil(o.FileFormat) {
		return true
	}

	return false
}

// SetFileFormat gets a reference to the given string and assigns it to the FileFormat field.
func (o *CreateDataForwardingRule) SetFileFormat(v string) {
	o.FileFormat = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *CreateDataForwardingRule) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDataForwardingRule) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *CreateDataForwardingRule) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *CreateDataForwardingRule) SetFormat(v string) {
	o.Format = &v
}

func (o CreateDataForwardingRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDataForwardingRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["indexId"] = o.IndexId
	toSerialize["destinationId"] = o.DestinationId
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.FileFormat) {
		toSerialize["fileFormat"] = o.FileFormat
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	return toSerialize, nil
}

func (o *CreateDataForwardingRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"indexId",
		"destinationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDataForwardingRule := _CreateDataForwardingRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDataForwardingRule)

	if err != nil {
		return err
	}

	*o = CreateDataForwardingRule(varCreateDataForwardingRule)

	return err
}

type NullableCreateDataForwardingRule struct {
	value *CreateDataForwardingRule
	isSet bool
}

func (v NullableCreateDataForwardingRule) Get() *CreateDataForwardingRule {
	return v.value
}

func (v *NullableCreateDataForwardingRule) Set(val *CreateDataForwardingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDataForwardingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDataForwardingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDataForwardingRule(val *CreateDataForwardingRule) *NullableCreateDataForwardingRule {
	return &NullableCreateDataForwardingRule{value: val, isSet: true}
}

func (v NullableCreateDataForwardingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDataForwardingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


