/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the ScopesList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopesList{}

// ScopesList struct for ScopesList
type ScopesList struct {
	// List of scopes
	Data []ScopeDefinition `json:"data"`
}

// NewScopesList instantiates a new ScopesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopesList(data []ScopeDefinition) *ScopesList {
	this := ScopesList{}
	this.Data = data
	return &this
}

// NewScopesListWithDefaults instantiates a new ScopesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopesListWithDefaults() *ScopesList {
	this := ScopesList{}
	return &this
}

// GetData returns the Data field value
func (o *ScopesList) GetData() []ScopeDefinition {
	if o == nil {
		var ret []ScopeDefinition
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ScopesList) GetDataOk() ([]ScopeDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ScopesList) SetData(v []ScopeDefinition) {
	o.Data = v
}

func (o ScopesList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopesList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableScopesList struct {
	value *ScopesList
	isSet bool
}

func (v NullableScopesList) Get() *ScopesList {
	return v.value
}

func (v *NullableScopesList) Set(val *ScopesList) {
	v.value = val
	v.isSet = true
}

func (v NullableScopesList) IsSet() bool {
	return v.isSet
}

func (v *NullableScopesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopesList(val *ScopesList) *NullableScopesList {
	return &NullableScopesList{value: val, isSet: true}
}

func (v NullableScopesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


