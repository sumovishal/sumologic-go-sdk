/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DisableUnusedAccessKeysPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisableUnusedAccessKeysPolicy{}

// DisableUnusedAccessKeysPolicy Disable Unused Access Keys policy.
type DisableUnusedAccessKeysPolicy struct {
	// The number of days it will take for an unused access key to automatically disable. Setting it to 0 (never) means that the accessKeys will not be disabled automatically.
	UnusedAccessKeysDisableAfterInDays int32 `json:"unusedAccessKeysDisableAfterInDays"`
}

type _DisableUnusedAccessKeysPolicy DisableUnusedAccessKeysPolicy

// NewDisableUnusedAccessKeysPolicy instantiates a new DisableUnusedAccessKeysPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisableUnusedAccessKeysPolicy(unusedAccessKeysDisableAfterInDays int32) *DisableUnusedAccessKeysPolicy {
	this := DisableUnusedAccessKeysPolicy{}
	this.UnusedAccessKeysDisableAfterInDays = unusedAccessKeysDisableAfterInDays
	return &this
}

// NewDisableUnusedAccessKeysPolicyWithDefaults instantiates a new DisableUnusedAccessKeysPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisableUnusedAccessKeysPolicyWithDefaults() *DisableUnusedAccessKeysPolicy {
	this := DisableUnusedAccessKeysPolicy{}
	return &this
}

// GetUnusedAccessKeysDisableAfterInDays returns the UnusedAccessKeysDisableAfterInDays field value
func (o *DisableUnusedAccessKeysPolicy) GetUnusedAccessKeysDisableAfterInDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UnusedAccessKeysDisableAfterInDays
}

// GetUnusedAccessKeysDisableAfterInDaysOk returns a tuple with the UnusedAccessKeysDisableAfterInDays field value
// and a boolean to check if the value has been set.
func (o *DisableUnusedAccessKeysPolicy) GetUnusedAccessKeysDisableAfterInDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnusedAccessKeysDisableAfterInDays, true
}

// SetUnusedAccessKeysDisableAfterInDays sets field value
func (o *DisableUnusedAccessKeysPolicy) SetUnusedAccessKeysDisableAfterInDays(v int32) {
	o.UnusedAccessKeysDisableAfterInDays = v
}

func (o DisableUnusedAccessKeysPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisableUnusedAccessKeysPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["unusedAccessKeysDisableAfterInDays"] = o.UnusedAccessKeysDisableAfterInDays
	return toSerialize, nil
}

func (o *DisableUnusedAccessKeysPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unusedAccessKeysDisableAfterInDays",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDisableUnusedAccessKeysPolicy := _DisableUnusedAccessKeysPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDisableUnusedAccessKeysPolicy)

	if err != nil {
		return err
	}

	*o = DisableUnusedAccessKeysPolicy(varDisableUnusedAccessKeysPolicy)

	return err
}

type NullableDisableUnusedAccessKeysPolicy struct {
	value *DisableUnusedAccessKeysPolicy
	isSet bool
}

func (v NullableDisableUnusedAccessKeysPolicy) Get() *DisableUnusedAccessKeysPolicy {
	return v.value
}

func (v *NullableDisableUnusedAccessKeysPolicy) Set(val *DisableUnusedAccessKeysPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDisableUnusedAccessKeysPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDisableUnusedAccessKeysPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisableUnusedAccessKeysPolicy(val *DisableUnusedAccessKeysPolicy) *NullableDisableUnusedAccessKeysPolicy {
	return &NullableDisableUnusedAccessKeysPolicy{value: val, isSet: true}
}

func (v NullableDisableUnusedAccessKeysPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisableUnusedAccessKeysPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


