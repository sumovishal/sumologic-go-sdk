/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the SpanQueryRowFacet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanQueryRowFacet{}

// SpanQueryRowFacet struct for SpanQueryRowFacet
type SpanQueryRowFacet struct {
	// Name of the field facet.
	Name string `json:"name"`
	// The number of unique values this field occured.
	Cardinality int32 `json:"cardinality"`
	// Data type of the field.
	DataType string `json:"dataType"`
	// Indicates whether the field is available in the span schema.
	InSchema *bool `json:"inSchema,omitempty"`
	// Map of field value frequencies.
	ValueFrequency *map[string]int64 `json:"valueFrequency,omitempty"`
}

// NewSpanQueryRowFacet instantiates a new SpanQueryRowFacet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanQueryRowFacet(name string, cardinality int32, dataType string) *SpanQueryRowFacet {
	this := SpanQueryRowFacet{}
	this.Name = name
	this.Cardinality = cardinality
	this.DataType = dataType
	return &this
}

// NewSpanQueryRowFacetWithDefaults instantiates a new SpanQueryRowFacet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanQueryRowFacetWithDefaults() *SpanQueryRowFacet {
	this := SpanQueryRowFacet{}
	return &this
}

// GetName returns the Name field value
func (o *SpanQueryRowFacet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRowFacet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpanQueryRowFacet) SetName(v string) {
	o.Name = v
}

// GetCardinality returns the Cardinality field value
func (o *SpanQueryRowFacet) GetCardinality() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cardinality
}

// GetCardinalityOk returns a tuple with the Cardinality field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRowFacet) GetCardinalityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cardinality, true
}

// SetCardinality sets field value
func (o *SpanQueryRowFacet) SetCardinality(v int32) {
	o.Cardinality = v
}

// GetDataType returns the DataType field value
func (o *SpanQueryRowFacet) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *SpanQueryRowFacet) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *SpanQueryRowFacet) SetDataType(v string) {
	o.DataType = v
}

// GetInSchema returns the InSchema field value if set, zero value otherwise.
func (o *SpanQueryRowFacet) GetInSchema() bool {
	if o == nil || IsNil(o.InSchema) {
		var ret bool
		return ret
	}
	return *o.InSchema
}

// GetInSchemaOk returns a tuple with the InSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryRowFacet) GetInSchemaOk() (*bool, bool) {
	if o == nil || IsNil(o.InSchema) {
		return nil, false
	}
	return o.InSchema, true
}

// HasInSchema returns a boolean if a field has been set.
func (o *SpanQueryRowFacet) HasInSchema() bool {
	if o != nil && !IsNil(o.InSchema) {
		return true
	}

	return false
}

// SetInSchema gets a reference to the given bool and assigns it to the InSchema field.
func (o *SpanQueryRowFacet) SetInSchema(v bool) {
	o.InSchema = &v
}

// GetValueFrequency returns the ValueFrequency field value if set, zero value otherwise.
func (o *SpanQueryRowFacet) GetValueFrequency() map[string]int64 {
	if o == nil || IsNil(o.ValueFrequency) {
		var ret map[string]int64
		return ret
	}
	return *o.ValueFrequency
}

// GetValueFrequencyOk returns a tuple with the ValueFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpanQueryRowFacet) GetValueFrequencyOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.ValueFrequency) {
		return nil, false
	}
	return o.ValueFrequency, true
}

// HasValueFrequency returns a boolean if a field has been set.
func (o *SpanQueryRowFacet) HasValueFrequency() bool {
	if o != nil && !IsNil(o.ValueFrequency) {
		return true
	}

	return false
}

// SetValueFrequency gets a reference to the given map[string]int64 and assigns it to the ValueFrequency field.
func (o *SpanQueryRowFacet) SetValueFrequency(v map[string]int64) {
	o.ValueFrequency = &v
}

func (o SpanQueryRowFacet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanQueryRowFacet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["cardinality"] = o.Cardinality
	toSerialize["dataType"] = o.DataType
	if !IsNil(o.InSchema) {
		toSerialize["inSchema"] = o.InSchema
	}
	if !IsNil(o.ValueFrequency) {
		toSerialize["valueFrequency"] = o.ValueFrequency
	}
	return toSerialize, nil
}

type NullableSpanQueryRowFacet struct {
	value *SpanQueryRowFacet
	isSet bool
}

func (v NullableSpanQueryRowFacet) Get() *SpanQueryRowFacet {
	return v.value
}

func (v *NullableSpanQueryRowFacet) Set(val *SpanQueryRowFacet) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanQueryRowFacet) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanQueryRowFacet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanQueryRowFacet(val *SpanQueryRowFacet) *NullableSpanQueryRowFacet {
	return &NullableSpanQueryRowFacet{value: val, isSet: true}
}

func (v NullableSpanQueryRowFacet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanQueryRowFacet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


