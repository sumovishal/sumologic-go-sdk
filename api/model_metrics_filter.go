/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the MetricsFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsFilter{}

// MetricsFilter The filter for metrics query.
type MetricsFilter struct {
	// The key of the metrics filter.
	Key *string `json:"key,omitempty"`
	// The value of the metrics filter.
	Value string `json:"value"`
	// Whether or not the metrics filter is negated.
	Negation *bool `json:"negation,omitempty"`
}

// NewMetricsFilter instantiates a new MetricsFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsFilter(value string) *MetricsFilter {
	this := MetricsFilter{}
	this.Value = value
	return &this
}

// NewMetricsFilterWithDefaults instantiates a new MetricsFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsFilterWithDefaults() *MetricsFilter {
	this := MetricsFilter{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MetricsFilter) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsFilter) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MetricsFilter) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MetricsFilter) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value
func (o *MetricsFilter) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MetricsFilter) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *MetricsFilter) SetValue(v string) {
	o.Value = v
}

// GetNegation returns the Negation field value if set, zero value otherwise.
func (o *MetricsFilter) GetNegation() bool {
	if o == nil || IsNil(o.Negation) {
		var ret bool
		return ret
	}
	return *o.Negation
}

// GetNegationOk returns a tuple with the Negation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsFilter) GetNegationOk() (*bool, bool) {
	if o == nil || IsNil(o.Negation) {
		return nil, false
	}
	return o.Negation, true
}

// HasNegation returns a boolean if a field has been set.
func (o *MetricsFilter) HasNegation() bool {
	if o != nil && !IsNil(o.Negation) {
		return true
	}

	return false
}

// SetNegation gets a reference to the given bool and assigns it to the Negation field.
func (o *MetricsFilter) SetNegation(v bool) {
	o.Negation = &v
}

func (o MetricsFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	toSerialize["value"] = o.Value
	if !IsNil(o.Negation) {
		toSerialize["negation"] = o.Negation
	}
	return toSerialize, nil
}

type NullableMetricsFilter struct {
	value *MetricsFilter
	isSet bool
}

func (v NullableMetricsFilter) Get() *MetricsFilter {
	return v.value
}

func (v *NullableMetricsFilter) Set(val *MetricsFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsFilter(val *MetricsFilter) *NullableMetricsFilter {
	return &NullableMetricsFilter{value: val, isSet: true}
}

func (v NullableMetricsFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


