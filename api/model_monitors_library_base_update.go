/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// MonitorsLibraryBaseUpdate struct for MonitorsLibraryBaseUpdate
type MonitorsLibraryBaseUpdate struct {
	// The name of the monitor or folder.
	Name string `json:"name"`
	// The description of the monitor or folder.
	Description *string `json:"description,omitempty"`
	// The version of the monitor or folder.
	Version int64 `json:"version"`
	// Type of the object model.
	Type string `json:"type"`
}

// NewMonitorsLibraryBaseUpdate instantiates a new MonitorsLibraryBaseUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorsLibraryBaseUpdate(name string, version int64, type_ string) *MonitorsLibraryBaseUpdate {
	this := MonitorsLibraryBaseUpdate{}
	this.Name = name
	var description string = ""
	this.Description = &description
	this.Version = version
	this.Type = type_
	return &this
}

// NewMonitorsLibraryBaseUpdateWithDefaults instantiates a new MonitorsLibraryBaseUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorsLibraryBaseUpdateWithDefaults() *MonitorsLibraryBaseUpdate {
	this := MonitorsLibraryBaseUpdate{}
	var description string = ""
	this.Description = &description
	return &this
}

// GetName returns the Name field value
func (o *MonitorsLibraryBaseUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MonitorsLibraryBaseUpdate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MonitorsLibraryBaseUpdate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MonitorsLibraryBaseUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitorsLibraryBaseUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MonitorsLibraryBaseUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MonitorsLibraryBaseUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetVersion returns the Version field value
func (o *MonitorsLibraryBaseUpdate) GetVersion() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *MonitorsLibraryBaseUpdate) GetVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *MonitorsLibraryBaseUpdate) SetVersion(v int64) {
	o.Version = v
}

// GetType returns the Type field value
func (o *MonitorsLibraryBaseUpdate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MonitorsLibraryBaseUpdate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MonitorsLibraryBaseUpdate) SetType(v string) {
	o.Type = v
}

func (o MonitorsLibraryBaseUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorsLibraryBaseUpdate struct {
	value *MonitorsLibraryBaseUpdate
	isSet bool
}

func (v NullableMonitorsLibraryBaseUpdate) Get() *MonitorsLibraryBaseUpdate {
	return v.value
}

func (v *NullableMonitorsLibraryBaseUpdate) Set(val *MonitorsLibraryBaseUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorsLibraryBaseUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorsLibraryBaseUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorsLibraryBaseUpdate(val *MonitorsLibraryBaseUpdate) *NullableMonitorsLibraryBaseUpdate {
	return &NullableMonitorsLibraryBaseUpdate{value: val, isSet: true}
}

func (v NullableMonitorsLibraryBaseUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorsLibraryBaseUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


