/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the NormalizedIndicator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NormalizedIndicator{}

// NormalizedIndicator struct for NormalizedIndicator
type NormalizedIndicator struct {
	// ID of the indicator
	Id string `json:"id"`
	// Value of the indicator
	Indicator string `json:"indicator"`
	// Type of indicator
	Type string `json:"type"`
	// User-provided text to identify the source of the indicator
	Source string `json:"source"`
	// When this indicator was first loaded into Sumo. Timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
	Imported time.Time `json:"imported"`
	// When this indicator was most recently updated in Sumo. Timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
	Updated *time.Time `json:"updated,omitempty"`
	// Beginning time this indicator is valid. Timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
	ValidFrom time.Time `json:"validFrom"`
	// Time at which this indicator expires. If not set, the indicator never expires. . Timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
	ValidUntil *time.Time `json:"validUntil,omitempty"`
	// Confidence that the creator has in the correctness of their data, where 100 is highest
	Confidence int32 `json:"confidence"`
	// Type of indicator ( https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_cvhfwe3t9vuo )
	ThreatType string `json:"threatType"`
	// Flattened fields from the original indicator object (e.g. flattened STIX fields)
	Fields *map[string]string `json:"fields,omitempty"`
}

type _NormalizedIndicator NormalizedIndicator

// NewNormalizedIndicator instantiates a new NormalizedIndicator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNormalizedIndicator(id string, indicator string, type_ string, source string, imported time.Time, validFrom time.Time, confidence int32, threatType string) *NormalizedIndicator {
	this := NormalizedIndicator{}
	this.Id = id
	this.Indicator = indicator
	this.Type = type_
	this.Source = source
	this.Imported = imported
	this.ValidFrom = validFrom
	this.Confidence = confidence
	this.ThreatType = threatType
	return &this
}

// NewNormalizedIndicatorWithDefaults instantiates a new NormalizedIndicator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNormalizedIndicatorWithDefaults() *NormalizedIndicator {
	this := NormalizedIndicator{}
	return &this
}

// GetId returns the Id field value
func (o *NormalizedIndicator) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NormalizedIndicator) SetId(v string) {
	o.Id = v
}

// GetIndicator returns the Indicator field value
func (o *NormalizedIndicator) GetIndicator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetIndicatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Indicator, true
}

// SetIndicator sets field value
func (o *NormalizedIndicator) SetIndicator(v string) {
	o.Indicator = v
}

// GetType returns the Type field value
func (o *NormalizedIndicator) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NormalizedIndicator) SetType(v string) {
	o.Type = v
}

// GetSource returns the Source field value
func (o *NormalizedIndicator) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *NormalizedIndicator) SetSource(v string) {
	o.Source = v
}

// GetImported returns the Imported field value
func (o *NormalizedIndicator) GetImported() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Imported
}

// GetImportedOk returns a tuple with the Imported field value
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetImportedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Imported, true
}

// SetImported sets field value
func (o *NormalizedIndicator) SetImported(v time.Time) {
	o.Imported = v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *NormalizedIndicator) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *NormalizedIndicator) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *NormalizedIndicator) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetValidFrom returns the ValidFrom field value
func (o *NormalizedIndicator) GetValidFrom() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetValidFromOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidFrom, true
}

// SetValidFrom sets field value
func (o *NormalizedIndicator) SetValidFrom(v time.Time) {
	o.ValidFrom = v
}

// GetValidUntil returns the ValidUntil field value if set, zero value otherwise.
func (o *NormalizedIndicator) GetValidUntil() time.Time {
	if o == nil || IsNil(o.ValidUntil) {
		var ret time.Time
		return ret
	}
	return *o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetValidUntilOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ValidUntil) {
		return nil, false
	}
	return o.ValidUntil, true
}

// HasValidUntil returns a boolean if a field has been set.
func (o *NormalizedIndicator) HasValidUntil() bool {
	if o != nil && !IsNil(o.ValidUntil) {
		return true
	}

	return false
}

// SetValidUntil gets a reference to the given time.Time and assigns it to the ValidUntil field.
func (o *NormalizedIndicator) SetValidUntil(v time.Time) {
	o.ValidUntil = &v
}

// GetConfidence returns the Confidence field value
func (o *NormalizedIndicator) GetConfidence() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetConfidenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Confidence, true
}

// SetConfidence sets field value
func (o *NormalizedIndicator) SetConfidence(v int32) {
	o.Confidence = v
}

// GetThreatType returns the ThreatType field value
func (o *NormalizedIndicator) GetThreatType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThreatType
}

// GetThreatTypeOk returns a tuple with the ThreatType field value
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetThreatTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThreatType, true
}

// SetThreatType sets field value
func (o *NormalizedIndicator) SetThreatType(v string) {
	o.ThreatType = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *NormalizedIndicator) GetFields() map[string]string {
	if o == nil || IsNil(o.Fields) {
		var ret map[string]string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedIndicator) GetFieldsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *NormalizedIndicator) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]string and assigns it to the Fields field.
func (o *NormalizedIndicator) SetFields(v map[string]string) {
	o.Fields = &v
}

func (o NormalizedIndicator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NormalizedIndicator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["indicator"] = o.Indicator
	toSerialize["type"] = o.Type
	toSerialize["source"] = o.Source
	toSerialize["imported"] = o.Imported
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	toSerialize["validFrom"] = o.ValidFrom
	if !IsNil(o.ValidUntil) {
		toSerialize["validUntil"] = o.ValidUntil
	}
	toSerialize["confidence"] = o.Confidence
	toSerialize["threatType"] = o.ThreatType
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	return toSerialize, nil
}

func (o *NormalizedIndicator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"indicator",
		"type",
		"source",
		"imported",
		"validFrom",
		"confidence",
		"threatType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNormalizedIndicator := _NormalizedIndicator{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNormalizedIndicator)

	if err != nil {
		return err
	}

	*o = NormalizedIndicator(varNormalizedIndicator)

	return err
}

type NullableNormalizedIndicator struct {
	value *NormalizedIndicator
	isSet bool
}

func (v NullableNormalizedIndicator) Get() *NormalizedIndicator {
	return v.value
}

func (v *NullableNormalizedIndicator) Set(val *NormalizedIndicator) {
	v.value = val
	v.isSet = true
}

func (v NullableNormalizedIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullableNormalizedIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNormalizedIndicator(val *NormalizedIndicator) *NullableNormalizedIndicator {
	return &NullableNormalizedIndicator{value: val, isSet: true}
}

func (v NullableNormalizedIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNormalizedIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


