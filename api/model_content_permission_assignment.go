/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContentPermissionAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentPermissionAssignment{}

// ContentPermissionAssignment struct for ContentPermissionAssignment
type ContentPermissionAssignment struct {
	// Content permission name. Valid values are: `View`, `GrantView`, `Edit`, `GrantEdit`, `Manage`, and `GrantManage`.
	PermissionName string `json:"permissionName"`
	// Type of source for the permission. Valid values are: `user`, `role`, and `org`.
	SourceType string `json:"sourceType"`
	// An identifier that belongs to the source type chosen above. For e.g. if the sourceType is set to \"user\", sourceId should be identifier of a user (same goes for `role` and `org` sourceType)
	SourceId string `json:"sourceId"`
	// Unique identifier for the content item.
	ContentId string `json:"contentId"`
}

// NewContentPermissionAssignment instantiates a new ContentPermissionAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentPermissionAssignment(permissionName string, sourceType string, sourceId string, contentId string) *ContentPermissionAssignment {
	this := ContentPermissionAssignment{}
	this.PermissionName = permissionName
	this.SourceType = sourceType
	this.SourceId = sourceId
	this.ContentId = contentId
	return &this
}

// NewContentPermissionAssignmentWithDefaults instantiates a new ContentPermissionAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentPermissionAssignmentWithDefaults() *ContentPermissionAssignment {
	this := ContentPermissionAssignment{}
	return &this
}

// GetPermissionName returns the PermissionName field value
func (o *ContentPermissionAssignment) GetPermissionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PermissionName
}

// GetPermissionNameOk returns a tuple with the PermissionName field value
// and a boolean to check if the value has been set.
func (o *ContentPermissionAssignment) GetPermissionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermissionName, true
}

// SetPermissionName sets field value
func (o *ContentPermissionAssignment) SetPermissionName(v string) {
	o.PermissionName = v
}

// GetSourceType returns the SourceType field value
func (o *ContentPermissionAssignment) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *ContentPermissionAssignment) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *ContentPermissionAssignment) SetSourceType(v string) {
	o.SourceType = v
}

// GetSourceId returns the SourceId field value
func (o *ContentPermissionAssignment) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *ContentPermissionAssignment) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *ContentPermissionAssignment) SetSourceId(v string) {
	o.SourceId = v
}

// GetContentId returns the ContentId field value
func (o *ContentPermissionAssignment) GetContentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentId
}

// GetContentIdOk returns a tuple with the ContentId field value
// and a boolean to check if the value has been set.
func (o *ContentPermissionAssignment) GetContentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentId, true
}

// SetContentId sets field value
func (o *ContentPermissionAssignment) SetContentId(v string) {
	o.ContentId = v
}

func (o ContentPermissionAssignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentPermissionAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permissionName"] = o.PermissionName
	toSerialize["sourceType"] = o.SourceType
	toSerialize["sourceId"] = o.SourceId
	toSerialize["contentId"] = o.ContentId
	return toSerialize, nil
}

type NullableContentPermissionAssignment struct {
	value *ContentPermissionAssignment
	isSet bool
}

func (v NullableContentPermissionAssignment) Get() *ContentPermissionAssignment {
	return v.value
}

func (v *NullableContentPermissionAssignment) Set(val *ContentPermissionAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableContentPermissionAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableContentPermissionAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentPermissionAssignment(val *ContentPermissionAssignment) *NullableContentPermissionAssignment {
	return &NullableContentPermissionAssignment{value: val, isSet: true}
}

func (v NullableContentPermissionAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentPermissionAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


