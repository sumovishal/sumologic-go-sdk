/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// checks if the LogSearchEstimatedUsageByMeteringTypeDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogSearchEstimatedUsageByMeteringTypeDefinition{}

// LogSearchEstimatedUsageByMeteringTypeDefinition struct for LogSearchEstimatedUsageByMeteringTypeDefinition
type LogSearchEstimatedUsageByMeteringTypeDefinition struct {
	// Log search Query to compute the estimated volume of data scanned.
	QueryString string `json:"queryString"`
	TimeRange ResolvableTimeRange `json:"timeRange"`
	// This has the value `true` if the search is to be run by receipt time and `false` if it is to be run by message time.
	RunByReceiptTime *bool `json:"runByReceiptTime,omitempty"`
	// Values for search template used in the search query. Learn more about the search templates here : https://help.sumologic.com/docs/search/get-started-with-search/build-search/search-templates/
	QueryParameters []LogSearchQueryParameterSyncDefinitionBase `json:"queryParameters,omitempty"`
	// Time zone to get the estimated usage details. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List). 
	Timezone string `json:"timezone"`
	EstimatedUsageDetails []EstimatedUsageDetailsWithMeteringType `json:"estimatedUsageDetails"`
}

// NewLogSearchEstimatedUsageByMeteringTypeDefinition instantiates a new LogSearchEstimatedUsageByMeteringTypeDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogSearchEstimatedUsageByMeteringTypeDefinition(queryString string, timeRange ResolvableTimeRange, timezone string, estimatedUsageDetails []EstimatedUsageDetailsWithMeteringType) *LogSearchEstimatedUsageByMeteringTypeDefinition {
	this := LogSearchEstimatedUsageByMeteringTypeDefinition{}
	this.QueryString = queryString
	this.TimeRange = timeRange
	var runByReceiptTime bool = false
	this.RunByReceiptTime = &runByReceiptTime
	this.Timezone = timezone
	this.EstimatedUsageDetails = estimatedUsageDetails
	return &this
}

// NewLogSearchEstimatedUsageByMeteringTypeDefinitionWithDefaults instantiates a new LogSearchEstimatedUsageByMeteringTypeDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogSearchEstimatedUsageByMeteringTypeDefinitionWithDefaults() *LogSearchEstimatedUsageByMeteringTypeDefinition {
	this := LogSearchEstimatedUsageByMeteringTypeDefinition{}
	var runByReceiptTime bool = false
	this.RunByReceiptTime = &runByReceiptTime
	return &this
}

// GetQueryString returns the QueryString field value
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetQueryString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryString
}

// GetQueryStringOk returns a tuple with the QueryString field value
// and a boolean to check if the value has been set.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetQueryStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryString, true
}

// SetQueryString sets field value
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) SetQueryString(v string) {
	o.QueryString = v
}

// GetTimeRange returns the TimeRange field value
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetTimeRange() ResolvableTimeRange {
	if o == nil {
		var ret ResolvableTimeRange
		return ret
	}

	return o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value
// and a boolean to check if the value has been set.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetTimeRangeOk() (*ResolvableTimeRange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeRange, true
}

// SetTimeRange sets field value
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) SetTimeRange(v ResolvableTimeRange) {
	o.TimeRange = v
}

// GetRunByReceiptTime returns the RunByReceiptTime field value if set, zero value otherwise.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetRunByReceiptTime() bool {
	if o == nil || IsNil(o.RunByReceiptTime) {
		var ret bool
		return ret
	}
	return *o.RunByReceiptTime
}

// GetRunByReceiptTimeOk returns a tuple with the RunByReceiptTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetRunByReceiptTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.RunByReceiptTime) {
		return nil, false
	}
	return o.RunByReceiptTime, true
}

// HasRunByReceiptTime returns a boolean if a field has been set.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) HasRunByReceiptTime() bool {
	if o != nil && !IsNil(o.RunByReceiptTime) {
		return true
	}

	return false
}

// SetRunByReceiptTime gets a reference to the given bool and assigns it to the RunByReceiptTime field.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) SetRunByReceiptTime(v bool) {
	o.RunByReceiptTime = &v
}

// GetQueryParameters returns the QueryParameters field value if set, zero value otherwise.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetQueryParameters() []LogSearchQueryParameterSyncDefinitionBase {
	if o == nil || IsNil(o.QueryParameters) {
		var ret []LogSearchQueryParameterSyncDefinitionBase
		return ret
	}
	return o.QueryParameters
}

// GetQueryParametersOk returns a tuple with the QueryParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetQueryParametersOk() ([]LogSearchQueryParameterSyncDefinitionBase, bool) {
	if o == nil || IsNil(o.QueryParameters) {
		return nil, false
	}
	return o.QueryParameters, true
}

// HasQueryParameters returns a boolean if a field has been set.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) HasQueryParameters() bool {
	if o != nil && !IsNil(o.QueryParameters) {
		return true
	}

	return false
}

// SetQueryParameters gets a reference to the given []LogSearchQueryParameterSyncDefinitionBase and assigns it to the QueryParameters field.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) SetQueryParameters(v []LogSearchQueryParameterSyncDefinitionBase) {
	o.QueryParameters = v
}

// GetTimezone returns the Timezone field value
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetTimezone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// SetTimezone sets field value
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) SetTimezone(v string) {
	o.Timezone = v
}

// GetEstimatedUsageDetails returns the EstimatedUsageDetails field value
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetEstimatedUsageDetails() []EstimatedUsageDetailsWithMeteringType {
	if o == nil {
		var ret []EstimatedUsageDetailsWithMeteringType
		return ret
	}

	return o.EstimatedUsageDetails
}

// GetEstimatedUsageDetailsOk returns a tuple with the EstimatedUsageDetails field value
// and a boolean to check if the value has been set.
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) GetEstimatedUsageDetailsOk() ([]EstimatedUsageDetailsWithMeteringType, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedUsageDetails, true
}

// SetEstimatedUsageDetails sets field value
func (o *LogSearchEstimatedUsageByMeteringTypeDefinition) SetEstimatedUsageDetails(v []EstimatedUsageDetailsWithMeteringType) {
	o.EstimatedUsageDetails = v
}

func (o LogSearchEstimatedUsageByMeteringTypeDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogSearchEstimatedUsageByMeteringTypeDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["queryString"] = o.QueryString
	toSerialize["timeRange"] = o.TimeRange
	if !IsNil(o.RunByReceiptTime) {
		toSerialize["runByReceiptTime"] = o.RunByReceiptTime
	}
	if !IsNil(o.QueryParameters) {
		toSerialize["queryParameters"] = o.QueryParameters
	}
	toSerialize["timezone"] = o.Timezone
	toSerialize["estimatedUsageDetails"] = o.EstimatedUsageDetails
	return toSerialize, nil
}

type NullableLogSearchEstimatedUsageByMeteringTypeDefinition struct {
	value *LogSearchEstimatedUsageByMeteringTypeDefinition
	isSet bool
}

func (v NullableLogSearchEstimatedUsageByMeteringTypeDefinition) Get() *LogSearchEstimatedUsageByMeteringTypeDefinition {
	return v.value
}

func (v *NullableLogSearchEstimatedUsageByMeteringTypeDefinition) Set(val *LogSearchEstimatedUsageByMeteringTypeDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSearchEstimatedUsageByMeteringTypeDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSearchEstimatedUsageByMeteringTypeDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSearchEstimatedUsageByMeteringTypeDefinition(val *LogSearchEstimatedUsageByMeteringTypeDefinition) *NullableLogSearchEstimatedUsageByMeteringTypeDefinition {
	return &NullableLogSearchEstimatedUsageByMeteringTypeDefinition{value: val, isSet: true}
}

func (v NullableLogSearchEstimatedUsageByMeteringTypeDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSearchEstimatedUsageByMeteringTypeDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


