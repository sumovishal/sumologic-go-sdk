/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
)

// checks if the CreateScheduledViewDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateScheduledViewDefinition{}

// CreateScheduledViewDefinition struct for CreateScheduledViewDefinition
type CreateScheduledViewDefinition struct {
	// The query that defines the data to be included in the scheduled view.
	Query string `json:"query"`
	// Name of the index for the scheduled view.
	IndexName string `json:"indexName"`
	// Start timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format.
	StartTime time.Time `json:"startTime"`
	// The number of days to retain data in the scheduled view, or -1 to use the default value for your account. Only relevant if your account has multi-retention enabled.
	RetentionPeriod *int32 `json:"retentionPeriod,omitempty"`
	// An optional ID of a data forwarding configuration to be used by the scheduled view.
	DataForwardingId *string `json:"dataForwardingId,omitempty"`
	// Define the parsing mode to scan the JSON format log messages. Possible values are:   1. `AutoParse`   2. `Manual` In AutoParse mode, the system automatically figures out fields to parse based on the search query. While in the Manual mode, no fields are parsed out automatically. For more information see [Dynamic Parsing](https://help.sumologic.com/?cid=0011).
	ParsingMode *string `json:"parsingMode,omitempty"`
}

// NewCreateScheduledViewDefinition instantiates a new CreateScheduledViewDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateScheduledViewDefinition(query string, indexName string, startTime time.Time) *CreateScheduledViewDefinition {
	this := CreateScheduledViewDefinition{}
	this.Query = query
	this.IndexName = indexName
	this.StartTime = startTime
	var retentionPeriod int32 = -1
	this.RetentionPeriod = &retentionPeriod
	var parsingMode string = "Manual"
	this.ParsingMode = &parsingMode
	return &this
}

// NewCreateScheduledViewDefinitionWithDefaults instantiates a new CreateScheduledViewDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateScheduledViewDefinitionWithDefaults() *CreateScheduledViewDefinition {
	this := CreateScheduledViewDefinition{}
	var retentionPeriod int32 = -1
	this.RetentionPeriod = &retentionPeriod
	var parsingMode string = "Manual"
	this.ParsingMode = &parsingMode
	return &this
}

// GetQuery returns the Query field value
func (o *CreateScheduledViewDefinition) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *CreateScheduledViewDefinition) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *CreateScheduledViewDefinition) SetQuery(v string) {
	o.Query = v
}

// GetIndexName returns the IndexName field value
func (o *CreateScheduledViewDefinition) GetIndexName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value
// and a boolean to check if the value has been set.
func (o *CreateScheduledViewDefinition) GetIndexNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IndexName, true
}

// SetIndexName sets field value
func (o *CreateScheduledViewDefinition) SetIndexName(v string) {
	o.IndexName = v
}

// GetStartTime returns the StartTime field value
func (o *CreateScheduledViewDefinition) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *CreateScheduledViewDefinition) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *CreateScheduledViewDefinition) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetRetentionPeriod returns the RetentionPeriod field value if set, zero value otherwise.
func (o *CreateScheduledViewDefinition) GetRetentionPeriod() int32 {
	if o == nil || IsNil(o.RetentionPeriod) {
		var ret int32
		return ret
	}
	return *o.RetentionPeriod
}

// GetRetentionPeriodOk returns a tuple with the RetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateScheduledViewDefinition) GetRetentionPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.RetentionPeriod) {
		return nil, false
	}
	return o.RetentionPeriod, true
}

// HasRetentionPeriod returns a boolean if a field has been set.
func (o *CreateScheduledViewDefinition) HasRetentionPeriod() bool {
	if o != nil && !IsNil(o.RetentionPeriod) {
		return true
	}

	return false
}

// SetRetentionPeriod gets a reference to the given int32 and assigns it to the RetentionPeriod field.
func (o *CreateScheduledViewDefinition) SetRetentionPeriod(v int32) {
	o.RetentionPeriod = &v
}

// GetDataForwardingId returns the DataForwardingId field value if set, zero value otherwise.
func (o *CreateScheduledViewDefinition) GetDataForwardingId() string {
	if o == nil || IsNil(o.DataForwardingId) {
		var ret string
		return ret
	}
	return *o.DataForwardingId
}

// GetDataForwardingIdOk returns a tuple with the DataForwardingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateScheduledViewDefinition) GetDataForwardingIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataForwardingId) {
		return nil, false
	}
	return o.DataForwardingId, true
}

// HasDataForwardingId returns a boolean if a field has been set.
func (o *CreateScheduledViewDefinition) HasDataForwardingId() bool {
	if o != nil && !IsNil(o.DataForwardingId) {
		return true
	}

	return false
}

// SetDataForwardingId gets a reference to the given string and assigns it to the DataForwardingId field.
func (o *CreateScheduledViewDefinition) SetDataForwardingId(v string) {
	o.DataForwardingId = &v
}

// GetParsingMode returns the ParsingMode field value if set, zero value otherwise.
func (o *CreateScheduledViewDefinition) GetParsingMode() string {
	if o == nil || IsNil(o.ParsingMode) {
		var ret string
		return ret
	}
	return *o.ParsingMode
}

// GetParsingModeOk returns a tuple with the ParsingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateScheduledViewDefinition) GetParsingModeOk() (*string, bool) {
	if o == nil || IsNil(o.ParsingMode) {
		return nil, false
	}
	return o.ParsingMode, true
}

// HasParsingMode returns a boolean if a field has been set.
func (o *CreateScheduledViewDefinition) HasParsingMode() bool {
	if o != nil && !IsNil(o.ParsingMode) {
		return true
	}

	return false
}

// SetParsingMode gets a reference to the given string and assigns it to the ParsingMode field.
func (o *CreateScheduledViewDefinition) SetParsingMode(v string) {
	o.ParsingMode = &v
}

func (o CreateScheduledViewDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateScheduledViewDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	toSerialize["indexName"] = o.IndexName
	toSerialize["startTime"] = o.StartTime
	if !IsNil(o.RetentionPeriod) {
		toSerialize["retentionPeriod"] = o.RetentionPeriod
	}
	if !IsNil(o.DataForwardingId) {
		toSerialize["dataForwardingId"] = o.DataForwardingId
	}
	if !IsNil(o.ParsingMode) {
		toSerialize["parsingMode"] = o.ParsingMode
	}
	return toSerialize, nil
}

type NullableCreateScheduledViewDefinition struct {
	value *CreateScheduledViewDefinition
	isSet bool
}

func (v NullableCreateScheduledViewDefinition) Get() *CreateScheduledViewDefinition {
	return v.value
}

func (v *NullableCreateScheduledViewDefinition) Set(val *CreateScheduledViewDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateScheduledViewDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateScheduledViewDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateScheduledViewDefinition(val *CreateScheduledViewDefinition) *NullableCreateScheduledViewDefinition {
	return &NullableCreateScheduledViewDefinition{value: val, isSet: true}
}

func (v NullableCreateScheduledViewDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateScheduledViewDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


