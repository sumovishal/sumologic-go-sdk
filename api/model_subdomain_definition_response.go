/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
)

// SubdomainDefinitionResponse struct for SubdomainDefinitionResponse
type SubdomainDefinitionResponse struct {
	// Creation timestamp in UTC in [RFC3339](https://tools.ietf.org/html/rfc3339) format. 
	CreatedAt time.Time `json:"createdAt"`
	// Identifier of the user who created the resource.
	CreatedBy string `json:"createdBy"`
	// Last modification timestamp in UTC.
	ModifiedAt time.Time `json:"modifiedAt"`
	// Identifier of the user who last modified the resource.
	ModifiedBy string `json:"modifiedBy"`
	// The new subdomain.
	Subdomain string `json:"subdomain"`
	// Login URL corresponding to the subdomain.
	Url string `json:"url"`
}

// NewSubdomainDefinitionResponse instantiates a new SubdomainDefinitionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubdomainDefinitionResponse(createdAt time.Time, createdBy string, modifiedAt time.Time, modifiedBy string, subdomain string, url string) *SubdomainDefinitionResponse {
	this := SubdomainDefinitionResponse{}
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.Subdomain = subdomain
	this.Url = url
	return &this
}

// NewSubdomainDefinitionResponseWithDefaults instantiates a new SubdomainDefinitionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubdomainDefinitionResponseWithDefaults() *SubdomainDefinitionResponse {
	this := SubdomainDefinitionResponse{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *SubdomainDefinitionResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SubdomainDefinitionResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SubdomainDefinitionResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *SubdomainDefinitionResponse) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *SubdomainDefinitionResponse) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *SubdomainDefinitionResponse) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *SubdomainDefinitionResponse) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *SubdomainDefinitionResponse) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *SubdomainDefinitionResponse) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *SubdomainDefinitionResponse) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *SubdomainDefinitionResponse) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *SubdomainDefinitionResponse) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetSubdomain returns the Subdomain field value
func (o *SubdomainDefinitionResponse) GetSubdomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value
// and a boolean to check if the value has been set.
func (o *SubdomainDefinitionResponse) GetSubdomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subdomain, true
}

// SetSubdomain sets field value
func (o *SubdomainDefinitionResponse) SetSubdomain(v string) {
	o.Subdomain = v
}

// GetUrl returns the Url field value
func (o *SubdomainDefinitionResponse) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SubdomainDefinitionResponse) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SubdomainDefinitionResponse) SetUrl(v string) {
	o.Url = v
}

func (o SubdomainDefinitionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if true {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if true {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if true {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	if true {
		toSerialize["subdomain"] = o.Subdomain
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableSubdomainDefinitionResponse struct {
	value *SubdomainDefinitionResponse
	isSet bool
}

func (v NullableSubdomainDefinitionResponse) Get() *SubdomainDefinitionResponse {
	return v.value
}

func (v *NullableSubdomainDefinitionResponse) Set(val *SubdomainDefinitionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubdomainDefinitionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubdomainDefinitionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubdomainDefinitionResponse(val *SubdomainDefinitionResponse) *NullableSubdomainDefinitionResponse {
	return &NullableSubdomainDefinitionResponse{value: val, isSet: true}
}

func (v NullableSubdomainDefinitionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubdomainDefinitionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


