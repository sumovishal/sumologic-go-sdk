/*
Sumo Logic API

Go client for Sumo Logic API. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
	"time"
)

// checks if the ScanBudgetAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScanBudgetAllOf{}

// ScanBudgetAllOf struct for ScanBudgetAllOf
type ScanBudgetAllOf struct {
	// Id of the budget.
	Id string `json:"id"`
	// Org Id of the org for the budget.
	OrgId string `json:"orgId"`
	// Date & time when budget was last modified.
	LastModified time.Time `json:"lastModified"`
}

// NewScanBudgetAllOf instantiates a new ScanBudgetAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanBudgetAllOf(id string, orgId string, lastModified time.Time) *ScanBudgetAllOf {
	this := ScanBudgetAllOf{}
	this.Id = id
	this.OrgId = orgId
	this.LastModified = lastModified
	return &this
}

// NewScanBudgetAllOfWithDefaults instantiates a new ScanBudgetAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanBudgetAllOfWithDefaults() *ScanBudgetAllOf {
	this := ScanBudgetAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *ScanBudgetAllOf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ScanBudgetAllOf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ScanBudgetAllOf) SetId(v string) {
	o.Id = v
}

// GetOrgId returns the OrgId field value
func (o *ScanBudgetAllOf) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *ScanBudgetAllOf) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *ScanBudgetAllOf) SetOrgId(v string) {
	o.OrgId = v
}

// GetLastModified returns the LastModified field value
func (o *ScanBudgetAllOf) GetLastModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastModified
}

// GetLastModifiedOk returns a tuple with the LastModified field value
// and a boolean to check if the value has been set.
func (o *ScanBudgetAllOf) GetLastModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastModified, true
}

// SetLastModified sets field value
func (o *ScanBudgetAllOf) SetLastModified(v time.Time) {
	o.LastModified = v
}

func (o ScanBudgetAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScanBudgetAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["orgId"] = o.OrgId
	toSerialize["lastModified"] = o.LastModified
	return toSerialize, nil
}

type NullableScanBudgetAllOf struct {
	value *ScanBudgetAllOf
	isSet bool
}

func (v NullableScanBudgetAllOf) Get() *ScanBudgetAllOf {
	return v.value
}

func (v *NullableScanBudgetAllOf) Set(val *ScanBudgetAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableScanBudgetAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableScanBudgetAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanBudgetAllOf(val *ScanBudgetAllOf) *NullableScanBudgetAllOf {
	return &NullableScanBudgetAllOf{value: val, isSet: true}
}

func (v NullableScanBudgetAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanBudgetAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


