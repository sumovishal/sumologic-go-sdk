/*
Sumo Logic API

Go client for Sumo Logic API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sumologic

import (
	"encoding/json"
)

// ListAppsResult List of all available apps from the App Catalog.
type ListAppsResult struct {
	// An array of Apps
	Apps []App `json:"apps"`
}

// NewListAppsResult instantiates a new ListAppsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListAppsResult(apps []App) *ListAppsResult {
	this := ListAppsResult{}
	this.Apps = apps
	return &this
}

// NewListAppsResultWithDefaults instantiates a new ListAppsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListAppsResultWithDefaults() *ListAppsResult {
	this := ListAppsResult{}
	return &this
}

// GetApps returns the Apps field value
func (o *ListAppsResult) GetApps() []App {
	if o == nil {
		var ret []App
		return ret
	}

	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value
// and a boolean to check if the value has been set.
func (o *ListAppsResult) GetAppsOk() ([]App, bool) {
	if o == nil {
		return nil, false
	}
	return o.Apps, true
}

// SetApps sets field value
func (o *ListAppsResult) SetApps(v []App) {
	o.Apps = v
}

func (o ListAppsResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["apps"] = o.Apps
	}
	return json.Marshal(toSerialize)
}

type NullableListAppsResult struct {
	value *ListAppsResult
	isSet bool
}

func (v NullableListAppsResult) Get() *ListAppsResult {
	return v.value
}

func (v *NullableListAppsResult) Set(val *ListAppsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListAppsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListAppsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAppsResult(val *ListAppsResult) *NullableListAppsResult {
	return &NullableListAppsResult{value: val, isSet: true}
}

func (v NullableListAppsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAppsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


