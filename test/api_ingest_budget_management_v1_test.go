/*
Sumo Logic API

Testing IngestBudgetManagementV1APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sumologic

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/sumovishal/sumologic-go-sdk"
)

func Test_sumologic_IngestBudgetManagementV1APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IngestBudgetManagementV1APIService AssignCollectorToBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var collectorId string

		resp, httpRes, err := apiClient.IngestBudgetManagementV1API.AssignCollectorToBudget(context.Background(), id, collectorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestBudgetManagementV1APIService CreateIngestBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestBudgetManagementV1API.CreateIngestBudget(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestBudgetManagementV1APIService DeleteIngestBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.IngestBudgetManagementV1API.DeleteIngestBudget(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestBudgetManagementV1APIService GetAssignedCollectors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IngestBudgetManagementV1API.GetAssignedCollectors(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestBudgetManagementV1APIService GetIngestBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IngestBudgetManagementV1API.GetIngestBudget(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestBudgetManagementV1APIService ListIngestBudgets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IngestBudgetManagementV1API.ListIngestBudgets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestBudgetManagementV1APIService RemoveCollectorFromBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var collectorId string

		resp, httpRes, err := apiClient.IngestBudgetManagementV1API.RemoveCollectorFromBudget(context.Background(), id, collectorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestBudgetManagementV1APIService ResetUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.IngestBudgetManagementV1API.ResetUsage(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IngestBudgetManagementV1APIService UpdateIngestBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IngestBudgetManagementV1API.UpdateIngestBudget(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
