/*
Sumo Logic API

Testing BudgetManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sumologic

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/sumovishal/sumologic-go-sdk"
)

func Test_sumologic_BudgetManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BudgetManagementAPIService CreateBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BudgetManagementAPI.CreateBudget(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetManagementAPIService DeleteBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var budgetId string

		httpRes, err := apiClient.BudgetManagementAPI.DeleteBudget(context.Background(), budgetId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetManagementAPIService GetBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var budgetId string

		resp, httpRes, err := apiClient.BudgetManagementAPI.GetBudget(context.Background(), budgetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetManagementAPIService GetBudgetUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var budgetId string

		resp, httpRes, err := apiClient.BudgetManagementAPI.GetBudgetUsage(context.Background(), budgetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetManagementAPIService GetBudgetUsages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BudgetManagementAPI.GetBudgetUsages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetManagementAPIService GetBudgets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BudgetManagementAPI.GetBudgets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetManagementAPIService UpdateBudget", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var budgetId string

		resp, httpRes, err := apiClient.BudgetManagementAPI.UpdateBudget(context.Background(), budgetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
